# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""
import json
import re
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictStr
from typing_extensions import Annotated

from algoliasearch.http.api_response import ApiResponse
from algoliasearch.http.request_options import RequestOptions
from algoliasearch.http.transporter import Transporter
from algoliasearch.http.verb import Verb
from algoliasearch.monitoring.config import Config
from algoliasearch.monitoring.models.incidents_response import IncidentsResponse
from algoliasearch.monitoring.models.indexing_time_response import IndexingTimeResponse
from algoliasearch.monitoring.models.infrastructure_response import (
    InfrastructureResponse,
)
from algoliasearch.monitoring.models.inventory_response import InventoryResponse
from algoliasearch.monitoring.models.latency_response import LatencyResponse
from algoliasearch.monitoring.models.metric import Metric
from algoliasearch.monitoring.models.period import Period
from algoliasearch.monitoring.models.status_response import StatusResponse

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class MonitoringClient:
    PRIMITIVE_TYPES = (float, bool, bytes, str, int)
    NATIVE_TYPES_MAPPING = {
        "int": int,
        "float": float,
        "str": str,
        "bool": bool,
        "object": object,
    }

    def app_id(self) -> str:
        return self._config.app_id

    def __init__(self, transporter: Transporter, config: Config) -> None:
        self._transporter = transporter
        self._config = config

    def create_with_config(config: Config) -> Self:
        transporter = Transporter(config)

        return MonitoringClient(transporter, config)

    def create(app_id: Optional[str] = None, api_key: Optional[str] = None) -> Self:
        return MonitoringClient.create_with_config(Config(app_id, api_key))

    async def close(self) -> None:
        return await self._transporter.close()

    def __deserialize(self, data: Optional[dict], klass: any = None) -> dict:
        """Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param klass: class literal, or string of class name.

        :return: object.
        """
        if data is None:
            return None

        if isinstance(klass, str):
            if klass.startswith("List["):
                sub_kls = re.match(r"List\[(.*)]", klass).group(1)
                return [self.__deserialize(sub_data, sub_kls) for sub_data in data]

            if klass.startswith("Dict["):
                sub_kls = re.match(r"Dict\[([^,]*), (.*)]", klass).group(2)
                return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}

            if klass in self.NATIVE_TYPES_MAPPING:
                klass = self.NATIVE_TYPES_MAPPING[klass]

        if klass in self.PRIMITIVE_TYPES:
            try:
                return klass(data)
            except UnicodeEncodeError:
                return str(data)
            except TypeError:
                return data
        elif klass == object:
            return data
        else:
            return klass.from_dict(data)

    async def call_del_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.DELETE,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def call_del(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.call_del_with_http_info(path, parameters, request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, object)

    async def get_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.get_with_http_info(path, parameters, request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, object)

    async def get_cluster_incidents_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        List incidents for selected clusters.

        List known incidents for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if clusters is not None:
            _path_params["clusters"] = clusters

        _param = self._transporter.param_serialize(
            path="/1/incidents/{clusters}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_cluster_incidents(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> IncidentsResponse:
        """
        List incidents for selected clusters.

        List known incidents for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'IncidentsResponse' result object.
        """

        response = await self.get_cluster_incidents_with_http_info(
            clusters, request_options
        )

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, IncidentsResponse)

    async def get_cluster_status_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        List statuses of selected clusters.

        Report whether a cluster is operational.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if clusters is not None:
            _path_params["clusters"] = clusters

        _param = self._transporter.param_serialize(
            path="/1/status/{clusters}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_cluster_status(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> StatusResponse:
        """
        List statuses of selected clusters.

        Report whether a cluster is operational.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'StatusResponse' result object.
        """

        response = await self.get_cluster_status_with_http_info(
            clusters, request_options
        )

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, StatusResponse)

    async def get_incidents_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List incidents.

        List known incidents for all clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        _param = self._transporter.param_serialize(
            path="/1/incidents",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_incidents(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> IncidentsResponse:
        """
        List incidents.

        List known incidents for all clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'IncidentsResponse' result object.
        """

        response = await self.get_incidents_with_http_info(request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, IncidentsResponse)

    async def get_indexing_time_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get indexing times.

        List the average times for indexing operations for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if clusters is not None:
            _path_params["clusters"] = clusters

        _param = self._transporter.param_serialize(
            path="/1/indexing/{clusters}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_indexing_time(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> IndexingTimeResponse:
        """
        Get indexing times.

        List the average times for indexing operations for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'IndexingTimeResponse' result object.
        """

        response = await self.get_indexing_time_with_http_info(
            clusters, request_options
        )

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, IndexingTimeResponse)

    async def get_inventory_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List servers.

        List the servers belonging to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application's cluster.  - Without authentication, the response lists the servers for all Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        _param = self._transporter.param_serialize(
            path="/1/inventory/servers",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_inventory(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> InventoryResponse:
        """
        List servers.

        List the servers belonging to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application's cluster.  - Without authentication, the response lists the servers for all Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'InventoryResponse' result object.
        """

        response = await self.get_inventory_with_http_info(request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, InventoryResponse)

    async def get_latency_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get search latency times.

        List the average latency for search requests for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if clusters is not None:
            _path_params["clusters"] = clusters

        _param = self._transporter.param_serialize(
            path="/1/latency/{clusters}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_latency(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> LatencyResponse:
        """
        Get search latency times.

        List the average latency for search requests for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'LatencyResponse' result object.
        """

        response = await self.get_latency_with_http_info(clusters, request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, LatencyResponse)

    async def get_metrics_with_http_info(
        self,
        metric: Annotated[
            Metric,
            Field(
                description="Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter. "
            ),
        ],
        period: Annotated[
            Period,
            Field(
                description="Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day. "
            ),
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get metrics for a given period.

        Report the aggregate value of a metric for a selected period of time.

        :param metric: Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter.  (required)
        :type metric: Metric
        :param period: Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.  (required)
        :type period: Period
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if metric is not None:
            _path_params["metric"] = metric.value
        if period is not None:
            _path_params["period"] = period.value

        _param = self._transporter.param_serialize(
            path="/1/infrastructure/{metric}/period/{period}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_metrics(
        self,
        metric: Annotated[
            Metric,
            Field(
                description="Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter. "
            ),
        ],
        period: Annotated[
            Period,
            Field(
                description="Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day. "
            ),
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> InfrastructureResponse:
        """
        Get metrics for a given period.

        Report the aggregate value of a metric for a selected period of time.

        :param metric: Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter.  (required)
        :type metric: Metric
        :param period: Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.  (required)
        :type period: Period
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'InfrastructureResponse' result object.
        """

        response = await self.get_metrics_with_http_info(
            metric, period, request_options
        )

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, InfrastructureResponse)

    async def get_reachability_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Test the reachability of clusters.

        Test whether clusters are reachable or not.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if clusters is not None:
            _path_params["clusters"] = clusters

        _param = self._transporter.param_serialize(
            path="/1/reachability/{clusters}/probes",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_reachability(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> Dict[str, Dict[str, bool]]:
        """
        Test the reachability of clusters.

        Test whether clusters are reachable or not.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'Dict[str, Dict[str, bool]]' result object.
        """

        response = await self.get_reachability_with_http_info(clusters, request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, Dict[str, Dict[str, bool]])

    async def get_status_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List cluster statuses.

        Report whether clusters are operational.  The response depends on whether you authenticate your API request.  - With authentication, the response includes the status of the cluster assigned to your Algolia application.  - Without authentication, the response lists the statuses of all public Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        _param = self._transporter.param_serialize(
            path="/1/status",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_status(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> StatusResponse:
        """
        List cluster statuses.

        Report whether clusters are operational.  The response depends on whether you authenticate your API request.  - With authentication, the response includes the status of the cluster assigned to your Algolia application.  - Without authentication, the response lists the statuses of all public Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'StatusResponse' result object.
        """

        response = await self.get_status_with_http_info(request_options)

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, StatusResponse)

    async def post_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body_params = body

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.POST,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def post(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.post_with_http_info(
            path, parameters, body, request_options
        )

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, object)

    async def put_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body_params = body

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.PUT,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def put(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.put_with_http_info(
            path, parameters, body, request_options
        )

        try:
            data = json.loads(response.raw_data)
        except ValueError:
            data = response.raw_data

        return self.__deserialize(data, object)
