# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""
from __future__ import annotations

from re import match
from typing import Annotated, Any, Dict, List, Optional, Tuple, Union
from urllib.parse import quote

from pydantic import Field, StrictStr

from algoliasearch.http import ApiResponse, RequestOptions, Transporter, Verb
from algoliasearch.monitoring.config import Config
from algoliasearch.monitoring.models import (
    IncidentsResponse,
    IndexingTimeResponse,
    InfrastructureResponse,
    InventoryResponse,
    LatencyResponse,
    Metric,
    Period,
    StatusResponse,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class MonitoringClient:
    PRIMITIVE_TYPES = (float, bool, bytes, str, int)
    NATIVE_TYPES_MAPPING = {
        "int": int,
        "float": float,
        "str": str,
        "bool": bool,
        "object": object,
    }

    def app_id(self) -> str:
        return self._config.app_id

    def __init__(self, transporter: Transporter, config: Config) -> None:
        self._transporter = transporter
        self._config = config

    def create_with_config(config: Config) -> Self:
        transporter = Transporter(config)

        return MonitoringClient(transporter, config)

    def create(app_id: Optional[str] = None, api_key: Optional[str] = None) -> Self:
        return MonitoringClient.create_with_config(Config(app_id, api_key))

    async def close(self) -> None:
        return await self._transporter.close()

    def __deserialize(self, data: Optional[dict], klass: any = None) -> dict:
        """Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param klass: class literal, or string of class name.

        :return: object.
        """
        if data is None:
            return None

        if isinstance(klass, str):
            if klass.startswith("List["):
                sub_kls = match(r"List\[(.*)]", klass).group(1)
                return [self.__deserialize(sub_data, sub_kls) for sub_data in data]

            if klass.startswith("Dict["):
                sub_kls = match(r"Dict\[([^,]*), (.*)]", klass).group(2)
                return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}

            if klass in self.NATIVE_TYPES_MAPPING:
                klass = self.NATIVE_TYPES_MAPPING[klass]

        if klass in self.PRIMITIVE_TYPES:
            try:
                return klass(data)
            except UnicodeEncodeError:
                return str(data)
            except TypeError:
                return data
        elif klass == object:
            return data
        else:
            return klass.from_json(data)

    async def call_del_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'call_del'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.DELETE,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def call_del(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.call_del_with_http_info(path, parameters, request_options)

        return self.__deserialize(response.raw_data, object)

    async def get_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'get'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.get_with_http_info(path, parameters, request_options)

        return self.__deserialize(response.raw_data, object)

    async def get_cluster_incidents_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        List incidents for selected clusters.

        List known incidents for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if clusters is None:
            raise ValueError(
                "'clusters' is required when calling 'get_cluster_incidents'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/incidents/{clusters}".replace("{clusters}", quote(str(clusters)))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_cluster_incidents(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> IncidentsResponse:
        """
        List incidents for selected clusters.

        List known incidents for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'IncidentsResponse' result object.
        """

        response = await self.get_cluster_incidents_with_http_info(
            clusters, request_options
        )

        return self.__deserialize(response.raw_data, IncidentsResponse)

    async def get_cluster_status_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        List statuses of selected clusters.

        Report whether a cluster is operational.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if clusters is None:
            raise ValueError("'clusters' is required when calling 'get_cluster_status'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/status/{clusters}".replace("{clusters}", quote(str(clusters)))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_cluster_status(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> StatusResponse:
        """
        List statuses of selected clusters.

        Report whether a cluster is operational.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'StatusResponse' result object.
        """

        response = await self.get_cluster_status_with_http_info(
            clusters, request_options
        )

        return self.__deserialize(response.raw_data, StatusResponse)

    async def get_incidents_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List incidents.

        List known incidents for all clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/incidents"

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_incidents(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> IncidentsResponse:
        """
        List incidents.

        List known incidents for all clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'IncidentsResponse' result object.
        """

        response = await self.get_incidents_with_http_info(request_options)

        return self.__deserialize(response.raw_data, IncidentsResponse)

    async def get_indexing_time_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get indexing times.

        List the average times for indexing operations for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if clusters is None:
            raise ValueError("'clusters' is required when calling 'get_indexing_time'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/indexing/{clusters}".replace("{clusters}", quote(str(clusters)))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_indexing_time(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> IndexingTimeResponse:
        """
        Get indexing times.

        List the average times for indexing operations for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'IndexingTimeResponse' result object.
        """

        response = await self.get_indexing_time_with_http_info(
            clusters, request_options
        )

        return self.__deserialize(response.raw_data, IndexingTimeResponse)

    async def get_inventory_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List servers.

        List the servers belonging to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application's cluster.  - Without authentication, the response lists the servers for all Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/inventory/servers"

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_inventory(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> InventoryResponse:
        """
        List servers.

        List the servers belonging to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application's cluster.  - Without authentication, the response lists the servers for all Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'InventoryResponse' result object.
        """

        response = await self.get_inventory_with_http_info(request_options)

        return self.__deserialize(response.raw_data, InventoryResponse)

    async def get_latency_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get search latency times.

        List the average latency for search requests for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if clusters is None:
            raise ValueError("'clusters' is required when calling 'get_latency'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/latency/{clusters}".replace("{clusters}", quote(str(clusters)))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_latency(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> LatencyResponse:
        """
        Get search latency times.

        List the average latency for search requests for selected clusters.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'LatencyResponse' result object.
        """

        response = await self.get_latency_with_http_info(clusters, request_options)

        return self.__deserialize(response.raw_data, LatencyResponse)

    async def get_metrics_with_http_info(
        self,
        metric: Annotated[
            Metric,
            Field(
                description="Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter. "
            ),
        ],
        period: Annotated[
            Period,
            Field(
                description="Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day. "
            ),
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get metrics for a given period.

        Report the aggregate value of a metric for a selected period of time.

        :param metric: Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter.  (required)
        :type metric: Metric
        :param period: Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.  (required)
        :type period: Period
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if metric is None:
            raise ValueError("'metric' is required when calling 'get_metrics'")

        if period is None:
            raise ValueError("'period' is required when calling 'get_metrics'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/infrastructure/{metric}/period/{period}".replace(
            "{metric}", quote(str(metric))
        ).replace("{period}", quote(str(period)))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_metrics(
        self,
        metric: Annotated[
            Metric,
            Field(
                description="Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter. "
            ),
        ],
        period: Annotated[
            Period,
            Field(
                description="Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day. "
            ),
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> InfrastructureResponse:
        """
        Get metrics for a given period.

        Report the aggregate value of a metric for a selected period of time.

        :param metric: Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use `*` as the parameter.  (required)
        :type metric: Metric
        :param period: Period over which to aggregate the metrics:  - `minute`. Aggregate the last minute. 1 data point per 10 seconds. - `hour`. Aggregate the last hour. 1 data point per minute. - `day`. Aggregate the last day. 1 data point per 10 minutes. - `week`. Aggregate the last week. 1 data point per hour. - `month`. Aggregate the last month. 1 data point per day.  (required)
        :type period: Period
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'InfrastructureResponse' result object.
        """

        response = await self.get_metrics_with_http_info(
            metric, period, request_options
        )

        return self.__deserialize(response.raw_data, InfrastructureResponse)

    async def get_reachability_with_http_info(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Test the reachability of clusters.

        Test whether clusters are reachable or not.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if clusters is None:
            raise ValueError("'clusters' is required when calling 'get_reachability'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/reachability/{clusters}/probes".replace(
            "{clusters}", quote(str(clusters))
        )

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_reachability(
        self,
        clusters: Annotated[
            StrictStr, Field(description="Subset of clusters, separated by comma.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> Dict[str, Dict[str, bool]]:
        """
        Test the reachability of clusters.

        Test whether clusters are reachable or not.

        :param clusters: Subset of clusters, separated by comma. (required)
        :type clusters: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'Dict[str, Dict[str, bool]]' result object.
        """

        response = await self.get_reachability_with_http_info(clusters, request_options)

        return self.__deserialize(response.raw_data, Dict[str, Dict[str, bool]])

    async def get_status_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List cluster statuses.

        Report whether clusters are operational.  The response depends on whether you authenticate your API request.  - With authentication, the response includes the status of the cluster assigned to your Algolia application.  - Without authentication, the response lists the statuses of all public Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1/status"

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_status(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> StatusResponse:
        """
        List cluster statuses.

        Report whether clusters are operational.  The response depends on whether you authenticate your API request.  - With authentication, the response includes the status of the cluster assigned to your Algolia application.  - Without authentication, the response lists the statuses of all public Algolia clusters.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'StatusResponse' result object.
        """

        response = await self.get_status_with_http_info(request_options)

        return self.__deserialize(response.raw_data, StatusResponse)

    async def post_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'post'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body = body

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.POST,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def post(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.post_with_http_info(
            path, parameters, body, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def put_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'put'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body = body

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.PUT,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def put(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.put_with_http_info(
            path, parameters, body, request_options
        )

        return self.__deserialize(response.raw_data, object)
