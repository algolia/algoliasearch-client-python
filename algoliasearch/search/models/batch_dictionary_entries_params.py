# coding: utf-8

"""
    Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field, StrictBool
from search.models.batch_dictionary_entries_request import BatchDictionaryEntriesRequest

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class BatchDictionaryEntriesParams(BaseModel):
    """
    `batchDictionaryEntries` parameters.
    """

    clear_existing_dictionary_entries: Optional[StrictBool] = Field(
        default=False,
        description="Incidates whether to replace all custom entries in the dictionary with the ones sent with this request.",
        alias="clearExistingDictionaryEntries",
    )
    requests: List[BatchDictionaryEntriesRequest] = Field(
        description="Operations to batch."
    )
    __properties: ClassVar[List[str]] = ["clearExistingDictionaryEntries", "requests"]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True,
        # exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BatchDictionaryEntriesParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of
        # each item in requests (list)
        _items = []
        if self.requests:
            for _item in self.requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict["requests"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BatchDictionaryEntriesParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "clearExistingDictionaryEntries": obj.get(
                    "clearExistingDictionaryEntries"
                )
                if obj.get("clearExistingDictionaryEntries") is not None
                else False,
                "requests": [
                    BatchDictionaryEntriesRequest.from_dict(_item)
                    for _item in obj.get("requests")
                ]
                if obj.get("requests") is not None
                else None,
            }
        )
        return _obj
