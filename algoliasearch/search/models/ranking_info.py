# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


from algoliasearch.search.models.matched_geo_location import MatchedGeoLocation
from algoliasearch.search.models.personalization import Personalization


class RankingInfo(BaseModel):
    """
    Object with detailed information about the record's ranking.
    """

    filters: Optional[int] = Field(default=None, alias="filters")
    """ Whether a filter matched the query. """
    first_matched_word: int = Field(alias="firstMatchedWord")
    """ Position of the first matched word in the best matching attribute of the record. """
    geo_distance: int = Field(alias="geoDistance")
    """ Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters). """
    geo_precision: Optional[int] = Field(default=None, alias="geoPrecision")
    """ Precision used when computing the geo distance, in meters. """
    matched_geo_location: Optional[MatchedGeoLocation] = Field(
        default=None, alias="matchedGeoLocation"
    )
    personalization: Optional[Personalization] = Field(
        default=None, alias="personalization"
    )
    nb_exact_words: int = Field(alias="nbExactWords")
    """ Number of exactly matched words. """
    nb_typos: int = Field(alias="nbTypos")
    """ Number of typos encountered when matching the record. """
    promoted: Optional[bool] = Field(default=None, alias="promoted")
    """ Whether the record was promoted by a rule. """
    proximity_distance: Optional[int] = Field(default=None, alias="proximityDistance")
    """ Number of words between multiple matches in the query plus 1. For single word queries, `proximityDistance` is 0. """
    user_score: int = Field(alias="userScore")
    """ Overall ranking of the record, expressed as a single integer. This attribute is internal. """
    words: Optional[int] = Field(default=None, alias="words")
    """ Number of matched words. """
    promoted_by_re_ranking: Optional[bool] = Field(
        default=None, alias="promotedByReRanking"
    )
    """ Whether the record is re-ranked. """

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RankingInfo from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RankingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj["matchedGeoLocation"] = (
            MatchedGeoLocation.from_dict(obj["matchedGeoLocation"])
            if obj.get("matchedGeoLocation") is not None
            else None
        )
        obj["personalization"] = (
            Personalization.from_dict(obj["personalization"])
            if obj.get("personalization") is not None
            else None
        )

        return cls.model_validate(obj)
