# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


from algoliasearch.recommend.models.hide_consequence_object import HideConsequenceObject
from algoliasearch.recommend.models.params_consequence import ParamsConsequence
from algoliasearch.recommend.models.promote_consequence_object import (
    PromoteConsequenceObject,
)

_ALIASES = {
    "hide": "hide",
    "promote": "promote",
    "params": "params",
}


def _alias_generator(name: str) -> str:
    return _ALIASES.get(name, name)


class Consequence(BaseModel):
    """
    Effect of the rule.
    """

    hide: Optional[List[HideConsequenceObject]] = None
    """ Exclude items from recommendations. """
    promote: Optional[List[PromoteConsequenceObject]] = None
    """ Place items at specific positions in the list of recommendations. """
    params: Optional[ParamsConsequence] = None

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        alias_generator=_alias_generator,
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Consequence from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Consequence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj["hide"] = (
            [HideConsequenceObject.from_dict(_item) for _item in obj["hide"]]
            if obj.get("hide") is not None
            else None
        )
        obj["promote"] = (
            [PromoteConsequenceObject.from_dict(_item) for _item in obj["promote"]]
            if obj.get("promote") is not None
            else None
        )
        obj["params"] = (
            ParamsConsequence.from_dict(obj["params"])
            if obj.get("params") is not None
            else None
        )

        return cls.model_validate(obj)
