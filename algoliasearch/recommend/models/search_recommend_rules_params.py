# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


class SearchRecommendRulesParams(BaseModel):
    """
    Recommend rules parameters.
    """

    query: Optional[str] = Field(default=None, alias="query")
    """ Search query. """
    context: Optional[str] = Field(default=None, alias="context")
    """ Only search for rules with matching context. """
    page: Optional[int] = Field(default=None, alias="page")
    """ Requested page of the API response. """
    hits_per_page: Optional[int] = Field(default=None, alias="hitsPerPage")
    """ Maximum number of hits per page. """
    enabled: Optional[bool] = Field(default=None, alias="enabled")
    """ Whether to only show rules where the value of their `enabled` property matches this parameter. If absent, show all rules, regardless of their `enabled` property.  """
    filters: Optional[str] = Field(default=None, alias="filters")
    """ Filter expression. This only searches for rules matching the filter expression. """
    facets: Optional[List[str]] = Field(default=None, alias="facets")
    """ Include facets and facet values in the response. Use `['*']` to include all facets. """
    max_values_per_facet: Optional[int] = Field(default=None, alias="maxValuesPerFacet")
    """ Maximum number of values to return for each facet. """

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRecommendRulesParams from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRecommendRulesParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return cls.model_validate(obj)
