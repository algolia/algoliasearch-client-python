# coding: utf-8

"""
    Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field, StrictStr
from recommend.models.recommendation_models import RecommendationModels
from recommend.models.search_params_object import SearchParamsObject

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class BaseRecommendationsQuery(BaseModel):
    """
    BaseRecommendationsQuery
    """

    model: RecommendationModels
    object_id: StrictStr = Field(
        description="Unique object identifier.", alias="objectID"
    )
    query_parameters: Optional[SearchParamsObject] = Field(
        default=None, alias="queryParameters"
    )
    fallback_parameters: Optional[SearchParamsObject] = Field(
        default=None, alias="fallbackParameters"
    )
    __properties: ClassVar[List[str]] = [
        "model",
        "objectID",
        "queryParameters",
        "fallbackParameters",
    ]

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True,
        # exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BaseRecommendationsQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of
        # query_parameters
        if self.query_parameters:
            _dict["queryParameters"] = self.query_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of
        # fallback_parameters
        if self.fallback_parameters:
            _dict["fallbackParameters"] = self.fallback_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BaseRecommendationsQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "model": obj.get("model"),
                "objectID": obj.get("objectID"),
                "queryParameters": SearchParamsObject.from_dict(
                    obj.get("queryParameters")
                )
                if obj.get("queryParameters") is not None
                else None,
                "fallbackParameters": SearchParamsObject.from_dict(
                    obj.get("fallbackParameters")
                )
                if obj.get("fallbackParameters") is not None
                else None,
            }
        )
        return _obj
