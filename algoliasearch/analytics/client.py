# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""
from __future__ import annotations

from re import match
from typing import Annotated, Any, Dict, List, Optional, Tuple, Union
from urllib.parse import quote

from pydantic import Field, StrictBool, StrictInt, StrictStr

from algoliasearch.analytics.config import Config
from algoliasearch.analytics.models import (
    Direction,
    GetAverageClickPositionResponse,
    GetClickPositionsResponse,
    GetClickThroughRateResponse,
    GetConversationRateResponse,
    GetNoClickRateResponse,
    GetNoResultsRateResponse,
    GetSearchesCountResponse,
    GetSearchesNoClicksResponse,
    GetSearchesNoResultsResponse,
    GetStatusResponse,
    GetTopCountriesResponse,
    GetTopFilterAttributesResponse,
    GetTopFilterForAttributeResponse,
    GetTopFiltersNoResultsResponse,
    GetTopHitsResponse,
    GetTopSearchesResponse,
    GetUsersCountResponse,
    OrderBy,
)
from algoliasearch.http import ApiResponse, RequestOptions, Transporter, Verb

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class AnalyticsClient:
    PRIMITIVE_TYPES = (float, bool, bytes, str, int)
    NATIVE_TYPES_MAPPING = {
        "int": int,
        "float": float,
        "str": str,
        "bool": bool,
        "object": object,
    }

    def app_id(self) -> str:
        return self._config.app_id

    def __init__(self, transporter: Transporter, config: Config) -> None:
        self._transporter = transporter
        self._config = config

    def create_with_config(config: Config) -> Self:
        transporter = Transporter(config)

        return AnalyticsClient(transporter, config)

    def create(app_id: Optional[str] = None, api_key: Optional[str] = None) -> Self:
        return AnalyticsClient.create_with_config(Config(app_id, api_key))

    async def close(self) -> None:
        return await self._transporter.close()

    def __deserialize(self, data: Optional[dict], klass: any = None) -> dict:
        """Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param klass: class literal, or string of class name.

        :return: object.
        """
        if data is None:
            return None

        if isinstance(klass, str):
            if klass.startswith("List["):
                sub_kls = match(r"List\[(.*)]", klass).group(1)
                return [self.__deserialize(sub_data, sub_kls) for sub_data in data]

            if klass.startswith("Dict["):
                sub_kls = match(r"Dict\[([^,]*), (.*)]", klass).group(2)
                return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}

            if klass in self.NATIVE_TYPES_MAPPING:
                klass = self.NATIVE_TYPES_MAPPING[klass]

        if klass in self.PRIMITIVE_TYPES:
            try:
                return klass(data)
            except UnicodeEncodeError:
                return str(data)
            except TypeError:
                return data
        elif klass == object:
            return data
        else:
            return klass.from_json(data)

    async def custom_delete_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'custom_delete'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.DELETE,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def custom_delete(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.custom_delete_with_http_info(
            path, parameters, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def custom_get_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'custom_get'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def custom_get(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.custom_get_with_http_info(
            path, parameters, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def custom_post_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'custom_post'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body = body

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.POST,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def custom_post(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.custom_post_with_http_info(
            path, parameters, body, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def custom_put_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if path is None:
            raise ValueError("'path' is required when calling 'custom_put'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/1{path}".replace("{path}", path)

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body = body

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.PUT,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def custom_put(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.custom_put_with_http_info(
            path, parameters, body, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def get_average_click_position_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get average click position.

        Return the average click position for the complete time range and for individual days. > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_average_click_position'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/clicks/averageClickPosition"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_average_click_position(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetAverageClickPositionResponse:
        """
        Get average click position.

        Return the average click position for the complete time range and for individual days. > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetAverageClickPositionResponse' result object.
        """

        response = await self.get_average_click_position_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetAverageClickPositionResponse)

    async def get_click_positions_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get click positions.

        Show the number of clicks events and their associated position in the search results.  > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_click_positions'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/clicks/positions"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_click_positions(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetClickPositionsResponse:
        """
        Get click positions.

        Show the number of clicks events and their associated position in the search results.  > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetClickPositionsResponse' result object.
        """

        response = await self.get_click_positions_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetClickPositionsResponse)

    async def get_click_through_rate_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get click-through rate (CTR).

        Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_click_through_rate'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/clicks/clickThroughRate"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_click_through_rate(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetClickThroughRateResponse:
        """
        Get click-through rate (CTR).

        Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetClickThroughRateResponse' result object.
        """

        response = await self.get_click_through_rate_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetClickThroughRateResponse)

    async def get_conversation_rate_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get conversion rate (CR).

        Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_conversation_rate'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/conversions/conversionRate"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_conversation_rate(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetConversationRateResponse:
        """
        Get conversion rate (CR).

        Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetConversationRateResponse' result object.
        """

        response = await self.get_conversation_rate_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetConversationRateResponse)

    async def get_no_click_rate_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get no click rate.

        Returns the rate at which searches don't lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_no_click_rate'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/searches/noClickRate"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_no_click_rate(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetNoClickRateResponse:
        """
        Get no click rate.

        Returns the rate at which searches don't lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetNoClickRateResponse' result object.
        """

        response = await self.get_no_click_rate_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetNoClickRateResponse)

    async def get_no_results_rate_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get no results rate.

        Returns the rate at which searches didn't return any results.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_no_results_rate'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/searches/noResultRate"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_no_results_rate(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetNoResultsRateResponse:
        """
        Get no results rate.

        Returns the rate at which searches didn't return any results.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetNoResultsRateResponse' result object.
        """

        response = await self.get_no_results_rate_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetNoResultsRateResponse)

    async def get_searches_count_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get number of searches.

        Returns the number of searches within a time range.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_searches_count'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/searches/count"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_searches_count(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetSearchesCountResponse:
        """
        Get number of searches.

        Returns the number of searches within a time range.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetSearchesCountResponse' result object.
        """

        response = await self.get_searches_count_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetSearchesCountResponse)

    async def get_searches_no_clicks_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top searches with no clicks.

        Return the most popular of the last 1,000 searches that didn't lead to any clicks.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_searches_no_clicks'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/searches/noClicks"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_searches_no_clicks(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetSearchesNoClicksResponse:
        """
        Get top searches with no clicks.

        Return the most popular of the last 1,000 searches that didn't lead to any clicks.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetSearchesNoClicksResponse' result object.
        """

        response = await self.get_searches_no_clicks_with_http_info(
            index, start_date, end_date, limit, offset, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetSearchesNoClicksResponse)

    async def get_searches_no_results_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top searches with no results.

        Returns the most popular of the latest 1,000 searches that didn't return any results.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_searches_no_results'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/searches/noResults"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_searches_no_results(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetSearchesNoResultsResponse:
        """
        Get top searches with no results.

        Returns the most popular of the latest 1,000 searches that didn't return any results.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetSearchesNoResultsResponse' result object.
        """

        response = await self.get_searches_no_results_with_http_info(
            index, start_date, end_date, limit, offset, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetSearchesNoResultsResponse)

    async def get_status_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get Analytics API status.

        Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, `updatedAt` will be `null`. > **Note**: The Analytics API is updated every 5&nbsp;minutes.

        :param index: Index name to target. (required)
        :type index: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_status'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/status"

        if index is not None:
            _query_params.append(("index", index))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_status(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetStatusResponse:
        """
        Get Analytics API status.

        Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, `updatedAt` will be `null`. > **Note**: The Analytics API is updated every 5&nbsp;minutes.

        :param index: Index name to target. (required)
        :type index: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetStatusResponse' result object.
        """

        response = await self.get_status_with_http_info(index, request_options)

        return self.__deserialize(response.raw_data, GetStatusResponse)

    async def get_top_countries_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top countries.

        Returns top countries. Limited to the 1,000 most frequent ones.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_top_countries'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/countries"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_top_countries(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetTopCountriesResponse:
        """
        Get top countries.

        Returns top countries. Limited to the 1,000 most frequent ones.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetTopCountriesResponse' result object.
        """

        response = await self.get_top_countries_with_http_info(
            index, start_date, end_date, limit, offset, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetTopCountriesResponse)

    async def get_top_filter_attributes_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top filterable attributes.

        Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.

        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_top_filter_attributes'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/filters"

        if index is not None:
            _query_params.append(("index", index))
        if search is not None:
            _query_params.append(("search", search))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_top_filter_attributes(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetTopFilterAttributesResponse:
        """
        Get top filterable attributes.

        Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.

        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetTopFilterAttributesResponse' result object.
        """

        response = await self.get_top_filter_attributes_with_http_info(
            index, search, start_date, end_date, limit, offset, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetTopFilterAttributesResponse)

    async def get_top_filter_for_attribute_with_http_info(
        self,
        attribute: Annotated[StrictStr, Field(description="Attribute name.")],
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top filter values for an attribute.

        Returns the most popular filter values for an attribute in the 1,000 most recently used filters.

        :param attribute: Attribute name. (required)
        :type attribute: str
        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if attribute is None:
            raise ValueError(
                "'attribute' is required when calling 'get_top_filter_for_attribute'"
            )

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_top_filter_for_attribute'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/filters/{attribute}".replace("{attribute}", quote(str(attribute)))

        if index is not None:
            _query_params.append(("index", index))
        if search is not None:
            _query_params.append(("search", search))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_top_filter_for_attribute(
        self,
        attribute: Annotated[StrictStr, Field(description="Attribute name.")],
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetTopFilterForAttributeResponse:
        """
        Get top filter values for an attribute.

        Returns the most popular filter values for an attribute in the 1,000 most recently used filters.

        :param attribute: Attribute name. (required)
        :type attribute: str
        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetTopFilterForAttributeResponse' result object.
        """

        response = await self.get_top_filter_for_attribute_with_http_info(
            attribute,
            index,
            search,
            start_date,
            end_date,
            limit,
            offset,
            tags,
            request_options,
        )

        return self.__deserialize(response.raw_data, GetTopFilterForAttributeResponse)

    async def get_top_filters_no_results_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top filters for a no result search.

        Returns top filters for filter-enabled searches that don't return results. Limited to the 1,000 most recently used filters.

        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError(
                "'index' is required when calling 'get_top_filters_no_results'"
            )

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/filters/noResults"

        if index is not None:
            _query_params.append(("index", index))
        if search is not None:
            _query_params.append(("search", search))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_top_filters_no_results(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetTopFiltersNoResultsResponse:
        """
        Get top filters for a no result search.

        Returns top filters for filter-enabled searches that don't return results. Limited to the 1,000 most recently used filters.

        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetTopFiltersNoResultsResponse' result object.
        """

        response = await self.get_top_filters_no_results_with_http_info(
            index, search, start_date, end_date, limit, offset, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetTopFiltersNoResultsResponse)

    async def get_top_hits_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        click_analytics: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search."
            ),
        ] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top hits.

        Return the most popular clicked results in the last 1,000 searches.

        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param click_analytics: Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search.
        :type click_analytics: bool
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_top_hits'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/hits"

        if index is not None:
            _query_params.append(("index", index))
        if search is not None:
            _query_params.append(("search", search))
        if click_analytics is not None:
            _query_params.append(("clickAnalytics", click_analytics))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_top_hits(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        search: Annotated[Optional[StrictStr], Field(description="User query.")] = None,
        click_analytics: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search."
            ),
        ] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetTopHitsResponse:
        """
        Get top hits.

        Return the most popular clicked results in the last 1,000 searches.

        :param index: Index name to target. (required)
        :type index: str
        :param search: User query.
        :type search: str
        :param click_analytics: Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search.
        :type click_analytics: bool
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetTopHitsResponse' result object.
        """

        response = await self.get_top_hits_with_http_info(
            index,
            search,
            click_analytics,
            start_date,
            end_date,
            limit,
            offset,
            tags,
            request_options,
        )

        return self.__deserialize(response.raw_data, GetTopHitsResponse)

    async def get_top_searches_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        click_analytics: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search."
            ),
        ] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        order_by: Annotated[
            Optional[OrderBy], Field(description="Reorder the results.")
        ] = None,
        direction: Annotated[
            Optional[Direction],
            Field(
                description="Sorting direction of the results: ascending or descending. "
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get top searches.

        Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.

        :param index: Index name to target. (required)
        :type index: str
        :param click_analytics: Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search.
        :type click_analytics: bool
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param order_by: Reorder the results.
        :type order_by: OrderBy
        :param direction: Sorting direction of the results: ascending or descending.
        :type direction: Direction
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_top_searches'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/searches"

        if index is not None:
            _query_params.append(("index", index))
        if click_analytics is not None:
            _query_params.append(("clickAnalytics", click_analytics))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if order_by is not None:
            _query_params.append(("orderBy", order_by.value))
        if direction is not None:
            _query_params.append(("direction", direction.value))
        if limit is not None:
            _query_params.append(("limit", limit))
        if offset is not None:
            _query_params.append(("offset", offset))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_top_searches(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        click_analytics: Annotated[
            Optional[StrictBool],
            Field(
                description="Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search."
            ),
        ] = None,
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        order_by: Annotated[
            Optional[OrderBy], Field(description="Reorder the results.")
        ] = None,
        direction: Annotated[
            Optional[Direction],
            Field(
                description="Sorting direction of the results: ascending or descending. "
            ),
        ] = None,
        limit: Annotated[
            Optional[StrictInt],
            Field(description="Number of records to return (page size)."),
        ] = None,
        offset: Annotated[
            Optional[StrictInt],
            Field(
                description="Position of the starting record. Used for paging. 0 is the first record."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetTopSearchesResponse:
        """
        Get top searches.

        Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.

        :param index: Index name to target. (required)
        :type index: str
        :param click_analytics: Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search.
        :type click_analytics: bool
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param order_by: Reorder the results.
        :type order_by: OrderBy
        :param direction: Sorting direction of the results: ascending or descending.
        :type direction: Direction
        :param limit: Number of records to return (page size).
        :type limit: int
        :param offset: Position of the starting record. Used for paging. 0 is the first record.
        :type offset: int
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetTopSearchesResponse' result object.
        """

        response = await self.get_top_searches_with_http_info(
            index,
            click_analytics,
            start_date,
            end_date,
            order_by,
            direction,
            limit,
            offset,
            tags,
            request_options,
        )

        return self.__deserialize(response.raw_data, GetTopSearchesResponse)

    async def get_users_count_with_http_info(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get user count.

        Return the count of unique users.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        if index is None:
            raise ValueError("'index' is required when calling 'get_users_count'")

        _query_params: List[Tuple[str, str]] = []
        _body: Optional[bytes] = None
        _path = "/2/users/count"

        if index is not None:
            _query_params.append(("index", index))
        if start_date is not None:
            _query_params.append(("startDate", start_date))
        if end_date is not None:
            _query_params.append(("endDate", end_date))
        if tags is not None:
            _query_params.append(("tags", tags))

        _param = self._transporter.param_serialize(
            query_params=_query_params,
            body=_body,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_path,
            data=_param[0],
            request_options=_param[1],
        )

        response.data = response.raw_data

        return response

    async def get_users_count(
        self,
        index: Annotated[StrictStr, Field(description="Index name to target.")],
        start_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="Start date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        end_date: Annotated[
            Optional[Annotated[str, Field(strict=True)]],
            Field(
                description="End date (a string in the format `YYYY-MM-DD`) of the period to analyze."
            ),
        ] = None,
        tags: Annotated[
            Optional[StrictStr],
            Field(
                description="Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded."
            ),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetUsersCountResponse:
        """
        Get user count.

        Return the count of unique users.

        :param index: Index name to target. (required)
        :type index: str
        :param start_date: Start date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type start_date: str
        :param end_date: End date (a string in the format `YYYY-MM-DD`) of the period to analyze.
        :type end_date: str
        :param tags: Filter analytics on the [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded.
        :type tags: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetUsersCountResponse' result object.
        """

        response = await self.get_users_count_with_http_info(
            index, start_date, end_date, tags, request_options
        )

        return self.__deserialize(response.raw_data, GetUsersCountResponse)
