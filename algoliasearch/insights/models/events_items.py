# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""
from __future__ import annotations

import json
import pprint
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ValidationError, field_validator
from typing_extensions import Literal

from algoliasearch.insights.models.added_to_cart_object_ids import AddedToCartObjectIDs
from algoliasearch.insights.models.added_to_cart_object_ids_after_search import (
    AddedToCartObjectIDsAfterSearch,
)
from algoliasearch.insights.models.clicked_filters import ClickedFilters
from algoliasearch.insights.models.clicked_object_ids import ClickedObjectIDs
from algoliasearch.insights.models.clicked_object_ids_after_search import (
    ClickedObjectIDsAfterSearch,
)
from algoliasearch.insights.models.converted_filters import ConvertedFilters
from algoliasearch.insights.models.converted_object_ids import ConvertedObjectIDs
from algoliasearch.insights.models.converted_object_ids_after_search import (
    ConvertedObjectIDsAfterSearch,
)
from algoliasearch.insights.models.purchased_object_ids import PurchasedObjectIDs
from algoliasearch.insights.models.purchased_object_ids_after_search import (
    PurchasedObjectIDsAfterSearch,
)
from algoliasearch.insights.models.viewed_filters import ViewedFilters
from algoliasearch.insights.models.viewed_object_ids import ViewedObjectIDs

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

EVENTSITEMS_ONE_OF_SCHEMAS = [
    "AddedToCartObjectIDs",
    "AddedToCartObjectIDsAfterSearch",
    "ClickedFilters",
    "ClickedObjectIDs",
    "ClickedObjectIDsAfterSearch",
    "ConvertedFilters",
    "ConvertedObjectIDs",
    "ConvertedObjectIDsAfterSearch",
    "PurchasedObjectIDs",
    "PurchasedObjectIDsAfterSearch",
    "ViewedFilters",
    "ViewedObjectIDs",
]


class EventsItems(BaseModel):
    """
    EventsItems
    """

    # data type: ClickedObjectIDsAfterSearch
    oneof_schema_1_validator: Optional[ClickedObjectIDsAfterSearch] = None
    # data type: ConvertedObjectIDsAfterSearch
    oneof_schema_2_validator: Optional[ConvertedObjectIDsAfterSearch] = None
    # data type: ClickedObjectIDs
    oneof_schema_3_validator: Optional[ClickedObjectIDs] = None
    # data type: ConvertedObjectIDs
    oneof_schema_4_validator: Optional[ConvertedObjectIDs] = None
    # data type: ClickedFilters
    oneof_schema_5_validator: Optional[ClickedFilters] = None
    # data type: ConvertedFilters
    oneof_schema_6_validator: Optional[ConvertedFilters] = None
    # data type: ViewedObjectIDs
    oneof_schema_7_validator: Optional[ViewedObjectIDs] = None
    # data type: ViewedFilters
    oneof_schema_8_validator: Optional[ViewedFilters] = None
    # data type: AddedToCartObjectIDsAfterSearch
    oneof_schema_9_validator: Optional[AddedToCartObjectIDsAfterSearch] = None
    # data type: AddedToCartObjectIDs
    oneof_schema_10_validator: Optional[AddedToCartObjectIDs] = None
    # data type: PurchasedObjectIDs
    oneof_schema_11_validator: Optional[PurchasedObjectIDs] = None
    # data type: PurchasedObjectIDsAfterSearch
    oneof_schema_12_validator: Optional[PurchasedObjectIDsAfterSearch] = None
    actual_instance: Optional[
        Union[
            AddedToCartObjectIDs,
            AddedToCartObjectIDsAfterSearch,
            ClickedFilters,
            ClickedObjectIDs,
            ClickedObjectIDsAfterSearch,
            ConvertedFilters,
            ConvertedObjectIDs,
            ConvertedObjectIDsAfterSearch,
            PurchasedObjectIDs,
            PurchasedObjectIDsAfterSearch,
            ViewedFilters,
            ViewedObjectIDs,
        ]
    ] = None
    one_of_schemas: List[str] = Literal[
        "AddedToCartObjectIDs",
        "AddedToCartObjectIDsAfterSearch",
        "ClickedFilters",
        "ClickedObjectIDs",
        "ClickedObjectIDsAfterSearch",
        "ConvertedFilters",
        "ConvertedObjectIDs",
        "ConvertedObjectIDsAfterSearch",
        "PurchasedObjectIDs",
        "PurchasedObjectIDsAfterSearch",
        "ViewedFilters",
        "ViewedObjectIDs",
    ]

    model_config = {"validate_assignment": True}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        EventsItems.model_construct()
        error_messages = []
        match = 0
        # validate data type: ClickedObjectIDsAfterSearch
        if not isinstance(v, ClickedObjectIDsAfterSearch):
            error_messages.append(
                f"""Type '{type(v)}' is not 'ClickedObjectIDsAfterSearch'"""
            )
        else:
            match += 1
        # validate data type: ConvertedObjectIDsAfterSearch
        if not isinstance(v, ConvertedObjectIDsAfterSearch):
            error_messages.append(
                f"""Type '{type(v)}' is not 'ConvertedObjectIDsAfterSearch'"""
            )
        else:
            match += 1
        # validate data type: ClickedObjectIDs
        if not isinstance(v, ClickedObjectIDs):
            error_messages.append(f"""Type '{type(v)}' is not 'ClickedObjectIDs'""")
        else:
            match += 1
        # validate data type: ConvertedObjectIDs
        if not isinstance(v, ConvertedObjectIDs):
            error_messages.append(f"""Type '{type(v)}' is not 'ConvertedObjectIDs'""")
        else:
            match += 1
        # validate data type: ClickedFilters
        if not isinstance(v, ClickedFilters):
            error_messages.append(f"""Type '{type(v)}' is not 'ClickedFilters'""")
        else:
            match += 1
        # validate data type: ConvertedFilters
        if not isinstance(v, ConvertedFilters):
            error_messages.append(f"""Type '{type(v)}' is not 'ConvertedFilters'""")
        else:
            match += 1
        # validate data type: ViewedObjectIDs
        if not isinstance(v, ViewedObjectIDs):
            error_messages.append(f"""Type '{type(v)}' is not 'ViewedObjectIDs'""")
        else:
            match += 1
        # validate data type: ViewedFilters
        if not isinstance(v, ViewedFilters):
            error_messages.append(f"""Type '{type(v)}' is not 'ViewedFilters'""")
        else:
            match += 1
        # validate data type: AddedToCartObjectIDsAfterSearch
        if not isinstance(v, AddedToCartObjectIDsAfterSearch):
            error_messages.append(
                f"""Type '{type(v)}' is not 'AddedToCartObjectIDsAfterSearch'"""
            )
        else:
            match += 1
        # validate data type: AddedToCartObjectIDs
        if not isinstance(v, AddedToCartObjectIDs):
            error_messages.append(f"""Type '{type(v)}' is not 'AddedToCartObjectIDs'""")
        else:
            match += 1
        # validate data type: PurchasedObjectIDs
        if not isinstance(v, PurchasedObjectIDs):
            error_messages.append(f"""Type '{type(v)}' is not 'PurchasedObjectIDs'""")
        else:
            match += 1
        # validate data type: PurchasedObjectIDsAfterSearch
        if not isinstance(v, PurchasedObjectIDsAfterSearch):
            error_messages.append(
                f"""Type '{type(v)}' is not 'PurchasedObjectIDsAfterSearch'"""
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in EventsItems with oneOf schemas: AddedToCartObjectIDs, AddedToCartObjectIDsAfterSearch, ClickedFilters, ClickedObjectIDs, ClickedObjectIDsAfterSearch, ConvertedFilters, ConvertedObjectIDs, ConvertedObjectIDsAfterSearch, PurchasedObjectIDs, PurchasedObjectIDsAfterSearch, ViewedFilters, ViewedObjectIDs. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in EventsItems with oneOf schemas: AddedToCartObjectIDs, AddedToCartObjectIDsAfterSearch, ClickedFilters, ClickedObjectIDs, ClickedObjectIDsAfterSearch, ConvertedFilters, ConvertedObjectIDs, ConvertedObjectIDsAfterSearch, PurchasedObjectIDs, PurchasedObjectIDsAfterSearch, ViewedFilters, ViewedObjectIDs. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ClickedObjectIDsAfterSearch
        try:
            instance.actual_instance = ClickedObjectIDsAfterSearch.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConvertedObjectIDsAfterSearch
        try:
            instance.actual_instance = ConvertedObjectIDsAfterSearch.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ClickedObjectIDs
        try:
            instance.actual_instance = ClickedObjectIDs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConvertedObjectIDs
        try:
            instance.actual_instance = ConvertedObjectIDs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ClickedFilters
        try:
            instance.actual_instance = ClickedFilters.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConvertedFilters
        try:
            instance.actual_instance = ConvertedFilters.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ViewedObjectIDs
        try:
            instance.actual_instance = ViewedObjectIDs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ViewedFilters
        try:
            instance.actual_instance = ViewedFilters.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddedToCartObjectIDsAfterSearch
        try:
            instance.actual_instance = AddedToCartObjectIDsAfterSearch.from_json(
                json_str
            )
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AddedToCartObjectIDs
        try:
            instance.actual_instance = AddedToCartObjectIDs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PurchasedObjectIDs
        try:
            instance.actual_instance = PurchasedObjectIDs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PurchasedObjectIDsAfterSearch
        try:
            instance.actual_instance = PurchasedObjectIDsAfterSearch.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into EventsItems with oneOf schemas: AddedToCartObjectIDs, AddedToCartObjectIDsAfterSearch, ClickedFilters, ClickedObjectIDs, ClickedObjectIDsAfterSearch, ConvertedFilters, ConvertedObjectIDs, ConvertedObjectIDsAfterSearch, PurchasedObjectIDs, PurchasedObjectIDsAfterSearch, ViewedFilters, ViewedObjectIDs. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into EventsItems with oneOf schemas: AddedToCartObjectIDs, AddedToCartObjectIDsAfterSearch, ClickedFilters, ClickedObjectIDs, ClickedObjectIDsAfterSearch, ConvertedFilters, ConvertedObjectIDs, ConvertedObjectIDsAfterSearch, PurchasedObjectIDs, PurchasedObjectIDsAfterSearch, ViewedFilters, ViewedObjectIDs. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
