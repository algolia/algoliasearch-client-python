# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""
from __future__ import annotations

from re import match
from typing import Annotated, Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictStr

from algoliasearch.http import ApiResponse, RequestOptions, Transporter, Verb
from algoliasearch.query_suggestions.config import Config
from algoliasearch.query_suggestions.models import (
    BaseResponse,
    GetConfigStatus200Response,
    GetLogFile200Response,
    QuerySuggestionsConfiguration,
    QuerySuggestionsConfigurationResponse,
    QuerySuggestionsConfigurationWithIndex,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class QuerySuggestionsClient:
    PRIMITIVE_TYPES = (float, bool, bytes, str, int)
    NATIVE_TYPES_MAPPING = {
        "int": int,
        "float": float,
        "str": str,
        "bool": bool,
        "object": object,
    }

    def app_id(self) -> str:
        return self._config.app_id

    def __init__(self, transporter: Transporter, config: Config) -> None:
        self._transporter = transporter
        self._config = config

    def create_with_config(config: Config) -> Self:
        transporter = Transporter(config)

        return QuerySuggestionsClient(transporter, config)

    def create(app_id: Optional[str] = None, api_key: Optional[str] = None) -> Self:
        return QuerySuggestionsClient.create_with_config(Config(app_id, api_key))

    async def close(self) -> None:
        return await self._transporter.close()

    def __deserialize(self, data: Optional[dict], klass: any = None) -> dict:
        """Deserializes dict, list, str into an object.

        :param data: dict, list or str.
        :param klass: class literal, or string of class name.

        :return: object.
        """
        if data is None:
            return None

        if isinstance(klass, str):
            if klass.startswith("List["):
                sub_kls = match(r"List\[(.*)]", klass).group(1)
                return [self.__deserialize(sub_data, sub_kls) for sub_data in data]

            if klass.startswith("Dict["):
                sub_kls = match(r"Dict\[([^,]*), (.*)]", klass).group(2)
                return {k: self.__deserialize(v, sub_kls) for k, v in data.items()}

            if klass in self.NATIVE_TYPES_MAPPING:
                klass = self.NATIVE_TYPES_MAPPING[klass]

        if klass in self.PRIMITIVE_TYPES:
            try:
                return klass(data)
            except UnicodeEncodeError:
                return str(data)
            except TypeError:
                return data
        elif klass == object:
            return data
        else:
            return klass.from_json(data)

    async def call_del_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.DELETE,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def call_del(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.call_del_with_http_info(path, parameters, request_options)

        return self.__deserialize(response.raw_data, object)

    async def create_config_with_http_info(
        self,
        query_suggestions_configuration_with_index: QuerySuggestionsConfigurationWithIndex,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Create a configuration.

        Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application.

        :param query_suggestions_configuration_with_index: (required)
        :type query_suggestions_configuration_with_index: QuerySuggestionsConfigurationWithIndex
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if query_suggestions_configuration_with_index is not None:
            _body_params = query_suggestions_configuration_with_index

        _param = self._transporter.param_serialize(
            path="/1/configs",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.POST,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def create_config(
        self,
        query_suggestions_configuration_with_index: QuerySuggestionsConfigurationWithIndex,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> BaseResponse:
        """
        Create a configuration.

        Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application.

        :param query_suggestions_configuration_with_index: (required)
        :type query_suggestions_configuration_with_index: QuerySuggestionsConfigurationWithIndex
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'BaseResponse' result object.
        """

        response = await self.create_config_with_http_info(
            query_suggestions_configuration_with_index, request_options
        )

        return self.__deserialize(response.raw_data, BaseResponse)

    async def delete_config_with_http_info(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Delete a configuration.

        Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if index_name is not None:
            _path_params["indexName"] = index_name

        _param = self._transporter.param_serialize(
            path="/1/configs/{indexName}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.DELETE,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def delete_config(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> BaseResponse:
        """
        Delete a configuration.

        Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'BaseResponse' result object.
        """

        response = await self.delete_config_with_http_info(index_name, request_options)

        return self.__deserialize(response.raw_data, BaseResponse)

    async def get_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.get_with_http_info(path, parameters, request_options)

        return self.__deserialize(response.raw_data, object)

    async def get_all_configs_with_http_info(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> ApiResponse[str]:
        """
        List configurations.

        List all Query Suggestions configurations of your Algolia application.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        _param = self._transporter.param_serialize(
            path="/1/configs",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_all_configs(
        self, request_options: Optional[Union[dict, RequestOptions]] = None
    ) -> List[QuerySuggestionsConfigurationResponse]:
        """
        List configurations.

        List all Query Suggestions configurations of your Algolia application.

        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'List[QuerySuggestionsConfigurationResponse]' result object.
        """

        response = await self.get_all_configs_with_http_info(request_options)

        return self.__deserialize(
            response.raw_data, List[QuerySuggestionsConfigurationResponse]
        )

    async def get_config_with_http_info(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get a configuration.

        Get a single Query Suggestions configuration.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if index_name is not None:
            _path_params["indexName"] = index_name

        _param = self._transporter.param_serialize(
            path="/1/configs/{indexName}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_config(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> QuerySuggestionsConfigurationResponse:
        """
        Get a configuration.

        Get a single Query Suggestions configuration.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'QuerySuggestionsConfigurationResponse' result object.
        """

        response = await self.get_config_with_http_info(index_name, request_options)

        return self.__deserialize(
            response.raw_data, QuerySuggestionsConfigurationResponse
        )

    async def get_config_status_with_http_info(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get configuration status.

        Report the status of a Query Suggestions index.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if index_name is not None:
            _path_params["indexName"] = index_name

        _param = self._transporter.param_serialize(
            path="/1/configs/{indexName}/status",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_config_status(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetConfigStatus200Response:
        """
        Get configuration status.

        Report the status of a Query Suggestions index.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetConfigStatus200Response' result object.
        """

        response = await self.get_config_status_with_http_info(
            index_name, request_options
        )

        return self.__deserialize(response.raw_data, GetConfigStatus200Response)

    async def get_log_file_with_http_info(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Get logs.

        Get the logs for a single Query Suggestions index.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if index_name is not None:
            _path_params["indexName"] = index_name

        _param = self._transporter.param_serialize(
            path="/1/logs/{indexName}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.GET,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def get_log_file(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> GetLogFile200Response:
        """
        Get logs.

        Get the logs for a single Query Suggestions index.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'GetLogFile200Response' result object.
        """

        response = await self.get_log_file_with_http_info(index_name, request_options)

        return self.__deserialize(response.raw_data, GetLogFile200Response)

    async def post_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body_params = body

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.POST,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def post(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.post_with_http_info(
            path, parameters, body, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def put_with_http_info(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if path is not None:
            _path_params["path"] = path

        if parameters is not None:
            _query_params.append(("parameters", parameters))

        if body is not None:
            _body_params = body

        _param = self._transporter.param_serialize(
            path="/1{path}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.PUT,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def put(
        self,
        path: Annotated[
            StrictStr,
            Field(
                description='Path of the endpoint, anything after "/1" must be specified.'
            ),
        ],
        parameters: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Query parameters to apply to the current query."),
        ] = None,
        body: Annotated[
            Optional[Dict[str, Any]],
            Field(description="Parameters to send with the custom request."),
        ] = None,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> object:
        """
        Send requests to the Algolia REST API.

        This method allow you to send requests to the Algolia REST API.

        :param path: Path of the endpoint, anything after \"/1\" must be specified. (required)
        :type path: str
        :param parameters: Query parameters to apply to the current query.
        :type parameters: Dict[str, object]
        :param body: Parameters to send with the custom request.
        :type body: object
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'object' result object.
        """

        response = await self.put_with_http_info(
            path, parameters, body, request_options
        )

        return self.__deserialize(response.raw_data, object)

    async def update_config_with_http_info(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        query_suggestions_configuration: QuerySuggestionsConfiguration,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> ApiResponse[str]:
        """
        Update a configuration.

        Update a QuerySuggestions configuration.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param query_suggestions_configuration: (required)
        :type query_suggestions_configuration: QuerySuggestionsConfiguration
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _body_params: Optional[bytes] = None

        if index_name is not None:
            _path_params["indexName"] = index_name

        if query_suggestions_configuration is not None:
            _body_params = query_suggestions_configuration

        _param = self._transporter.param_serialize(
            path="/1/configs/{indexName}",
            path_params=_path_params,
            query_params=_query_params,
            body=_body_params,
            request_options=request_options,
        )

        response = await self._transporter.request(
            verb=Verb.PUT,
            path=_param[0],
            data=_param[1],
            request_options=_param[2],
            use_read_transporter=True,
        )

        response.data = response.raw_data

        return response

    async def update_config(
        self,
        index_name: Annotated[
            StrictStr, Field(description="Query Suggestions index name.")
        ],
        query_suggestions_configuration: QuerySuggestionsConfiguration,
        request_options: Optional[Union[dict, RequestOptions]] = None,
    ) -> BaseResponse:
        """
        Update a configuration.

        Update a QuerySuggestions configuration.

        :param index_name: Query Suggestions index name. (required)
        :type index_name: str
        :param query_suggestions_configuration: (required)
        :type query_suggestions_configuration: QuerySuggestionsConfiguration
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the deserialized response in a 'BaseResponse' result object.
        """

        response = await self.update_config_with_http_info(
            index_name, query_suggestions_configuration, request_options
        )

        return self.__deserialize(response.raw_data, BaseResponse)
