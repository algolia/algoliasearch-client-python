# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


from algoliasearch.ingestion.models.big_query_data_type import BigQueryDataType


class SourceBigQuery(BaseModel):
    """
    SourceBigQuery
    """

    project_id: str = Field(alias="projectID")
    """ Project ID of the BigQuery source. """
    dataset_id: str = Field(alias="datasetID")
    """ Dataset ID of the BigQuery source. """
    data_type: Optional[BigQueryDataType] = Field(default=None, alias="dataType")
    table: Optional[str] = Field(default=None, alias="table")
    """ Table name for the BigQuery export. """
    table_prefix: Optional[str] = Field(default=None, alias="tablePrefix")
    """ Table prefix for a Google Analytics 4 data export to BigQuery. """
    custom_sql_request: Optional[str] = Field(default=None, alias="customSQLRequest")
    """ Custom SQL request to extract data from the BigQuery table. """
    unique_id_column: Optional[str] = Field(default=None, alias="uniqueIDColumn")
    """ Name of a column that contains a unique ID which will be used as `objectID` in Algolia. """

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceBigQuery from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceBigQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj["dataType"] = obj.get("dataType")

        return cls.model_validate(obj)
