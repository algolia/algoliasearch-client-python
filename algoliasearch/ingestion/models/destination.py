# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


from algoliasearch.ingestion.models.destination_input import DestinationInput
from algoliasearch.ingestion.models.destination_type import DestinationType


class Destination(BaseModel):
    """
    Destinations are Algolia resources like indices or event streams.
    """

    destination_id: str = Field(alias="destinationID")
    """ Universally unique identifier (UUID) of a destination resource. """
    type: DestinationType = Field(alias="type")
    name: str = Field(alias="name")
    """ Descriptive name for the resource. """
    input: DestinationInput = Field(alias="input")
    created_at: str = Field(alias="createdAt")
    """ Date of creation in RFC 3339 format. """
    updated_at: Optional[str] = Field(default=None, alias="updatedAt")
    """ Date of last update in RFC 3339 format. """
    authentication_id: Optional[str] = Field(default=None, alias="authenticationID")
    """ Universally unique identifier (UUID) of an authentication resource. """
    transformation_ids: Optional[List[str]] = Field(
        default=None, alias="transformationIDs"
    )

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Destination from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Destination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj["type"] = obj.get("type")
        obj["input"] = (
            DestinationInput.from_dict(obj["input"])
            if obj.get("input") is not None
            else None
        )

        return cls.model_validate(obj)
