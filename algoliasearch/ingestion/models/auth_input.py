# coding: utf-8

"""
    Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

import json
import pprint
from typing import Dict, List, Optional, Union

from ingestion.models.auth_algolia import AuthAlgolia
from ingestion.models.auth_api_key import AuthAPIKey
from ingestion.models.auth_basic import AuthBasic
from ingestion.models.auth_google_service_account import AuthGoogleServiceAccount
from ingestion.models.auth_o_auth import AuthOAuth
from pydantic import BaseModel, ValidationError, field_validator
from typing_extensions import Literal

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

AUTHINPUT_ONE_OF_SCHEMAS = [
    "AuthAPIKey",
    "AuthAlgolia",
    "AuthBasic",
    "AuthGoogleServiceAccount",
    "AuthOAuth",
]


class AuthInput(BaseModel):
    """
    AuthInput
    """

    # data type: AuthGoogleServiceAccount
    oneof_schema_1_validator: Optional[AuthGoogleServiceAccount] = None
    # data type: AuthBasic
    oneof_schema_2_validator: Optional[AuthBasic] = None
    # data type: AuthAPIKey
    oneof_schema_3_validator: Optional[AuthAPIKey] = None
    # data type: AuthOAuth
    oneof_schema_4_validator: Optional[AuthOAuth] = None
    # data type: AuthAlgolia
    oneof_schema_5_validator: Optional[AuthAlgolia] = None
    actual_instance: Optional[
        Union[AuthAPIKey, AuthAlgolia, AuthBasic, AuthGoogleServiceAccount, AuthOAuth]
    ] = None
    one_of_schemas: List[str] = Literal[
        "AuthAPIKey",
        "AuthAlgolia",
        "AuthBasic",
        "AuthGoogleServiceAccount",
        "AuthOAuth",
    ]

    model_config = {"validate_assignment": True}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        AuthInput.model_construct()
        error_messages = []
        match = 0
        # validate data type: AuthGoogleServiceAccount
        if not isinstance(v, AuthGoogleServiceAccount):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AuthGoogleServiceAccount`"
            )  # noqa: E501
        else:
            match += 1
        # validate data type: AuthBasic
        if not isinstance(v, AuthBasic):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AuthBasic`"
            )  # noqa: E501
        else:
            match += 1
        # validate data type: AuthAPIKey
        if not isinstance(v, AuthAPIKey):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AuthAPIKey`"
            )  # noqa: E501
        else:
            match += 1
        # validate data type: AuthOAuth
        if not isinstance(v, AuthOAuth):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AuthOAuth`"
            )  # noqa: E501
        else:
            match += 1
        # validate data type: AuthAlgolia
        if not isinstance(v, AuthAlgolia):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `AuthAlgolia`"
            )  # noqa: E501
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in AuthInput with oneOf schemas: AuthAPIKey, AuthAlgolia, AuthBasic, AuthGoogleServiceAccount, AuthOAuth. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in AuthInput with oneOf schemas: AuthAPIKey, AuthAlgolia, AuthBasic, AuthGoogleServiceAccount, AuthOAuth. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AuthGoogleServiceAccount
        try:
            instance.actual_instance = AuthGoogleServiceAccount.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthBasic
        try:
            instance.actual_instance = AuthBasic.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthAPIKey
        try:
            instance.actual_instance = AuthAPIKey.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthOAuth
        try:
            instance.actual_instance = AuthOAuth.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthAlgolia
        try:
            instance.actual_instance = AuthAlgolia.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into AuthInput with oneOf schemas: AuthAPIKey, AuthAlgolia, AuthBasic, AuthGoogleServiceAccount, AuthOAuth. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into AuthInput with oneOf schemas: AuthAPIKey, AuthAlgolia, AuthBasic, AuthGoogleServiceAccount, AuthOAuth. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
