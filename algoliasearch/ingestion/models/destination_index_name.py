# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""
from __future__ import annotations

from json import loads
from typing import Any, Dict, List, Optional, Self

from pydantic import BaseModel, Field, StrictStr

from algoliasearch.ingestion.models.record_type import RecordType


class DestinationIndexName(BaseModel):
    """
    DestinationIndexName
    """

    index_name: StrictStr = Field(
        description="The index name to store data in.", alias="indexName"
    )
    record_type: Optional[RecordType] = Field(default=None, alias="recordType")
    attributes_to_exclude: Optional[List[StrictStr]] = Field(
        default=None,
        description='Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (`.`):   - "foo.bar": will remove `bar` from `foo`. To remove elements from an array, you can use the following:   - "foo.[0].bar": will only remove `bar` from the first element of `foo`.   - "foo.[*].bar": will remove `bar` from every elements of `foo`. ',
        alias="attributesToExclude",
    )

    model_config = {"populate_by_name": True, "validate_assignment": True}

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DestinationIndexName from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DestinationIndexName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "indexName": obj.get("indexName"),
                "recordType": obj.get("recordType"),
                "attributesToExclude": obj.get("attributesToExclude"),
            }
        )
        return _obj
