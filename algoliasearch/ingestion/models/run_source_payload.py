# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


from algoliasearch.ingestion.models.entity_type import EntityType


class RunSourcePayload(BaseModel):
    """
    RunSourcePayload
    """

    index_to_include: Optional[List[str]] = Field(default=None, alias="indexToInclude")
    """ List of index names to include in reidexing/update. """
    index_to_exclude: Optional[List[str]] = Field(default=None, alias="indexToExclude")
    """ List of index names to exclude in reidexing/update. """
    entity_ids: Optional[List[str]] = Field(default=None, alias="entityIDs")
    """ List of entityID to update. """
    entity_type: Optional[EntityType] = Field(default=None, alias="entityType")

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunSourcePayload from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunSourcePayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj["entityType"] = obj.get("entityType")

        return cls.model_validate(obj)
