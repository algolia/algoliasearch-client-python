# coding: utf-8

"""
Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
"""

from __future__ import annotations

from json import loads
from sys import version_info
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict

if version_info >= (3, 11):
    from typing import Self
else:
    from typing_extensions import Self


from algoliasearch.ingestion.models.mapping_field_directive import MappingFieldDirective

_ALIASES = {
    "id": "id",
    "enabled": "enabled",
    "trigger": "trigger",
    "field_directives": "fieldDirectives",
}


def _alias_generator(name: str) -> str:
    return _ALIASES.get(name, name)


class MappingKitAction(BaseModel):
    """
    Describes how a destination object should be resolved by means of applying a set of directives.
    """

    id: Optional[str] = None
    """ ID to uniquely identify this action. """
    enabled: bool
    """ Whether this action has any effect. """
    trigger: str
    """ Condition which must be satisfied to apply the action. If this evaluates to false, the action is not applied, and the process attempts to apply the next action, if any. """
    field_directives: List[MappingFieldDirective]

    model_config = ConfigDict(
        use_enum_values=True,
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        alias_generator=_alias_generator,
    )

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MappingKitAction from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias."""
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MappingKitAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj["fieldDirectives"] = (
            [MappingFieldDirective.from_dict(_item) for _item in obj["fieldDirectives"]]
            if obj.get("fieldDirectives") is not None
            else None
        )

        return cls.model_validate(obj)
