// {{{generationBanner}}}
package {{packageName}}

{{#operations}}
import (
	"bytes"
	"context"
  "encoding/json"
	"io"
	"net/http"
	"net/url"
  {{#isSearchClient}}
  "slices"
  {{/isSearchClient}}
  "strings"
  {{#isSearchClient}}
  "time"
  {{/isSearchClient}}

  "github.com/algolia/algoliasearch-client-go/v4/algolia/call"
  {{#isSearchClient}}
  "github.com/algolia/algoliasearch-client-go/v4/algolia/internal/errs"
  {{/isSearchClient}}
)

type Option struct {
	optionType  string
	name  string
	value string
}

func QueryParamOption(name string, val any) Option {
	return Option{
    optionType:  "query",
		name:  name,
		value: parameterToString(val),
	}
}

func HeaderParamOption(name string, val any) Option {
	return Option{
    optionType:  "header",
		name:  name,
		value: parameterToString(val),
	}
}

{{#operation}}
  {{#hasParams}}
func (r *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return err
	}
  {{#allParams}}
	if v, ok := req["{{#isQueryParam}}{{baseName}}{{/isQueryParam}}{{^isQueryParam}}{{paramName}}{{/isQueryParam}}"]; ok {
		err = json.Unmarshal(v, &r.{{paramName}})
		if err != nil {
      err = json.Unmarshal(b, &r.{{paramName}})
      if err != nil {
			  return err
      }
		}
	} {{#isBodyParam}}{{#required}}else {
    err = json.Unmarshal(b, &r.{{paramName}})
    if err != nil {
      return err
    }
  }{{/required}}{{/isBodyParam}}
  {{/allParams}}

  return nil
}

// {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request represents the request with all the parameters for the API call.
type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request struct {
{{#allParams}}
	{{paramName}} {{^isPathParam}}{{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}{{/isPathParam}}{{{dataType}}}
{{/allParams}}
}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
//New{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request creates an instance of the {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request to be used for the API call.
func (c *APIClient) NewApi{{{nickname}}}Request({{#requiredParams}} {{paramName}} {{^isPathParam}}{{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}{{/isPathParam}}{{{dataType}}} {{^-last}},{{/-last}}{{/requiredParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request{
		{{#requiredParams}}
		{{paramName}}: {{paramName}},
		{{/requiredParams}}
	}
}

{{#allParams}}
{{^required}}
// With{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}} adds the {{paramName}} to the {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request and returns the request for chaining.
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) With{{#lambda.titlecase}}{{paramName}}{{/lambda.titlecase}}({{paramName}} {{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}{{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	r.{{paramName}} = {{paramName}}
	return r
}

{{/required}}
{{/allParams}}
{{/hasParams}}
/*
{{operationId}} {{{summary}}} Wraps {{nickname}}WithContext using context.Background.{{^summary}}Method for {{operationId}}{{/summary}}
{{#notes}}

{{{unescapedNotes}}}
{{/notes}}

Request can be constructed by NewApi{{operationId}}Request with parameters below.
 {{#allParams}}
 @param {{paramName}} {{dataType}}{{#description}} - {{{.}}}{{/description}}
 {{/allParams}}
 {{#returnType}}@return {{{.}}}{{/returnType}}
{{#isDeprecated}}

Deprecated
{{/isDeprecated}}
*/
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (c *APIClient) {{nickname}}({{#hasParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request,{{/hasParams}} opts ...Option) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}error) {
  return c.{{nickname}}WithContext(context.Background(), {{#hasParams}}r,{{/hasParams}} opts...)
}

/*
{{operationId}} {{{summary}}}{{^summary}}Method for {{operationId}}{{/summary}}
{{#notes}}

{{{unescapedNotes}}}
{{/notes}}

Request can be constructed by NewApi{{operationId}}Request with parameters below.
 {{#allParams}}
 @param {{paramName}} {{dataType}}{{#description}} - {{{.}}}{{/description}}
 {{/allParams}}
 {{#returnType}}@return {{{.}}}{{/returnType}}
{{#isDeprecated}}

Deprecated
{{/isDeprecated}}
*/
func (c *APIClient) {{nickname}}WithContext(ctx context.Context, {{#hasParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request,{{/hasParams}} opts ...Option) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}error) {
	var (
    postBody     any
		{{#returnType}}
		returnValue  {{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}
		{{/returnType}}
	)

  requestPath := "{{{path}}}"{{#pathParams}}
  requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", url.PathEscape(parameterToString(r.{{paramName}})), -1){{/pathParams}}

	headers := make(map[string]string)
	queryParams := url.Values{}
	{{#allParams}}
	{{#required}}
	{{^isPathParam}}
  {{^isPrimitiveType}}
	if r.{{paramName}} == nil {
	  return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} is required and must be specified")
	}
  {{/isPrimitiveType}}
  {{#isString}}
	if r.{{paramName}} == "" {
	  return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} is required and must be specified")
	}
  {{/isString}}
	{{/isPathParam}}
	{{#minItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minItems}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxItems}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minLength}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxLength}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}r.{{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{^isPathParam}}*{{/isPathParam}}r.{{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

  {{#vendorExtensions.x-is-custom-request}}
    {{#queryParams}}
      {{^required}}if !isNilorEmpty(r.{{paramName}}) { {{/required}}
          for k, v := range r.{{paramName}} {
           queryParams.Set(k, parameterToString(v))
          }
      {{^required}} } {{/required}}
    {{/queryParams}}
  {{/vendorExtensions.x-is-custom-request}}
  {{^vendorExtensions.x-is-custom-request}}
	{{#queryParams}}
	{{#required}}
	queryParams.Set("{{baseName}}", parameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}}))
	{{/required}}
  {{^required}}
  if !isNilorEmpty(r.{{paramName}}) {
    queryParams.Set("{{baseName}}", parameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}}))
  }
  {{/required}}
	{{/queryParams}}
  {{/vendorExtensions.x-is-custom-request}}
  {{#headerParams}}
	{{#required}}
	headers["{{baseName}}"] = parameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}})
	{{/required}}
  {{^required}}
  if !isNilorEmpty(r.{{paramName}}) {
    headers["{{baseName}}"] = parameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}*{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}})
  }
  {{/required}}
{{/headerParams}}

  // optional params if any
  for _, opt := range opts {
    switch opt.optionType {
      case "query":
        queryParams.Set(opt.name, opt.value)
      case "header":
        headers[opt.name] = opt.value
    }
  }

{{#bodyParams}}
  // body params{{^required}}
  if isNilorEmpty(r.{{paramName}}) {
    postBody = "{}"
  } else { {{/required}}
    postBody = r.{{paramName}}{{^required}}
   } {{/required}}
{{/bodyParams}}
	req, err := c.prepareRequest(ctx, requestPath, http.Method{{httpMethod}}, postBody, headers, queryParams)
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}

	res, err := c.callAPI(req, {{#vendorExtensions}}{{#x-use-read-transporter}}call.Read{{/x-use-read-transporter}}{{^x-use-read-transporter}}call.Write{{/x-use-read-transporter}}{{/vendorExtensions}})
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}
  if res == nil {
    return {{#returnType}}returnValue, {{/returnType}}reportError("res is nil")
  }

	resBody, err := io.ReadAll(res.Body)
	res.Body.Close()
	res.Body = io.NopCloser(bytes.NewBuffer(resBody))
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}

	if res.StatusCode >= 300 {
		newErr := &APIError{
      Message: string(resBody),
			Status: res.StatusCode,
		}
		{{#responses}}
		{{#dataType}}
		{{^is1xx}}
		{{^is2xx}}
		{{#range}}
		{{#is3xx}}
		if res.StatusCode >= 300 && res.StatusCode < 400 {
		{{/is3xx}}
		{{#is4xx}}
		if res.StatusCode >= 400 && res.StatusCode < 500 {
		{{/is4xx}}
		{{#is5xx}}
		if res.StatusCode >= 500
		{{/is5xx}}
		{{/range}}
		{{^range}}
		{{^wildcard}}
		if res.StatusCode == {{{code}}} {
		{{/wildcard}}
		{{/range}}
			var v {{{dataType}}}
			err = c.decode(&v, resBody, res.Header.Get("Content-Type"))
			if err != nil {
				newErr.Message = err.Error()
				return {{#returnType}}returnValue, {{/returnType}}newErr
			}
			{{^-last}}
			return {{#returnType}}returnValue, {{/returnType}}newErr
			{{/-last}}
		{{^wildcard}}
		}
		{{/wildcard}}
		{{/is2xx}}
		{{/is1xx}}
		{{/dataType}}
		{{/responses}}
		return {{#returnType}}returnValue, {{/returnType}}newErr
	}

	{{#returnType}}
	err = c.decode(&returnValue, resBody, res.Header.Get("Content-Type"))
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}reportError("cannot decode result: %w", err)
	}

	{{/returnType}}
	return {{#returnType}}returnValue, {{/returnType}}nil
}

{{/operation}}
{{/operations}}

{{#isSearchClient}}
/*
WaitForTask waits for a task to be published.
Wraps WaitForTaskWithContext with context.Background().
It returns the task response if the operation was successful.
It returns an error if the operation failed.

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

  @param indexName string - Index name.
  @param taskID int64 - Task ID.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetTaskResponse - Task response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForTask(
  indexName string,
  taskID int64,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetTaskResponse, error) {
  return c.WaitForTaskWithContext(
    context.Background(),
    indexName,
    taskID,
    maxRetries,
    initialDelay,
    maxDelay,
    opts...,
  )
}

/*
WaitForTaskWithContext waits for a task to be published.
It returns the task response if the operation was successful.
It returns an error if the operation failed.

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

  @param ctx context.Context - The context that will be drilled down to the actual request.
  @param indexName string - Index name.
  @param taskID int64 - Task ID.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetTaskResponse - Task response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForTaskWithContext(
  ctx context.Context,
  indexName string,
  taskID int64,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetTaskResponse, error) {
  return RetryUntil(
    func() (*GetTaskResponse, error) {
      return c.GetTaskWithContext(ctx, c.NewApiGetTaskRequest(indexName, taskID), opts...)
    },
    func(response *GetTaskResponse, err error) bool {
      return response.Status == TASKSTATUS_PUBLISHED
    },
    maxRetries,
    initialDelay,
    maxDelay,
  )
}

/*
WaitForApiKey waits for an API key to be created, deleted or updated.
Wraps WaitForApiKeyWithContext with context.Background().
It returns the API key response if the operation was successful.
It returns an error if the operation failed.

The operation can be one of the following:
  - "add": wait for the API key to be created
  - "delete": wait for the API key to be deleted
  - "update": wait for the API key to be updated

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

If the operation is "update", the apiKey parameter must be set.
If the operation is "delete" or "add", the apiKey parameter is not used.

  @param key string - API key.
  @param apiKey *ApiKey - API key structure - required for update operation.
  @param operation string - Operation type - add, delete or update.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetApiKeyResponse - API key response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForApiKey(
  key string,
  apiKey *ApiKey,
  operation string,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetApiKeyResponse, error) {
  return c.WaitForApiKeyWithContext(
    context.Background(),
    key,
    apiKey,
    operation,
    maxRetries,
    initialDelay,
    maxDelay,
    opts...,
  )
}

/*
WaitForApiKeyWithContext waits for an API key to be created, deleted or updated.
It returns the API key response if the operation was successful.
It returns an error if the operation failed.

The operation can be one of the following:
  - "add": wait for the API key to be created
  - "delete": wait for the API key to be deleted
  - "update": wait for the API key to be updated

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

If the operation is "update", the apiKey parameter must be set.
If the operation is "delete" or "add", the apiKey parameter is not used.

  @param ctx context.Context - The context that will be drilled down to the actual request.
  @param key string - API key.
  @param apiKey *ApiKey - API key structure - required for update operation.
  @param operation string - Operation type - add, delete or update.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetApiKeyResponse - API key response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForApiKeyWithContext(
  ctx context.Context,
  key string,
  apiKey *ApiKey,
  operation string,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetApiKeyResponse, error) {
  if operation != "add" && operation != "delete" && operation != "update" {
    return nil, &errs.WaitKeyOperationError{}
  }

  if operation == "update" {
    if apiKey == nil {
      return nil, &errs.WaitKeyUpdateError{}
    }

    return RetryUntil(
      func() (*GetApiKeyResponse, error) {
        return c.GetApiKeyWithContext(ctx, c.NewApiGetApiKeyRequest(key), opts...)
      },
      func(response *GetApiKeyResponse, err error) bool {
        if err != nil || response == nil {
          return false
        }

        if apiKey.GetDescription() != response.GetDescription() {
          return false
        }

        if apiKey.GetQueryParameters() != response.GetQueryParameters() {
          return false
        }

        if apiKey.GetMaxHitsPerQuery() != response.GetMaxHitsPerQuery() {
          return false
        }

        if apiKey.GetMaxQueriesPerIPPerHour() != response.GetMaxQueriesPerIPPerHour() {
          return false
        }

        if apiKey.GetValidity() != response.GetValidity() {
          return false
        }

        if apiKey.GetValidity() != response.GetValidity() {
          return false
        }

        slices.Sort(apiKey.Acl)
        slices.Sort(response.Acl)

        if slices.Equal(apiKey.Acl, response.Acl) == false {
          return false
        }

        slices.Sort(apiKey.Indexes)
        slices.Sort(response.Indexes)

        if slices.Equal(apiKey.Indexes, response.Indexes) == false {
          return false
        }

        slices.Sort(apiKey.Referers)
        slices.Sort(response.Referers)

        if slices.Equal(apiKey.Referers, response.Referers) == false {
          return false
        }

        return true
      },
      maxRetries,
      initialDelay,
      maxDelay,
    )
  }

  return RetryUntil(
    func() (*GetApiKeyResponse, error) {
      return c.GetApiKeyWithContext(ctx, c.NewApiGetApiKeyRequest(key), opts...)
    },
    func(response *GetApiKeyResponse, err error) bool {
      switch operation {
      case "add":
        return err == nil && response != nil && response.CreatedAt > 0
      case "delete":
        if _, ok := err.(*APIError); ok {
          apiErr := err.(*APIError)

          return apiErr.Status == 404
        }

        return false
      }
      return false
    },
    maxRetries,
    initialDelay,
    maxDelay,
  )
}

{{/isSearchClient}}
