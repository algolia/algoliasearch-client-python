// {{classname}} - {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#oneOf}}
	{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} *{{{.}}}
	{{/oneOf}}
}

{{#oneOf}}
// {{{.}}}As{{classname}} is a convenience function that returns {{{.}}} wrapped in {{classname}}
func {{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}As{{classname}}(v *{{{.}}}) {{classname}} {
	return {{classname}}{
		{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}: v,
	}
}

{{/oneOf}}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error
	{{#isNullable}}
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	{{/isNullable}}
  {{#vendorExtensions.x-one-of-list}}
    {{#-first}}
    {{#discriminators}}
      {{#-first}}
        // use discriminator value to speed up the lookup
        var jsonDict map[string]any
        err = newStrictDecoder(data).Decode(&jsonDict)
        if err != nil {
          return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup ({{name}}).")
        }

        // Hold the schema validity between checks
        validSchemaForModel := true
      {{/-first}}

    {{/discriminators}}
    {{/-first}}
	{{#discriminators}}
  // If the model wasn't discriminated yet, continue checking for other discriminating properties
  if validSchemaForModel {
    // Check if the model holds a property '{{field}}'
    if _, ok := jsonDict["{{field}}"]; !ok {
      validSchemaForModel = false
    }
  }

  {{#-last}}
    if validSchemaForModel {
      // try to unmarshal data into {{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}
      err = newStrictDecoder(data).Decode(&dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}})
      if err == nil && validateStruct(dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}) == nil {
        json{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}, _ := json.Marshal(dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}})
        if string(json{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}) == "{}" { // empty struct
          dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}} = nil
        } else {
          return nil
        }
      } else {
        dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}} = nil
      }
    }
  {{/-last}}
	{{/discriminators}}
  {{^-last}}
    {{#discriminators}}

      {{#-first}}
    // Reset the schema validity for the next class check
    validSchemaForModel = true
      {{/-first}}
    {{/discriminators}}
  {{/-last}}
    {{^discriminators}}
      // try to unmarshal data into {{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}
      err = newStrictDecoder(data).Decode(&dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}})
      if err == nil && validateStruct(dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}) == nil {
        json{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}, _ := json.Marshal(dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}})
        if string(json{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}}) == "{}" { // empty struct
          dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}} = nil
        } else {
          return nil
        }
      } else {
        dst.{{#lambda.type-to-name}}{{{name}}}{{/lambda.type-to-name}} = nil
      }

    {{/discriminators}}
    {{#-last}}
      return fmt.Errorf("Data failed to match schemas in oneOf({{classname}})")
    {{/-last}}
  {{/vendorExtensions.x-one-of-list}}
	{{#useOneOfDiscriminatorLookup}}

	{{#discriminator}}
	{{#mappedModels}}
	{{#-first}}
	// use discriminator value to speed up the lookup
	var jsonDict map[string]any
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	{{/-first}}

  // check if the discriminator value is '{{{mappingName}}}'
  if jsonDict["{{{propertyBaseName}}}"] == "{{{mappingName}}}" {
    // try to unmarshal JSON data into {{{modelName}}}
    err = json.Unmarshal(data, &dst.{{{modelName}}})
    if err == nil {
    return nil // data stored in dst.{{{modelName}}}, return on the first match
    } else {
    dst.{{{modelName}}} = nil
    return fmt.Errorf("Failed to unmarshal {{classname}} as {{{modelName}}}: %s", err.Error())
    }
  }


	{{/mappedModels}}
	return nil
	{{/discriminator}}
	{{^discriminator}}
        {{#oneOf}}
        // try to unmarshal data into {{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}
        err = newStrictDecoder(data).Decode(&dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
        if err == nil && validateStruct(dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}) == nil {
          json{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}, _ := json.Marshal(dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
          if string(json{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}) == "{}" { // empty struct
            dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} = nil
          } else {
            return nil
          }
        } else {
          dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} = nil
        }

        {{/oneOf}}
        return fmt.Errorf("Data failed to match schemas in oneOf({{classname}})")
	{{/discriminator}}
	{{/useOneOfDiscriminatorLookup}}
	{{^useOneOfDiscriminatorLookup}}
	{{^vendorExtensions.x-one-of-list}}
	{{#oneOf}}
	// try to unmarshal data into {{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}
	err = newStrictDecoder(data).Decode(&dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
	if err == nil && validateStruct(dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}) == nil {
		json{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}, _ := json.Marshal(dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
		if string(json{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}) == "{}" { // empty struct
			dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} = nil
		} else {
			return nil
		}
	} else {
		dst.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} = nil
	}

	{{/oneOf}}
  return fmt.Errorf("Data failed to match schemas in oneOf({{classname}})")
	{{/vendorExtensions.x-one-of-list}}
	{{/useOneOfDiscriminatorLookup}}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src {{classname}}) MarshalJSON() ([]byte, error) {
{{#oneOf}}
	if src.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} != nil {
		return json.Marshal(&src.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
	}

{{/oneOf}}
	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *{{classname}}) GetActualInstance() (any) {
	if obj == nil {
		return nil
	}
{{#oneOf}}
	if obj.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} != nil {
		return obj.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}
	}

{{/oneOf}}
	// all schemas are nil
	return nil
}

{{>nullable_model}}
