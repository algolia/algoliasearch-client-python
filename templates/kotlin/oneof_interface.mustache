import {{packageName}}.exception.AlgoliaClientException
import {{packageName}}.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}
 * 
 * Implementations:
 {{#vendorExtensions}}
 {{#x-one-of-list}}
 * - [{{{type}}}]{{^child}} - *[{{classname}}.of{{#x-one-of-explicit-name}}{{name}}{{/x-one-of-explicit-name}}]*{{/child}}
 {{/x-one-of-list}}
{{/vendorExtensions}}
 */
{{#isDeprecated}}
@Deprecated(message = "This schema is deprecated.")
{{/isDeprecated}}
{{#additionalModelTypeAnnotations}}
{{{.}}}
{{/additionalModelTypeAnnotations}}
@Serializable({{classname}}Serializer::class)
public sealed interface {{classname}} {
    {{#vendorExtensions}}
    {{#x-one-of-list}}
    {{^child}}

    @JvmInline
    public value class {{name}}Value(public val value: {{{type}}}): {{classname}}
    {{/child}}    
    {{/x-one-of-list}}

    public companion object {
    {{#x-one-of-list}}
    {{^child}}

    /** [{{classname}}] as [{{{type}}}] Value. */
    public fun of{{#x-one-of-explicit-name}}{{name}}{{/x-one-of-explicit-name}}(value: {{{type}}}): {{classname}} {
        return {{name}}Value(value);
    }
    {{/child}}    
    {{/x-one-of-list}}
    {{/vendorExtensions}}
    }
}

internal class {{classname}}Serializer : KSerializer<{{classname}}> {

    override val descriptor: SerialDescriptor = buildClassSerialDescriptor("{{classname}}")

    override fun serialize(encoder: Encoder, value: {{classname}}) {
        when(value) {
        {{#vendorExtensions}}
        {{#x-one-of-list}}
        {{#child}}
          is {{{type}}} -> {{{type}}}.serializer().serialize(encoder, value)
        {{/child}}
        {{^child}}
          is {{classname}}.{{name}}Value -> {{#isList}}ListSerializer({{{listElementType}}}.serializer()){{/isList}}{{^isList}}{{{type}}}.serializer(){{/isList}}.serialize(encoder, value.value)
        {{/child}}  
        {{/x-one-of-list}}
        {{/vendorExtensions}}
        }
    }

    override fun deserialize(decoder: Decoder): {{classname}} {
        val codec = decoder.asJsonDecoder()
        val tree = codec.decodeJsonElement()
        {{#vendorExtensions.x-one-of-list}}

        // deserialize {{{type}}}
        if (tree is {{#isObject}}JsonObject{{/isObject}}{{#isList}}JsonArray{{/isList}}{{^isObject}}{{^isList}}JsonPrimitive{{/isList}}{{/isObject}}{{#discriminators}} && tree.containsKey("{{field}}"){{/discriminators}}) {
            try {   
                {{#isObject}}
                return codec.json.decodeFromJsonElement({{{type}}}.serializer(), tree)
                {{/isObject}}
                {{#isList}}
                val value = codec.json.decodeFromJsonElement(ListSerializer({{{listElementType}}}.serializer()), tree)
                return {{{classname}}}.of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}(value)
                {{/isList}}
                {{^isObject}}{{^isList}}
                val value = codec.json.decodeFromJsonElement({{{type}}}.serializer(), tree)
                return {{{classname}}}.of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}(value)
                {{/isList}}{{/isObject}}
            } catch (e: Exception) {
                // deserialization failed, continue
                println("Failed to deserialize {{{type}}} (error: ${e.message})")
            }    
        }
        {{/vendorExtensions.x-one-of-list}}

        throw AlgoliaClientException("Failed to deserialize json element: $tree")
    }
}
