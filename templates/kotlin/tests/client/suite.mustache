package com.algolia.client;

import com.algolia.client.api.{{client}}
import com.algolia.client.model.{{import}}.*
import com.algolia.client.configuration.*
import com.algolia.client.transport.*
import com.algolia.utils.*
import io.ktor.http.*
import kotlinx.coroutines.test.*
import kotlinx.serialization.json.*
import kotlin.test.*

class {{clientPrefix}}Test {

    {{#blocksClient}}
    {{#tests}}
    @Test
    fun `{{#lambda.replaceBacktick}}{{{testName}}}{{/lambda.replaceBacktick}}`() = runTest {
        {{#autoCreateClient}}
        val client = {{client}}(appId = "appId", apiKey = "apiKey",{{#hasRegionalHost}}region = "{{defaultRegion}}",{{/hasRegionalHost}})
        {{/autoCreateClient}}
        {{#steps}}
        {{#isError}}
        assertFails { 
            {{> client/step}}
        }.let { error ->  assertError(error, "{{{expectedError}}}") }
        {{/isError}}
        {{^isError}}
        {{#isCreateClient}}
        {{> client/createClient}}
        {{/isCreateClient}}
        {{#isMethod}}
        client.runTest(
             call = {
                {{path}}(
                    {{#parametersWithDataType}}
                    {{> request_param}}
                    {{/parametersWithDataType}}
                )
             },
             intercept = {
                {{#match}}
                {{#testUserAgent}}
                    val regexp = "{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}".toRegex()
                    val header = it.headers["User-Agent"].orEmpty()
                    assertTrue(actual = header.matches(regexp), message = "Expected $header to match the following regex: $regexp")
                {{/testUserAgent}}
                {{#testTimeouts}}
                    assertEquals({{{match.parametersWithDataTypeMap.connectTimeout.value}}}, it.connectTimeout);
                    assertEquals({{{match.parametersWithDataTypeMap.responseTimeout.value}}}, it.socketTimeout);
                {{/testTimeouts}}
                {{#testHost}}
                    assertEquals("{{{match}}}", it.url.host);
                {{/testHost}}        
                {{/match}}
             }
        )
        {{/isMethod}}
        {{/isError}}
        {{/steps}}
    }
    {{/tests}}
    {{/blocksClient}}
}