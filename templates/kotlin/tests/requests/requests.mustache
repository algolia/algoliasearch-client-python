package com.algolia.methods.requests

import com.algolia.client.api.{{client}}
import com.algolia.client.model.{{import}}.*
import com.algolia.client.configuration.*
import com.algolia.client.transport.*
import com.algolia.extension.*
import com.algolia.utils.*
import io.ktor.http.*
import kotlinx.coroutines.test.*
import kotlinx.serialization.json.*
import kotlin.test.*

class {{clientPrefix}}Test {

    val client = {{client}}(
        appId = "appId", 
        apiKey = "apiKey",
        {{#hasRegionalHost}}
        region = "{{defaultRegion}}",
        {{/hasRegionalHost}}
    )

    {{#blocksRequests}}

    // {{{operationId}}}
    {{#tests}}

    @Test
    fun `{{#lambda.replaceBacktick}}{{{testName}}}{{/lambda.replaceBacktick}}`() = runTest {
        client.runTest(
            call = {
                {{method}}(
                    {{#parametersWithDataType}}
                    {{> request_param}}
                    {{/parametersWithDataType}}
                    {{#hasRequestOptions}}
                    requestOptions = RequestOptions(
                        {{#requestOptions.queryParameters}}
                        urlParameters = buildMap {
                            {{#requestOptions.queryParameters.parametersWithDataType}}
                            put("{{{key}}}", {{> param_value}})
                            {{/requestOptions.queryParameters.parametersWithDataType}}
                        },
                        {{/requestOptions.queryParameters}}
                        {{#requestOptions.headers}}
                        headers = buildMap { 
                        {{#requestOptions.headers.parametersWithDataType}}
                            put("{{{key}}}", {{> param_value}})    
                        {{/requestOptions.headers.parametersWithDataType}}
                        },
                        {{/requestOptions.headers}}
                    )
                    {{/hasRequestOptions}}
                )
            },
            intercept = {
                {{#request}}
                assertEquals("{{{path}}}".toPathSegments(), it.url.pathSegments)
                assertEquals(HttpMethod.parse("{{method}}"), it.method)
                {{#headers}}
                assertContainsAll("""{{{.}}}""", it.headers)
                {{/headers}}
                {{#queryParameters}}
                assertContainsAll("""{{{.}}}""", it.url.parameters)
                {{/queryParameters}}
                {{#body}}
                assertJsonBody("""{{{.}}}""", it.body)
                {{/body}}
                {{^body}}
                {{#assertNullBody}}
                assertNoBody(it.body)
                {{/assertNullBody}}
                {{^assertNullBody}}
                assertEmptyBody(it.body)
                {{/assertNullBody}}
                {{/body}}
                {{/request}}
            },
        )
    }
    {{/tests}}
    {{/blocksRequests}}
}
