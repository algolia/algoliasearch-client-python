// {{{generationBanner}}}

package {{package}};

import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.config.ClientOptions;

import com.fasterxml.jackson.core.type.TypeReference;

import okhttp3.Call;
import okhttp3.Request;

import {{invokerPackage}}.utils.*;
import {{modelPackage}}.*;
import {{invokerPackage}}.exceptions.*;
import {{invokerPackage}}.config.*;
import java.util.function.IntUnaryOperator;

import java.util.EnumSet;
import java.util.Random;
import java.util.Collections;
{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.concurrent.CompletableFuture;
import javax.annotation.Nonnull;

{{#operations}}
public class {{classname}} extends ApiClient {
    {{#hasRegionalHost}}
    private static final String[] allowedRegions = { {{#allowedRegions}}"{{.}}"{{^-last}},{{/-last}}{{/allowedRegions}} };

    {{#fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, null, null);
    }

    public {{classname}}(String appId, String apiKey, ClientOptions options) {
        this(appId, apiKey, null, options);
    }
    {{/fallbackToAliasHost}}
    public {{classname}}(String appId, String apiKey, String region) {
        this(appId, apiKey, region, null);
    }

    public {{classname}}(String appId, String apiKey, String region, ClientOptions options) {
      super(appId, apiKey, "{{{baseName}}}", options, getDefaultHosts(region));
    }
    
    {{/hasRegionalHost}}
    {{^hasRegionalHost}}
    public {{classname}}(String appId, String apiKey) {
        this(appId, apiKey, null);
    }

    public {{classname}}(String appId, String apiKey, ClientOptions options) {
      super(appId, apiKey, "{{{baseName}}}", options, getDefaultHosts(appId));
    }
    {{/hasRegionalHost}}

    {{^hasRegionalHost}}
    private static List<Host> getDefaultHosts(String appId) {
      List<Host> hosts = new ArrayList<>();
      hosts.add(new Host(appId + "-dsn.algolia.net", EnumSet.of(CallType.READ)));
      hosts.add(new Host(appId + ".algolia.net", EnumSet.of(CallType.WRITE)));

      List<Host> commonHosts = new ArrayList<>();
      hosts.add(new Host(appId + "-1.algolianet.net", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new Host(appId + "-2.algolianet.net", EnumSet.of(CallType.READ, CallType.WRITE)));
      hosts.add(new Host(appId + "-3.algolianet.net", EnumSet.of(CallType.READ, CallType.WRITE)));

      Collections.shuffle(commonHosts, new Random());

      return Stream.concat(hosts.stream(), commonHosts.stream()).collect(Collectors.toList());
    }
    {{/hasRegionalHost}}

    {{#hasRegionalHost}}
    private static List<Host> getDefaultHosts(String region) throws AlgoliaRuntimeException {
      List<Host> hosts = new ArrayList<>();

      boolean found = {{^fallbackToAliasHost}}false{{/fallbackToAliasHost}}{{#fallbackToAliasHost}}region == null{{/fallbackToAliasHost}};
      if (region != null) {
        for (String allowed : allowedRegions) {
          if (allowed.equals(region)) {
            found = true;
            break;
          }
        }
      }

      if ({{^fallbackToAliasHost}}region == null || {{/fallbackToAliasHost}}!found){
        throw new AlgoliaRuntimeException("`region` {{^fallbackToAliasHost}}is required and {{/fallbackToAliasHost}}must be one of the following: {{#allowedRegions}}{{.}}{{^-last}}, {{/-last}}{{/allowedRegions}}");
      }

      String url = {{#fallbackToAliasHost}}region == null ? "{{{hostWithFallback}}}" : {{/fallbackToAliasHost}} "{{{regionalHost}}}".replace("{region}", region);

      hosts.add(new Host(url, EnumSet.of(CallType.READ, CallType.WRITE)));
      return hosts;
    }
    {{/hasRegionalHost}}

    {{#operation}}
    /**
     * {{{notes}}}{{#allParams}}
     * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
     {{#vendorExtensions}}{{#x-is-generic}}* @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
     * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
    {{> api_javadoc}}
    public {{> return_type}} {{operationId}}({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}},{{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}} {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/optionalParams}}{{#vendorExtensions}}{{#x-is-generic}}, Class<T> innerType{{/x-is-generic}}{{/vendorExtensions}}{{#hasParams}}, {{/hasParams}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
        return LaunderThrowable.await({{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}{{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}requestOptions));
    }

  {{! This case only sets `requestOptions` as optional }}
  /**
    * {{{notes}}}{{#allParams}}
    * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}
    {{#vendorExtensions}}{{#x-is-generic}}* @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
    {{> api_javadoc}}
  public {{> return_type}} {{operationId}}({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}},{{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/optionalParams}}{{#vendorExtensions}}{{#x-is-generic}}, Class<T> innerType{{/x-is-generic}}{{/vendorExtensions}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#allParams}}{{paramName}}, {{/allParams}}{{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}null);
  }

  {{! This case sets `requiredParams` + `requestOptions` }}
  {{#optionalParams.0}}
  /**
    * {{{notes}}}{{#requiredParams}}
    * @param {{paramName}} {{{description}}} (required){{/requiredParams}}
    {{#vendorExtensions}}{{#x-is-generic}}* @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
    * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
   {{> api_javadoc}}
  public {{> return_type}} {{operationId}}({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}, {{/requiredParams}}{{#vendorExtensions}}{{#x-is-generic}}Class<T> innerType, {{/x-is-generic}}{{/vendorExtensions}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}requestOptions);
  }
  {{/optionalParams.0}}

  {{! This case only sets `requiredParams` }}
  {{#optionalParams.0}}
  /**
    * {{{notes}}}{{#requiredParams}}
    * @param {{paramName}} {{{description}}} (required){{/requiredParams}}
    {{#vendorExtensions}}{{#x-is-generic}}* @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
   {{> api_javadoc}}
  public {{> return_type}} {{operationId}}({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#vendorExtensions}}{{#x-is-generic}}, Class<T> innerType{{/x-is-generic}}{{/vendorExtensions}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}null);
  }
  {{/optionalParams.0}}

  /**
  * (asynchronously)
  * {{notes}}{{#allParams}}
  * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#vendorExtensions}}{{#x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}},{{/requiredParams}}{{#optionalParams}}{{{dataType}}} {{paramName}}, {{/optionalParams}}{{#vendorExtensions}}{{#x-is-generic}}Class<T> innerType, {{/x-is-generic}}{{/vendorExtensions}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#allParams}}{{#required}}
    Parameters.requireNonNull({{paramName}}, "Parameter `{{paramName}}` is required when calling `{{operationId}}`.");
    {{/required}}{{/allParams}}

    HttpRequest request = HttpRequest.builder()
        {{#vendorExtensions}}{{#x-is-custom-request}}.setPathEncoded("{{{path}}}", path){{/x-is-custom-request}}{{^x-is-custom-request}}.setPath("{{{path}}}"{{#pathParams}}, {{{paramName}}}{{/pathParams}}){{/x-is-custom-request}}{{/vendorExtensions}}
        .setMethod("{{httpMethod}}")
        {{#bodyParam}}.setBody({{paramName}}){{/bodyParam}}
        {{#vendorExtensions.x-use-read-transporter}}.setRead(true){{/vendorExtensions.x-use-read-transporter}}
        {{#headerParams}}.addHeader("{{baseName}}", {{paramName}}){{/headerParams}}    
          {{#vendorExtensions}}{{#queryParams}}{{^x-is-custom-request}}.addQueryParameter("{{baseName}}", {{paramName}}){{/x-is-custom-request}}{{#x-is-custom-request}}.addQueryParameters(parameters){{/x-is-custom-request}}{{/queryParams}}{{/vendorExtensions}}
        .build();
    return executeAsync(request, requestOptions, {{#vendorExtensions}}{{#x-is-generic}}{{{returnType}}}.class, innerType{{/x-is-generic}}{{/vendorExtensions}}{{^vendorExtensions.x-is-generic}}new TypeReference<{{{returnType}}}>(){}{{/vendorExtensions.x-is-generic}});
  }

  {{! This case only sets `requestOptions` as optional }}
  /**
  * (asynchronously)
  * {{notes}}{{#allParams}}
  * @param {{paramName}} {{{description}}}{{#required}} (required){{/required}}{{^required}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}}){{/required}}{{/allParams}}{{#vendorExtensions}}{{#x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#hasRequiredParams}}{{#hasOptionalParams}},{{/hasOptionalParams}}{{/hasRequiredParams}}{{#optionalParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/optionalParams}}{{#vendorExtensions}}{{#x-is-generic}}, Class<T> innerType{{/x-is-generic}}{{/vendorExtensions}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#allParams}}{{paramName}}, {{/allParams}}{{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}null);
  }

  {{! This case sets `requiredParams` + `requestOptions` }}
  {{#optionalParams.0}}
  /**
  * (asynchronously)
  * {{notes}}{{#requiredParams}}
  * @param {{paramName}} {{{description}}} (required){{/requiredParams}}{{#vendorExtensions}}{{#x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}, {{/requiredParams}}{{#vendorExtensions}}{{#x-is-generic}}Class<T> innerType, {{/x-is-generic}}{{/vendorExtensions}}RequestOptions requestOptions) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}requestOptions);
  }
  {{/optionalParams.0}}

  {{! This case only sets `requiredParams` }}
  {{#optionalParams.0}}
  /**
  * (asynchronously)
  * {{notes}}{{#requiredParams}}
  * @param {{paramName}} {{{description}}} (required){{/requiredParams}}{{#vendorExtensions}}{{#x-is-generic}}
  * @param innerType The class held by the index, could be your custom class or {@link Object}.{{/x-is-generic}}{{/vendorExtensions}}
  {{> api_javadoc}}
  public {{> return_type_async}} {{operationId}}Async({{#requiredParams}}@Nonnull {{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#vendorExtensions}}{{#x-is-generic}}, Class<T> innerType{{/x-is-generic}}{{/vendorExtensions}}) throws AlgoliaRuntimeException {
    {{#returnType}}return {{/returnType}}this.{{operationId}}Async({{#requiredParams}}{{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}{{#requiredParams.0}},{{/requiredParams.0}}{{#optionalParams}}null{{^-last}},{{/-last}}{{/optionalParams}}, {{#vendorExtensions}}{{#x-is-generic}}innerType, {{/x-is-generic}}{{/vendorExtensions}}null);
  }
  {{/optionalParams.0}}
  {{/operation}}

  {{> api_helpers}}
}
{{/operations}}
