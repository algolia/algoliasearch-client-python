import com.algolia.utils.CompoundType;
import com.algolia.utils.JSON;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.algolia.exceptions.AlgoliaRuntimeException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}{{#isDeprecated}}
 * @deprecated{{/isDeprecated}}
 */{{#isDeprecated}}
@Deprecated{{/isDeprecated}}
@JsonDeserialize(using = {{classname}}.Deserializer.class)
@JsonSerialize(using = {{classname}}.Serializer.class)
{{>additionalModelTypeAnnotations}}
public interface {{classname}}<T> extends CompoundType<T> {

    {{#vendorExtensions.x-one-of-list}}
    static {{classname}}<{{{type}}}> of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}({{{type}}} inside) {
        return new {{classname}}{{name}}(inside);
    }

    {{/vendorExtensions.x-one-of-list}}

    class Serializer extends StdSerializer<{{classname}}> {
        public Serializer(Class<{{classname}}> t) {
            super(t);
        }

        public Serializer() {
            this(null);
        }

        @Override
        public void serialize({{classname}} value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
            jgen.writeObject(value.get());
        }
    }

    class Deserializer extends StdDeserializer<{{classname}}> {

        private static final Logger LOGGER = Logger.getLogger(Deserializer.class.getName());

        public Deserializer() {
            this({{classname}}.class);
        }

        public Deserializer(Class<?> vc) {
            super(vc);
        }

         @Override
        public {{classname}} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
            JsonNode tree = jp.readValueAsTree();
            {{#vendorExtensions.x-one-of-list}}

            // deserialize {{{type}}}
            if (tree.{{#isObject}}isObject(){{/isObject}}{{#isList}}isArray(){{/isList}}{{^isObject}}{{^isList}}isValueNode(){{/isList}}{{/isObject}}{{#discriminators}} && tree.has("{{field}}"){{/discriminators}}) {
                try(JsonParser parser = tree.traverse(jp.getCodec())) {   
                    {{{type}}} value = parser.readValueAs(new TypeReference<{{{type}}}>() {});
                    return {{{classname}}}.of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}(value);
                } catch (Exception e) {
                    // deserialization failed, continue
                    LOGGER.finest("Failed to deserialize oneOf {{{type}}} (error: " + e.getMessage() + ") (type: {{{type}}})");
                }    
            }
            {{/vendorExtensions.x-one-of-list}}
            throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public {{classname}} getNullValue(DeserializationContext ctxt) throws JsonMappingException {
        {{#isNullable}}
            return null;
        {{/isNullable}}
        {{^isNullable}}
            throw new JsonMappingException(ctxt.getParser(), "{{classname}} cannot be null");
        {{/isNullable}}
        }
    }
}

{{#vendorExtensions.x-one-of-list}}
class {{classname}}{{name}} implements {{classname}}<{{{type}}}> {
    private final {{{type}}} value;

    {{classname}}{{name}}({{{type}}} value) {
        this.value = value;
    }

    @Override
    public {{{type}}} get() {
        return value;
    }
}
{{/vendorExtensions.x-one-of-list}}
