import com.algolia.exceptions.AlgoliaRuntimeException;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.algolia.exceptions.AlgoliaRuntimeException;
import com.algolia.utils.CompoundType;

import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}{{#isDeprecated}}
 * @deprecated{{/isDeprecated}}
 */{{#isDeprecated}}
@Deprecated{{/isDeprecated}}
@JsonDeserialize(using = {{classname}}.Deserializer.class)
{{>additionalModelTypeAnnotations}}
public interface {{classname}} {

    {{#vendorExtensions}}
    {{#x-one-of-list}}
    {{^child}}
    /** {{classname}} as {{{type}}} wrapper. */
    static {{classname}} of{{#x-one-of-explicit-name}}{{name}}{{/x-one-of-explicit-name}}({{{type}}} value) {
        return new {{name}}Wrapper(value);
    }
    {{/child}}    
    {{/x-one-of-list}}

    {{#x-one-of-list}}
    {{^child}}

    /** {{classname}} as {{{type}}} wrapper. */
    @JsonSerialize(using = {{name}}Wrapper.Serializer.class)
    class {{name}}Wrapper implements {{classname}}{
        private final {{{type}}} value;

        {{name}}Wrapper({{{type}}} value) {
            this.value = value;
        }

        public {{{type}}} getValue() {
            return value;
        }

        static class Serializer extends JsonSerializer<{{name}}Wrapper> {

            @Override
            public void serialize({{name}}Wrapper value, JsonGenerator gen, SerializerProvider provider) throws IOException {
                gen.writeObject(value.getValue());
            }
        }
    }
    {{/child}}    
    {{/x-one-of-list}}
    {{/vendorExtensions}}

    class Deserializer extends JsonDeserializer<{{classname}}> {

        private static final Logger LOGGER = Logger.getLogger(Deserializer.class.getName());

        @Override
        public {{classname}} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
            JsonNode tree = jp.readValueAsTree();
            {{#vendorExtensions.x-one-of-list}}

            // deserialize {{{type}}}
            if (tree.{{#isObject}}isObject(){{/isObject}}{{#isList}}isArray(){{/isList}}{{^isObject}}{{^isList}}isValueNode(){{/isList}}{{/isObject}}{{#discriminators}} && tree.has("{{field}}"){{/discriminators}}) {
                try(JsonParser parser = tree.traverse(jp.getCodec())) {  
                    {{#isObject}}
                    return parser.readValueAs({{{type}}}.class);
                    {{/isObject}}
                    {{#isList}}
                    return parser.readValueAs(new TypeReference<{{{type}}}>(){});
                    {{/isList}}
                    {{^isObject}}{{^isList}}
                    {{{type}}} value = parser.readValueAs({{{type}}}.class);
                    return {{{classname}}}.of{{#vendorExtensions.x-one-of-explicit-name}}{{{name}}}{{/vendorExtensions.x-one-of-explicit-name}}(value);
                    {{/isList}}{{/isObject}}
                } catch (Exception e) {
                    // deserialization failed, continue
                    LOGGER.finest("Failed to deserialize oneOf {{{type}}} (error: " + e.getMessage() + ") (type: {{{type}}})");
                }    
            }
            {{/vendorExtensions.x-one-of-list}}
            throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public {{classname}} getNullValue(DeserializationContext ctxt) throws JsonMappingException {
        {{#isNullable}}
            return null;
        {{/isNullable}}
        {{^isNullable}}
            throw new JsonMappingException(ctxt.getParser(), "{{classname}} cannot be null");
        {{/isNullable}}
        }
    }
}

