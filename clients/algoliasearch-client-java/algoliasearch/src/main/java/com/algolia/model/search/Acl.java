// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.search;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;

/**
 * API key permissions: `addObject`: required to add or update records, copy or move an index.
 * `analytics`: required to access the Analytics API. `browse`: required to view records
 * `deleteIndex`: required to delete indices. `deleteObject`: required to delete records.
 * `editSettings`: required to change index settings. `inference`: required to access the Inference
 * API. `listIndexes`: required to list indices. `logs`: required to access logs of search and
 * indexing operations. `recommendation`: required to access the Personalization and Recommend APIs.
 * `search`: required to search records `seeUnretrievableAttributes`: required to retrieve
 * [`unretrievableAttributes`](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/)
 * for all operations that return records. `settings`: required to examine index settings.
 */
public enum Acl {
  ADD_OBJECT("addObject"),

  ANALYTICS("analytics"),

  BROWSE("browse"),

  DELETE_OBJECT("deleteObject"),

  DELETE_INDEX("deleteIndex"),

  EDIT_SETTINGS("editSettings"),

  INFERENCE("inference"),

  LIST_INDEXES("listIndexes"),

  LOGS("logs"),

  PERSONALIZATION("personalization"),

  RECOMMENDATION("recommendation"),

  SEARCH("search"),

  SEE_UNRETRIEVABLE_ATTRIBUTES("seeUnretrievableAttributes"),

  SETTINGS("settings"),

  USAGE("usage");

  private final String value;

  Acl(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Acl fromValue(String value) {
    for (Acl b : Acl.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}
