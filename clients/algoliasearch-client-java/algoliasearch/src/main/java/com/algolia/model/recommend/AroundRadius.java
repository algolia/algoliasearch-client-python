// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.recommend;

import com.algolia.exceptions.AlgoliaRuntimeException;
import com.algolia.utils.CompoundType;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.util.logging.Logger;

/**
 * [Maximum
 * radius](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#increase-the-search-radius)
 * for a geographical search (in meters).
 */
@JsonDeserialize(using = AroundRadius.AroundRadiusDeserializer.class)
@JsonSerialize(using = AroundRadius.AroundRadiusSerializer.class)
public abstract class AroundRadius implements CompoundType {

  private static final Logger LOGGER = Logger.getLogger(AroundRadius.class.getName());

  public static AroundRadius of(AroundRadiusAll inside) {
    return new AroundRadiusAroundRadiusAll(inside);
  }

  public static AroundRadius of(Integer inside) {
    return new AroundRadiusInteger(inside);
  }

  public static class AroundRadiusSerializer extends StdSerializer<AroundRadius> {

    public AroundRadiusSerializer(Class<AroundRadius> t) {
      super(t);
    }

    public AroundRadiusSerializer() {
      this(null);
    }

    @Override
    public void serialize(AroundRadius value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
      jgen.writeObject(value.getInsideValue());
    }
  }

  public static class AroundRadiusDeserializer extends StdDeserializer<AroundRadius> {

    public AroundRadiusDeserializer() {
      this(AroundRadius.class);
    }

    public AroundRadiusDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public AroundRadius deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
      JsonNode tree = jp.readValueAsTree();

      // deserialize AroundRadiusAll
      if (tree.isObject()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          AroundRadiusAll value = parser.readValueAs(new TypeReference<AroundRadiusAll>() {});
          return AroundRadius.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest("Failed to deserialize oneOf AroundRadiusAll (error: " + e.getMessage() + ") (type: AroundRadiusAll)");
        }
      }

      // deserialize Integer
      if (tree.isValueNode()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          Integer value = parser.readValueAs(new TypeReference<Integer>() {});
          return AroundRadius.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest("Failed to deserialize oneOf Integer (error: " + e.getMessage() + ") (type: Integer)");
        }
      }
      throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public AroundRadius getNullValue(DeserializationContext ctxt) throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "AroundRadius cannot be null");
    }
  }
}

class AroundRadiusAroundRadiusAll extends AroundRadius {

  private final AroundRadiusAll insideValue;

  AroundRadiusAroundRadiusAll(AroundRadiusAll insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public AroundRadiusAll getInsideValue() {
    return insideValue;
  }
}

class AroundRadiusInteger extends AroundRadius {

  private final Integer insideValue;

  AroundRadiusInteger(Integer insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public Integer getInsideValue() {
    return insideValue;
  }
}
