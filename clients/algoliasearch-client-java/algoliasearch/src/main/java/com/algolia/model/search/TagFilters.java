// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.search;

import com.algolia.exceptions.AlgoliaRuntimeException;
import com.algolia.utils.CompoundType;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

/** [Filter hits by tags](https://www.algolia.com/doc/api-reference/api-parameters/tagFilters/). */
@JsonDeserialize(using = TagFilters.Deserializer.class)
@JsonSerialize(using = TagFilters.Serializer.class)
public interface TagFilters<T> extends CompoundType<T> {
  static TagFilters<List<MixedSearchFilters>> of(List<MixedSearchFilters> inside) {
    return new TagFiltersListOfMixedSearchFilters(inside);
  }

  static TagFilters<String> of(String inside) {
    return new TagFiltersString(inside);
  }

  class Serializer extends StdSerializer<TagFilters> {

    public Serializer(Class<TagFilters> t) {
      super(t);
    }

    public Serializer() {
      this(null);
    }

    @Override
    public void serialize(TagFilters value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
      jgen.writeObject(value.get());
    }
  }

  class Deserializer extends StdDeserializer<TagFilters> {

    private static final Logger LOGGER = Logger.getLogger(Deserializer.class.getName());

    public Deserializer() {
      this(TagFilters.class);
    }

    public Deserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public TagFilters deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
      JsonNode tree = jp.readValueAsTree();

      // deserialize List<MixedSearchFilters>
      if (tree.isArray()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          List<MixedSearchFilters> value = parser.readValueAs(new TypeReference<List<MixedSearchFilters>>() {});
          return TagFilters.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest(
            "Failed to deserialize oneOf List<MixedSearchFilters> (error: " + e.getMessage() + ") (type: List<MixedSearchFilters>)"
          );
        }
      }

      // deserialize String
      if (tree.isValueNode()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          String value = parser.readValueAs(new TypeReference<String>() {});
          return TagFilters.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest("Failed to deserialize oneOf String (error: " + e.getMessage() + ") (type: String)");
        }
      }
      throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public TagFilters getNullValue(DeserializationContext ctxt) throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "TagFilters cannot be null");
    }
  }
}

class TagFiltersListOfMixedSearchFilters implements TagFilters<List<MixedSearchFilters>> {

  private final List<MixedSearchFilters> value;

  TagFiltersListOfMixedSearchFilters(List<MixedSearchFilters> value) {
    this.value = value;
  }

  @Override
  public List<MixedSearchFilters> get() {
    return value;
  }
}

class TagFiltersString implements TagFilters<String> {

  private final String value;

  TagFiltersString(String value) {
    this.value = value;
  }

  @Override
  public String get() {
    return value;
  }
}
