// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.recommend;

import com.algolia.exceptions.AlgoliaRuntimeException;
import com.algolia.utils.CompoundType;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.util.logging.Logger;

/**
 * When providing a string, it replaces the entire query string. When providing an object, it
 * describes incremental edits to be made to the query string (but you can't do both).
 */
@JsonDeserialize(using = ConsequenceQuery.ConsequenceQueryDeserializer.class)
@JsonSerialize(using = ConsequenceQuery.ConsequenceQuerySerializer.class)
public abstract class ConsequenceQuery implements CompoundType {

  private static final Logger LOGGER = Logger.getLogger(ConsequenceQuery.class.getName());

  public static ConsequenceQuery of(ConsequenceQueryObject inside) {
    return new ConsequenceQueryConsequenceQueryObject(inside);
  }

  public static ConsequenceQuery of(String inside) {
    return new ConsequenceQueryString(inside);
  }

  public static class ConsequenceQuerySerializer extends StdSerializer<ConsequenceQuery> {

    public ConsequenceQuerySerializer(Class<ConsequenceQuery> t) {
      super(t);
    }

    public ConsequenceQuerySerializer() {
      this(null);
    }

    @Override
    public void serialize(ConsequenceQuery value, JsonGenerator jgen, SerializerProvider provider)
      throws IOException, JsonProcessingException {
      jgen.writeObject(value.getInsideValue());
    }
  }

  public static class ConsequenceQueryDeserializer extends StdDeserializer<ConsequenceQuery> {

    public ConsequenceQueryDeserializer() {
      this(ConsequenceQuery.class);
    }

    public ConsequenceQueryDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public ConsequenceQuery deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
      JsonNode tree = jp.readValueAsTree();

      // deserialize ConsequenceQueryObject
      if (tree.isObject()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          ConsequenceQueryObject value = parser.readValueAs(new TypeReference<ConsequenceQueryObject>() {});
          return ConsequenceQuery.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest(
            "Failed to deserialize oneOf ConsequenceQueryObject (error: " + e.getMessage() + ") (type: ConsequenceQueryObject)"
          );
        }
      }

      // deserialize String
      if (tree.isValueNode()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          String value = parser.readValueAs(new TypeReference<String>() {});
          return ConsequenceQuery.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest("Failed to deserialize oneOf String (error: " + e.getMessage() + ") (type: String)");
        }
      }
      throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public ConsequenceQuery getNullValue(DeserializationContext ctxt) throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "ConsequenceQuery cannot be null");
    }
  }
}

class ConsequenceQueryConsequenceQueryObject extends ConsequenceQuery {

  private final ConsequenceQueryObject insideValue;

  ConsequenceQueryConsequenceQueryObject(ConsequenceQueryObject insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ConsequenceQueryObject getInsideValue() {
    return insideValue;
  }
}

class ConsequenceQueryString extends ConsequenceQuery {

  private final String insideValue;

  ConsequenceQueryString(String insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public String getInsideValue() {
    return insideValue;
  }
}
