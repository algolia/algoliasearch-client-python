// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.abtesting;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import java.util.Objects;

/** A/B test filter effects resulting from configuration settings. */
public class FilterEffects {

  @JsonProperty("outliers")
  private FilterEffectsOutliers outliers;

  @JsonProperty("emptySearch")
  private FilterEffectsEmptySearch emptySearch;

  public FilterEffects setOutliers(FilterEffectsOutliers outliers) {
    this.outliers = outliers;
    return this;
  }

  /** Get outliers */
  @javax.annotation.Nullable
  public FilterEffectsOutliers getOutliers() {
    return outliers;
  }

  public FilterEffects setEmptySearch(FilterEffectsEmptySearch emptySearch) {
    this.emptySearch = emptySearch;
    return this;
  }

  /** Get emptySearch */
  @javax.annotation.Nullable
  public FilterEffectsEmptySearch getEmptySearch() {
    return emptySearch;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterEffects filterEffects = (FilterEffects) o;
    return Objects.equals(this.outliers, filterEffects.outliers) && Objects.equals(this.emptySearch, filterEffects.emptySearch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outliers, emptySearch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterEffects {\n");
    sb.append("    outliers: ").append(toIndentedString(outliers)).append("\n");
    sb.append("    emptySearch: ").append(toIndentedString(emptySearch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
