// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.insights;

import com.algolia.utils.CompoundType;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;

/** EventsItems */
@JsonDeserialize(using = EventsItems.EventsItemsDeserializer.class)
@JsonSerialize(using = EventsItems.EventsItemsSerializer.class)
public abstract class EventsItems implements CompoundType {

  public static EventsItems of(ClickedFilters inside) {
    return new EventsItemsClickedFilters(inside);
  }

  public static EventsItems of(ClickedObjectIDs inside) {
    return new EventsItemsClickedObjectIDs(inside);
  }

  public static EventsItems of(ClickedObjectIDsAfterSearch inside) {
    return new EventsItemsClickedObjectIDsAfterSearch(inside);
  }

  public static EventsItems of(ConvertedFilters inside) {
    return new EventsItemsConvertedFilters(inside);
  }

  public static EventsItems of(ConvertedObjectIDs inside) {
    return new EventsItemsConvertedObjectIDs(inside);
  }

  public static EventsItems of(ConvertedObjectIDsAfterSearch inside) {
    return new EventsItemsConvertedObjectIDsAfterSearch(inside);
  }

  public static EventsItems of(ViewedFilters inside) {
    return new EventsItemsViewedFilters(inside);
  }

  public static EventsItems of(ViewedObjectIDs inside) {
    return new EventsItemsViewedObjectIDs(inside);
  }

  public static class EventsItemsSerializer extends StdSerializer<EventsItems> {

    public EventsItemsSerializer(Class<EventsItems> t) {
      super(t);
    }

    public EventsItemsSerializer() {
      this(null);
    }

    @Override
    public void serialize(EventsItems value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
      jgen.writeObject(value.getInsideValue());
    }
  }

  public static class EventsItemsDeserializer extends StdDeserializer<EventsItems> {

    public EventsItemsDeserializer() {
      this(EventsItems.class);
    }

    public EventsItemsDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public EventsItems deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
      JsonNode tree = jp.readValueAsTree();
      EventsItems deserialized = null;

      int match = 0;
      JsonToken token = tree.traverse(jp.getCodec()).nextToken();
      String currentType = "";
      // deserialize ClickedFilters
      try {
        boolean attemptParsing = true;
        currentType = "ClickedFilters";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized = EventsItems.of((ClickedFilters) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ClickedFilters>() {}));
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of((ClickedFilters) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ClickedFilters>() {}));
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println("Failed to deserialize oneOf ClickedFilters (error: " + e.getMessage() + ") (type: " + currentType + ")");
      }

      // deserialize ClickedObjectIDs
      try {
        boolean attemptParsing = true;
        currentType = "ClickedObjectIDs";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized =
            EventsItems.of((ClickedObjectIDs) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ClickedObjectIDs>() {}));
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of((ClickedObjectIDs) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ClickedObjectIDs>() {}));
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println("Failed to deserialize oneOf ClickedObjectIDs (error: " + e.getMessage() + ") (type: " + currentType + ")");
      }

      // deserialize ClickedObjectIDsAfterSearch
      try {
        boolean attemptParsing = true;
        currentType = "ClickedObjectIDsAfterSearch";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized =
            EventsItems.of(
              (ClickedObjectIDsAfterSearch) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ClickedObjectIDsAfterSearch>() {})
            );
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of(
                (ClickedObjectIDsAfterSearch) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ClickedObjectIDsAfterSearch>() {})
              );
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println(
          "Failed to deserialize oneOf ClickedObjectIDsAfterSearch (error: " + e.getMessage() + ") (type: " + currentType + ")"
        );
      }

      // deserialize ConvertedFilters
      try {
        boolean attemptParsing = true;
        currentType = "ConvertedFilters";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized =
            EventsItems.of((ConvertedFilters) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ConvertedFilters>() {}));
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of((ConvertedFilters) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ConvertedFilters>() {}));
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println("Failed to deserialize oneOf ConvertedFilters (error: " + e.getMessage() + ") (type: " + currentType + ")");
      }

      // deserialize ConvertedObjectIDs
      try {
        boolean attemptParsing = true;
        currentType = "ConvertedObjectIDs";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized =
            EventsItems.of((ConvertedObjectIDs) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ConvertedObjectIDs>() {}));
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of((ConvertedObjectIDs) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ConvertedObjectIDs>() {}));
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println("Failed to deserialize oneOf ConvertedObjectIDs (error: " + e.getMessage() + ") (type: " + currentType + ")");
      }

      // deserialize ConvertedObjectIDsAfterSearch
      try {
        boolean attemptParsing = true;
        currentType = "ConvertedObjectIDsAfterSearch";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized =
            EventsItems.of(
              (ConvertedObjectIDsAfterSearch) tree
                .traverse(jp.getCodec())
                .readValueAs(new TypeReference<ConvertedObjectIDsAfterSearch>() {})
            );
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of(
                (ConvertedObjectIDsAfterSearch) tree
                  .traverse(jp.getCodec())
                  .readValueAs(new TypeReference<ConvertedObjectIDsAfterSearch>() {})
              );
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println(
          "Failed to deserialize oneOf ConvertedObjectIDsAfterSearch (error: " + e.getMessage() + ") (type: " + currentType + ")"
        );
      }

      // deserialize ViewedFilters
      try {
        boolean attemptParsing = true;
        currentType = "ViewedFilters";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized = EventsItems.of((ViewedFilters) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ViewedFilters>() {}));
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized = EventsItems.of((ViewedFilters) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ViewedFilters>() {}));
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println("Failed to deserialize oneOf ViewedFilters (error: " + e.getMessage() + ") (type: " + currentType + ")");
      }

      // deserialize ViewedObjectIDs
      try {
        boolean attemptParsing = true;
        currentType = "ViewedObjectIDs";
        if (
          ((currentType.equals("Integer") || currentType.equals("Long")) && token == JsonToken.VALUE_NUMBER_INT) |
          ((currentType.equals("Float") || currentType.equals("Double")) && token == JsonToken.VALUE_NUMBER_FLOAT) |
          (currentType.equals("Boolean") && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE)) |
          (currentType.equals("String") && token == JsonToken.VALUE_STRING) |
          (currentType.startsWith("List<") && token == JsonToken.START_ARRAY)
        ) {
          deserialized =
            EventsItems.of((ViewedObjectIDs) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ViewedObjectIDs>() {}));
          match++;
        } else if (token == JsonToken.START_OBJECT) {
          try {
            deserialized =
              EventsItems.of((ViewedObjectIDs) tree.traverse(jp.getCodec()).readValueAs(new TypeReference<ViewedObjectIDs>() {}));
            match++;
          } catch (IOException e) {
            // do nothing
          }
        }
      } catch (Exception e) {
        // deserialization failed, continue
        System.err.println("Failed to deserialize oneOf ViewedObjectIDs (error: " + e.getMessage() + ") (type: " + currentType + ")");
      }

      if (match == 1) {
        return deserialized;
      }
      throw new IOException(String.format("Failed deserialization for EventsItems: %d classes match result, expected 1", match));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public EventsItems getNullValue(DeserializationContext ctxt) throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "EventsItems cannot be null");
    }
  }
}

class EventsItemsClickedFilters extends EventsItems {

  private final ClickedFilters insideValue;

  EventsItemsClickedFilters(ClickedFilters insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ClickedFilters getInsideValue() {
    return insideValue;
  }
}

class EventsItemsClickedObjectIDs extends EventsItems {

  private final ClickedObjectIDs insideValue;

  EventsItemsClickedObjectIDs(ClickedObjectIDs insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ClickedObjectIDs getInsideValue() {
    return insideValue;
  }
}

class EventsItemsClickedObjectIDsAfterSearch extends EventsItems {

  private final ClickedObjectIDsAfterSearch insideValue;

  EventsItemsClickedObjectIDsAfterSearch(ClickedObjectIDsAfterSearch insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ClickedObjectIDsAfterSearch getInsideValue() {
    return insideValue;
  }
}

class EventsItemsConvertedFilters extends EventsItems {

  private final ConvertedFilters insideValue;

  EventsItemsConvertedFilters(ConvertedFilters insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ConvertedFilters getInsideValue() {
    return insideValue;
  }
}

class EventsItemsConvertedObjectIDs extends EventsItems {

  private final ConvertedObjectIDs insideValue;

  EventsItemsConvertedObjectIDs(ConvertedObjectIDs insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ConvertedObjectIDs getInsideValue() {
    return insideValue;
  }
}

class EventsItemsConvertedObjectIDsAfterSearch extends EventsItems {

  private final ConvertedObjectIDsAfterSearch insideValue;

  EventsItemsConvertedObjectIDsAfterSearch(ConvertedObjectIDsAfterSearch insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ConvertedObjectIDsAfterSearch getInsideValue() {
    return insideValue;
  }
}

class EventsItemsViewedFilters extends EventsItems {

  private final ViewedFilters insideValue;

  EventsItemsViewedFilters(ViewedFilters insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ViewedFilters getInsideValue() {
    return insideValue;
  }
}

class EventsItemsViewedObjectIDs extends EventsItems {

  private final ViewedObjectIDs insideValue;

  EventsItemsViewedObjectIDs(ViewedObjectIDs insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public ViewedObjectIDs getInsideValue() {
    return insideValue;
  }
}
