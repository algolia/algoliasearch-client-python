// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost
// - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

package com.algolia.model.recommend;

import com.algolia.exceptions.AlgoliaRuntimeException;
import com.algolia.utils.CompoundType;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.util.List;
import java.util.logging.Logger;

/** MixedSearchFilters */
@JsonDeserialize(using = MixedSearchFilters.MixedSearchFiltersDeserializer.class)
@JsonSerialize(using = MixedSearchFilters.MixedSearchFiltersSerializer.class)
public abstract class MixedSearchFilters implements CompoundType {

  private static final Logger LOGGER = Logger.getLogger(MixedSearchFilters.class.getName());

  public static MixedSearchFilters of(List<String> inside) {
    return new MixedSearchFiltersListOfString(inside);
  }

  public static MixedSearchFilters of(String inside) {
    return new MixedSearchFiltersString(inside);
  }

  public static class MixedSearchFiltersSerializer extends StdSerializer<MixedSearchFilters> {

    public MixedSearchFiltersSerializer(Class<MixedSearchFilters> t) {
      super(t);
    }

    public MixedSearchFiltersSerializer() {
      this(null);
    }

    @Override
    public void serialize(MixedSearchFilters value, JsonGenerator jgen, SerializerProvider provider)
      throws IOException, JsonProcessingException {
      jgen.writeObject(value.getInsideValue());
    }
  }

  public static class MixedSearchFiltersDeserializer extends StdDeserializer<MixedSearchFilters> {

    public MixedSearchFiltersDeserializer() {
      this(MixedSearchFilters.class);
    }

    public MixedSearchFiltersDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public MixedSearchFilters deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
      JsonNode tree = jp.readValueAsTree();

      // deserialize List<String>
      if (tree.isArray()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          List<String> value = parser.readValueAs(new TypeReference<List<String>>() {});
          return MixedSearchFilters.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest("Failed to deserialize oneOf List<String> (error: " + e.getMessage() + ") (type: List<String>)");
        }
      }

      // deserialize String
      if (tree.isValueNode()) {
        try (JsonParser parser = tree.traverse(jp.getCodec())) {
          String value = parser.readValueAs(new TypeReference<String>() {});
          return MixedSearchFilters.of(value);
        } catch (Exception e) {
          // deserialization failed, continue
          LOGGER.finest("Failed to deserialize oneOf String (error: " + e.getMessage() + ") (type: String)");
        }
      }
      throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public MixedSearchFilters getNullValue(DeserializationContext ctxt) throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "MixedSearchFilters cannot be null");
    }
  }
}

class MixedSearchFiltersListOfString extends MixedSearchFilters {

  private final List<String> insideValue;

  MixedSearchFiltersListOfString(List<String> insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public List<String> getInsideValue() {
    return insideValue;
  }
}

class MixedSearchFiltersString extends MixedSearchFilters {

  private final String insideValue;

  MixedSearchFiltersString(String insideValue) {
    this.insideValue = insideValue;
  }

  @Override
  public String getInsideValue() {
    return insideValue;
  }
}
