/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.abtesting

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * AddABTestsVariant
 */
@Serializable(AddABTestsVariantSerializer::class)
public sealed interface AddABTestsVariant {

  public companion object {

    /**
     * AbTestsVariant
     *
     * @param index A/B test index.
     * @param trafficPercentage A/B test traffic percentage.
     * @param description A/B test description.
     */
    public fun AbTestsVariant(
      index: String,
      trafficPercentage: Int,
      description: String? = null,
    ): AbTestsVariant = com.algolia.client.model.abtesting.AbTestsVariant(
      index = index,
      trafficPercentage = trafficPercentage,
      description = description,
    )

    /**
     * AbTestsVariantSearchParams
     *
     * @param index A/B test index.
     * @param trafficPercentage A/B test traffic percentage.
     * @param customSearchParameters
     * @param description A/B test description.
     */
    public fun AbTestsVariantSearchParams(
      index: String,
      trafficPercentage: Int,
      customSearchParameters: JsonObject,
      description: String? = null,
    ): AbTestsVariantSearchParams = com.algolia.client.model.abtesting.AbTestsVariantSearchParams(
      index = index,
      trafficPercentage = trafficPercentage,
      customSearchParameters = customSearchParameters,
      description = description,
    )
  }
}

internal class AddABTestsVariantSerializer : KSerializer<AddABTestsVariant> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("AddABTestsVariant")

  override fun serialize(encoder: Encoder, value: AddABTestsVariant) {
    when (value) {
      is AbTestsVariant -> AbTestsVariant.serializer().serialize(encoder, value)
      is AbTestsVariantSearchParams -> AbTestsVariantSearchParams.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): AddABTestsVariant {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize AbTestsVariant
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<AbTestsVariant>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AbTestsVariant (error: ${e.message})")
      }
    }

    // deserialize AbTestsVariantSearchParams
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<AbTestsVariantSearchParams>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AbTestsVariantSearchParams (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
