/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * SearchParams
 */
@Serializable(SearchParamsSerializer::class)
public sealed interface SearchParams {

  public companion object {

    /**
     * SearchParamsObject
     *
     * @param query The text to search in the index.
     * @param similarQuery Overrides the query parameter and performs a more generic search that can be used to find \"similar\" results.
     * @param filters Filter the query with numeric, facet and/or tag filters.
     * @param facetFilters
     * @param optionalFilters
     * @param numericFilters
     * @param tagFilters
     * @param sumOrFiltersScores Determines how to calculate the total score for filtering.
     * @param facets Retrieve facets and their facet values.
     * @param maxValuesPerFacet Maximum number of facet values to return for each facet during a regular search.
     * @param facetingAfterDistinct Force faceting to be applied after de-duplication (via the Distinct setting).
     * @param sortFacetValuesBy Controls how facet values are fetched.
     * @param page Specify the page to retrieve.
     * @param offset Specify the offset of the first hit to return.
     * @param length Set the number of hits to retrieve (used only with offset).
     * @param aroundLatLng Search for entries around a central geolocation, enabling a geo search within a circular area.
     * @param aroundLatLngViaIP Search for entries around a given location automatically computed from the requester's IP address.
     * @param aroundRadius
     * @param aroundPrecision Precision of geo search (in meters), to add grouping by geo location to the ranking formula.
     * @param minimumAroundRadius Minimum radius (in meters) used for a geo search when aroundRadius is not set.
     * @param insideBoundingBox Search inside a rectangular area (in geo coordinates).
     * @param insidePolygon Search inside a polygon (in geo coordinates).
     * @param naturalLanguages This parameter changes the default values of certain parameters and settings that work best for a natural language query, such as ignorePlurals, removeStopWords, removeWordsIfNoResults, analyticsTags and ruleContexts. These parameters and settings work well together when the query is formatted in natural language instead of keywords, for example when your user performs a voice search.
     * @param ruleContexts Enables contextual rules.
     * @param personalizationImpact Define the impact of the Personalization feature.
     * @param userToken Associates a certain user token with the current search.
     * @param getRankingInfo Retrieve detailed ranking information.
     * @param clickAnalytics Enable the Click Analytics feature.
     * @param analytics Whether the current query will be taken into account in the Analytics.
     * @param analyticsTags List of tags to apply to the query for analytics purposes.
     * @param percentileComputation Whether to include or exclude a query from the processing-time percentile computation.
     * @param enableABTest Whether this search should participate in running AB tests.
     * @param enableReRanking Whether this search should use AI Re-Ranking.
     * @param reRankingApplyFilter
     * @param attributesForFaceting The complete list of attributes that will be used for faceting.
     * @param attributesToRetrieve This parameter controls which attributes to retrieve and which not to retrieve.
     * @param restrictSearchableAttributes Restricts a given query to look in only a subset of your searchable attributes.
     * @param ranking Controls how Algolia should sort your results.
     * @param customRanking Specifies the custom ranking criterion.
     * @param relevancyStrictness Controls the relevancy threshold below which less relevant results aren't included in the results.
     * @param attributesToHighlight List of attributes to highlight.
     * @param attributesToSnippet List of attributes to snippet, with an optional maximum number of words to snippet.
     * @param highlightPreTag The HTML string to insert before the highlighted parts in all highlight and snippet results.
     * @param highlightPostTag The HTML string to insert after the highlighted parts in all highlight and snippet results.
     * @param snippetEllipsisText String used as an ellipsis indicator when a snippet is truncated.
     * @param restrictHighlightAndSnippetArrays Restrict highlighting and snippeting to items that matched the query.
     * @param hitsPerPage Set the number of hits per page.
     * @param minWordSizefor1Typo Minimum number of characters a word in the query string must contain to accept matches with 1 typo.
     * @param minWordSizefor2Typos Minimum number of characters a word in the query string must contain to accept matches with 2 typos.
     * @param typoTolerance
     * @param allowTyposOnNumericTokens Whether to allow typos on numbers (\"numeric tokens\") in the query string.
     * @param disableTypoToleranceOnAttributes List of attributes on which you want to disable typo tolerance.
     * @param ignorePlurals
     * @param removeStopWords
     * @param keepDiacriticsOnCharacters List of characters that the engine shouldn't automatically normalize.
     * @param queryLanguages Sets the languages to be used by language-specific settings and functionalities such as ignorePlurals, removeStopWords, and CJK word-detection.
     * @param decompoundQuery Splits compound words into their composing atoms in the query.
     * @param enableRules Whether Rules should be globally enabled.
     * @param enablePersonalization Enable the Personalization feature.
     * @param queryType
     * @param removeWordsIfNoResults
     * @param mode
     * @param semanticSearch
     * @param advancedSyntax Enables the advanced query syntax.
     * @param optionalWords A list of words that should be considered as optional when found in the query.
     * @param disableExactOnAttributes List of attributes on which you want to disable the exact ranking criterion.
     * @param exactOnSingleWordQuery
     * @param alternativesAsExact List of alternatives that should be considered an exact match by the exact ranking criterion.
     * @param advancedSyntaxFeatures Allows you to specify which advanced syntax features are active when ‘advancedSyntax' is enabled.
     * @param explain Enriches the API’s response with meta-information as to how the query was processed.
     * @param distinct
     * @param attributeForDistinct Name of the de-duplication attribute to be used with the distinct feature.
     * @param synonyms Whether to take into account an index's synonyms for a particular search.
     * @param replaceSynonymsInHighlight Whether to highlight and snippet the original word that matches the synonym or the synonym itself.
     * @param minProximity Precision of the proximity ranking criterion.
     * @param responseFields Choose which fields to return in the API response. This parameters applies to search and browse queries.
     * @param maxFacetHits Maximum number of facet hits to return during a search for facet values. For performance reasons, the maximum allowed number of returned values is 100.
     * @param attributeCriteriaComputedByMinProximity When attribute is ranked above proximity in your ranking formula, proximity is used to select which searchable attribute is matched in the attribute ranking stage.
     * @param renderingContent
     */
    public fun SearchParamsObject(
      query: String? = null,
      similarQuery: String? = null,
      filters: String? = null,
      facetFilters: FacetFilters? = null,
      optionalFilters: OptionalFilters? = null,
      numericFilters: NumericFilters? = null,
      tagFilters: TagFilters? = null,
      sumOrFiltersScores: Boolean? = null,
      facets: List<String>? = null,
      maxValuesPerFacet: Int? = null,
      facetingAfterDistinct: Boolean? = null,
      sortFacetValuesBy: String? = null,
      page: Int? = null,
      offset: Int? = null,
      length: Int? = null,
      aroundLatLng: String? = null,
      aroundLatLngViaIP: Boolean? = null,
      aroundRadius: AroundRadius? = null,
      aroundPrecision: Int? = null,
      minimumAroundRadius: Int? = null,
      insideBoundingBox: List<Double>? = null,
      insidePolygon: List<Double>? = null,
      naturalLanguages: List<String>? = null,
      ruleContexts: List<String>? = null,
      personalizationImpact: Int? = null,
      userToken: String? = null,
      getRankingInfo: Boolean? = null,
      clickAnalytics: Boolean? = null,
      analytics: Boolean? = null,
      analyticsTags: List<String>? = null,
      percentileComputation: Boolean? = null,
      enableABTest: Boolean? = null,
      enableReRanking: Boolean? = null,
      reRankingApplyFilter: ReRankingApplyFilter? = null,
      attributesForFaceting: List<String>? = null,
      attributesToRetrieve: List<String>? = null,
      restrictSearchableAttributes: List<String>? = null,
      ranking: List<String>? = null,
      customRanking: List<String>? = null,
      relevancyStrictness: Int? = null,
      attributesToHighlight: List<String>? = null,
      attributesToSnippet: List<String>? = null,
      highlightPreTag: String? = null,
      highlightPostTag: String? = null,
      snippetEllipsisText: String? = null,
      restrictHighlightAndSnippetArrays: Boolean? = null,
      hitsPerPage: Int? = null,
      minWordSizefor1Typo: Int? = null,
      minWordSizefor2Typos: Int? = null,
      typoTolerance: TypoTolerance? = null,
      allowTyposOnNumericTokens: Boolean? = null,
      disableTypoToleranceOnAttributes: List<String>? = null,
      ignorePlurals: IgnorePlurals? = null,
      removeStopWords: RemoveStopWords? = null,
      keepDiacriticsOnCharacters: String? = null,
      queryLanguages: List<String>? = null,
      decompoundQuery: Boolean? = null,
      enableRules: Boolean? = null,
      enablePersonalization: Boolean? = null,
      queryType: QueryType? = null,
      removeWordsIfNoResults: RemoveWordsIfNoResults? = null,
      mode: Mode? = null,
      semanticSearch: IndexSettingsAsSearchParamsSemanticSearch? = null,
      advancedSyntax: Boolean? = null,
      optionalWords: List<String>? = null,
      disableExactOnAttributes: List<String>? = null,
      exactOnSingleWordQuery: ExactOnSingleWordQuery? = null,
      alternativesAsExact: List<AlternativesAsExact>? = null,
      advancedSyntaxFeatures: List<AdvancedSyntaxFeatures>? = null,
      explain: List<String>? = null,
      distinct: Distinct? = null,
      attributeForDistinct: String? = null,
      synonyms: Boolean? = null,
      replaceSynonymsInHighlight: Boolean? = null,
      minProximity: Int? = null,
      responseFields: List<String>? = null,
      maxFacetHits: Int? = null,
      attributeCriteriaComputedByMinProximity: Boolean? = null,
      renderingContent: RenderingContent? = null,
    ): SearchParamsObject = com.algolia.client.model.search.SearchParamsObject(
      query = query,
      similarQuery = similarQuery,
      filters = filters,
      facetFilters = facetFilters,
      optionalFilters = optionalFilters,
      numericFilters = numericFilters,
      tagFilters = tagFilters,
      sumOrFiltersScores = sumOrFiltersScores,
      facets = facets,
      maxValuesPerFacet = maxValuesPerFacet,
      facetingAfterDistinct = facetingAfterDistinct,
      sortFacetValuesBy = sortFacetValuesBy,
      page = page,
      offset = offset,
      length = length,
      aroundLatLng = aroundLatLng,
      aroundLatLngViaIP = aroundLatLngViaIP,
      aroundRadius = aroundRadius,
      aroundPrecision = aroundPrecision,
      minimumAroundRadius = minimumAroundRadius,
      insideBoundingBox = insideBoundingBox,
      insidePolygon = insidePolygon,
      naturalLanguages = naturalLanguages,
      ruleContexts = ruleContexts,
      personalizationImpact = personalizationImpact,
      userToken = userToken,
      getRankingInfo = getRankingInfo,
      clickAnalytics = clickAnalytics,
      analytics = analytics,
      analyticsTags = analyticsTags,
      percentileComputation = percentileComputation,
      enableABTest = enableABTest,
      enableReRanking = enableReRanking,
      reRankingApplyFilter = reRankingApplyFilter,
      attributesForFaceting = attributesForFaceting,
      attributesToRetrieve = attributesToRetrieve,
      restrictSearchableAttributes = restrictSearchableAttributes,
      ranking = ranking,
      customRanking = customRanking,
      relevancyStrictness = relevancyStrictness,
      attributesToHighlight = attributesToHighlight,
      attributesToSnippet = attributesToSnippet,
      highlightPreTag = highlightPreTag,
      highlightPostTag = highlightPostTag,
      snippetEllipsisText = snippetEllipsisText,
      restrictHighlightAndSnippetArrays = restrictHighlightAndSnippetArrays,
      hitsPerPage = hitsPerPage,
      minWordSizefor1Typo = minWordSizefor1Typo,
      minWordSizefor2Typos = minWordSizefor2Typos,
      typoTolerance = typoTolerance,
      allowTyposOnNumericTokens = allowTyposOnNumericTokens,
      disableTypoToleranceOnAttributes = disableTypoToleranceOnAttributes,
      ignorePlurals = ignorePlurals,
      removeStopWords = removeStopWords,
      keepDiacriticsOnCharacters = keepDiacriticsOnCharacters,
      queryLanguages = queryLanguages,
      decompoundQuery = decompoundQuery,
      enableRules = enableRules,
      enablePersonalization = enablePersonalization,
      queryType = queryType,
      removeWordsIfNoResults = removeWordsIfNoResults,
      mode = mode,
      semanticSearch = semanticSearch,
      advancedSyntax = advancedSyntax,
      optionalWords = optionalWords,
      disableExactOnAttributes = disableExactOnAttributes,
      exactOnSingleWordQuery = exactOnSingleWordQuery,
      alternativesAsExact = alternativesAsExact,
      advancedSyntaxFeatures = advancedSyntaxFeatures,
      explain = explain,
      distinct = distinct,
      attributeForDistinct = attributeForDistinct,
      synonyms = synonyms,
      replaceSynonymsInHighlight = replaceSynonymsInHighlight,
      minProximity = minProximity,
      responseFields = responseFields,
      maxFacetHits = maxFacetHits,
      attributeCriteriaComputedByMinProximity = attributeCriteriaComputedByMinProximity,
      renderingContent = renderingContent,
    )

    /**
     * SearchParamsString
     *
     * @param params Search parameters as URL-encoded query string.
     */
    public fun SearchParamsString(
      params: String? = null,
    ): SearchParamsString = com.algolia.client.model.search.SearchParamsString(
      params = params,
    )
  }
}

internal class SearchParamsSerializer : KSerializer<SearchParams> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("SearchParams")

  override fun serialize(encoder: Encoder, value: SearchParams) {
    when (value) {
      is SearchParamsObject -> SearchParamsObject.serializer().serialize(encoder, value)
      is SearchParamsString -> SearchParamsString.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): SearchParams {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize SearchParamsObject
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<SearchParamsObject>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SearchParamsObject (error: ${e.message})")
      }
    }

    // deserialize SearchParamsString
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<SearchParamsString>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SearchParamsString (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
