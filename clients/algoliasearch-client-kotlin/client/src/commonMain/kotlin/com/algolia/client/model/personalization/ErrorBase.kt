/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.personalization

import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Error.
 *
 * @param message
 */
@Serializable(ErrorBaseSerializer::class)
public data class ErrorBase(

  val message: String? = null,

  val additionalProperties: Map<String, JsonElement>? = null,
)

internal object ErrorBaseSerializer : KSerializer<ErrorBase> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("ErrorBase") {
    element<String>("message")
  }

  override fun deserialize(decoder: Decoder): ErrorBase {
    val input = decoder.asJsonDecoder()
    val tree = input.decodeJsonObject()
    return ErrorBase(
      message = tree["message"]?.let { input.json.decodeFromJsonElement(it) },
      additionalProperties = tree.filterKeys { it !in descriptor.elementNames },
    )
  }

  override fun serialize(encoder: Encoder, value: ErrorBase) {
    val output = encoder.asJsonEncoder()
    val json = buildJsonObject {
      value.message?.let { put("message", output.json.encodeToJsonElement(it)) }
      value.additionalProperties?.onEach { (key, element) -> put(key, element) }
    }
    (encoder as JsonEncoder).encodeJsonElement(json)
  }
}
