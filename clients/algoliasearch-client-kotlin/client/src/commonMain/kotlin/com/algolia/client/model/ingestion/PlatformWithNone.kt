/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.ingestion

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * PlatformWithNone
 */
@Serializable(PlatformWithNoneSerializer::class)
public sealed interface PlatformWithNone {

  public companion object {

    /**
     * Describe which platform the Authentication is used for.
     */
    public fun of(value: Platform): Platform = value

    /**
     * Used to filter Authentication without platform property.
     */
    public fun of(value: PlatformNone): PlatformNone = value
  }
}

internal class PlatformWithNoneSerializer : KSerializer<PlatformWithNone> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("PlatformWithNone")

  override fun serialize(encoder: Encoder, value: PlatformWithNone) {
    when (value) {
      is Platform -> Platform.serializer().serialize(encoder, value)
      is PlatformNone -> PlatformNone.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): PlatformWithNone {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize Platform
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<Platform>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Platform (error: ${e.message})")
      }
    }

    // deserialize PlatformNone
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<PlatformNone>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize PlatformNone (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
