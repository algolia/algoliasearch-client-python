/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Define the maximum radius for a geo search (in meters).
 */
@Serializable(AroundRadiusSerializer::class)
public sealed interface AroundRadius {

  public data class IntWrapper(val value: Int) : AroundRadius

  public companion object {

    /**
     * AroundRadiusAll
     */
    public fun of(value: AroundRadiusAll): AroundRadiusAll = value

    /**
     * AroundRadius as Int
     *
     */
    public fun Number(
      value: Int,
    ): IntWrapper = IntWrapper(
      value = value,
    )
  }
}

internal class AroundRadiusSerializer : KSerializer<AroundRadius> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("AroundRadius")

  override fun serialize(encoder: Encoder, value: AroundRadius) {
    when (value) {
      is AroundRadiusAll -> AroundRadiusAll.serializer().serialize(encoder, value)
      is AroundRadius.IntWrapper -> Int.serializer().serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): AroundRadius {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize AroundRadiusAll
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<AroundRadiusAll>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AroundRadiusAll (error: ${e.message})")
      }
    }

    // deserialize Int
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<AroundRadius.IntWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Int (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
