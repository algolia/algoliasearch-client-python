/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.predict

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * FetchAllUserProfilesParams
 */
@Serializable(FetchAllUserProfilesParamsSerializer::class)
public sealed interface FetchAllUserProfilesParams {

  public companion object {

    /**
     * LimitParam
     *
     * @param limit
     */
    public fun LimitParam(
      limit: Int? = null,
    ): LimitParam = com.algolia.client.model.predict.LimitParam(
      limit = limit,
    )

    /**
     * ModelsToRetrieveParam
     *
     * @param modelsToRetrieve
     */
    public fun ModelsToRetrieveParam(
      modelsToRetrieve: List<ModelsToRetrieve>? = null,
    ): ModelsToRetrieveParam = com.algolia.client.model.predict.ModelsToRetrieveParam(
      modelsToRetrieve = modelsToRetrieve,
    )

    /**
     * NextPageTokenParam
     *
     * @param nextPageToken The token is used to navigate forward in the user list. To navigate from the current user list to the next page, the API generates the next page token and it sends the token in the response, beside the current user list. NOTE: This body param cannot be used with `previousPageToken` at the same time.
     */
    public fun NextPageTokenParam(
      nextPageToken: String? = null,
    ): NextPageTokenParam = com.algolia.client.model.predict.NextPageTokenParam(
      nextPageToken = nextPageToken,
    )

    /**
     * PreviousPageTokenParam
     *
     * @param previousPageToken The token is used to navigate backward in the user list. To navigate from the current user list to the previous page, the API generates the previous page token and it sends the token in the response, beside the current user list. NOTE: This body param cannot be used with `nextPageToken` at the same time.
     */
    public fun PreviousPageTokenParam(
      previousPageToken: String? = null,
    ): PreviousPageTokenParam = com.algolia.client.model.predict.PreviousPageTokenParam(
      previousPageToken = previousPageToken,
    )

    /**
     * TypesToRetrieveParam
     *
     * @param typesToRetrieve
     */
    public fun TypesToRetrieveParam(
      typesToRetrieve: List<TypesToRetrieve>? = null,
    ): TypesToRetrieveParam = com.algolia.client.model.predict.TypesToRetrieveParam(
      typesToRetrieve = typesToRetrieve,
    )
  }
}

internal class FetchAllUserProfilesParamsSerializer : KSerializer<FetchAllUserProfilesParams> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("FetchAllUserProfilesParams")

  override fun serialize(encoder: Encoder, value: FetchAllUserProfilesParams) {
    when (value) {
      is LimitParam -> LimitParam.serializer().serialize(encoder, value)
      is ModelsToRetrieveParam -> ModelsToRetrieveParam.serializer().serialize(encoder, value)
      is NextPageTokenParam -> NextPageTokenParam.serializer().serialize(encoder, value)
      is PreviousPageTokenParam -> PreviousPageTokenParam.serializer().serialize(encoder, value)
      is TypesToRetrieveParam -> TypesToRetrieveParam.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): FetchAllUserProfilesParams {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize LimitParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<LimitParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize LimitParam (error: ${e.message})")
      }
    }

    // deserialize ModelsToRetrieveParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<ModelsToRetrieveParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ModelsToRetrieveParam (error: ${e.message})")
      }
    }

    // deserialize NextPageTokenParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<NextPageTokenParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize NextPageTokenParam (error: ${e.message})")
      }
    }

    // deserialize PreviousPageTokenParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<PreviousPageTokenParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize PreviousPageTokenParam (error: ${e.message})")
      }
    }

    // deserialize TypesToRetrieveParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<TypesToRetrieveParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize TypesToRetrieveParam (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
