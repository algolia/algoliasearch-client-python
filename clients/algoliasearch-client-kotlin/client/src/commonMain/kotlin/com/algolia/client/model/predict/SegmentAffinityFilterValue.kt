/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.predict

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * SegmentAffinityFilterValue
 */
@Serializable(SegmentAffinityFilterValueSerializer::class)
public sealed interface SegmentAffinityFilterValue {

  public data class BooleanWrapper(val value: Boolean) : SegmentAffinityFilterValue

  public data class DoubleWrapper(val value: Double) : SegmentAffinityFilterValue

  public data class ListOfStringWrapper(val value: List<String>) : SegmentAffinityFilterValue

  public data class StringWrapper(val value: String) : SegmentAffinityFilterValue

  public companion object {

    /**
     * SegmentAffinityFilterValue as Boolean
     *
     */
    public fun Boolean(
      value: Boolean,
    ): BooleanWrapper = BooleanWrapper(
      value = value,
    )

    /**
     * SegmentAffinityFilterValue as Double
     *
     */
    public fun Number(
      value: Double,
    ): DoubleWrapper = DoubleWrapper(
      value = value,
    )

    /**
     * SegmentAffinityFilterValue as List<String>
     *
     */
    public fun ListOfString(
      value: List<String>,
    ): ListOfStringWrapper = ListOfStringWrapper(
      value = value,
    )

    /**
     * SegmentAffinityFilterValue as String
     *
     */
    public fun String(
      value: String,
    ): StringWrapper = StringWrapper(
      value = value,
    )
  }
}

internal class SegmentAffinityFilterValueSerializer : KSerializer<SegmentAffinityFilterValue> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("SegmentAffinityFilterValue")

  override fun serialize(encoder: Encoder, value: SegmentAffinityFilterValue) {
    when (value) {
      is SegmentAffinityFilterValue.BooleanWrapper -> Boolean.serializer().serialize(encoder, value.value)
      is SegmentAffinityFilterValue.DoubleWrapper -> Double.serializer().serialize(encoder, value.value)
      is SegmentAffinityFilterValue.ListOfStringWrapper -> ListSerializer(String.serializer()).serialize(encoder, value.value)
      is SegmentAffinityFilterValue.StringWrapper -> String.serializer().serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): SegmentAffinityFilterValue {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize Boolean
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<SegmentAffinityFilterValue.BooleanWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Boolean (error: ${e.message})")
      }
    }

    // deserialize Double
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<SegmentAffinityFilterValue.DoubleWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Double (error: ${e.message})")
      }
    }

    // deserialize List<String>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<SegmentAffinityFilterValue.ListOfStringWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<String> (error: ${e.message})")
      }
    }

    // deserialize String
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<SegmentAffinityFilterValue.StringWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize String (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
