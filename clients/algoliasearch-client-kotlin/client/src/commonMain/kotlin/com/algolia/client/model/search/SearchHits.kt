/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * SearchHits
 *
 * @param hits
 * @param query Text to search for in an index.
 * @param params URL-encoded string of all search parameters.
 */
@Serializable(SearchHitsSerializer::class)
public data class SearchHits(

  val hits: List<Hit>,

  /** Text to search for in an index. */
  val query: String,

  /** URL-encoded string of all search parameters. */
  val params: String,

  val additionalProperties: Map<String, JsonElement>? = null,
)

internal object SearchHitsSerializer : KSerializer<SearchHits> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("SearchHits") {
    element<List<Hit>>("hits")
    element<String>("query")
    element<String>("params")
  }

  override fun deserialize(decoder: Decoder): SearchHits {
    val input = decoder.asJsonDecoder()
    val tree = input.decodeJsonObject()
    return SearchHits(
      hits = tree.getValue("hits").let { input.json.decodeFromJsonElement(it) },
      query = tree.getValue("query").let { input.json.decodeFromJsonElement(it) },
      params = tree.getValue("params").let { input.json.decodeFromJsonElement(it) },
      additionalProperties = tree.filterKeys { it !in descriptor.elementNames },
    )
  }

  override fun serialize(encoder: Encoder, value: SearchHits) {
    val output = encoder.asJsonEncoder()
    val json = buildJsonObject {
      put("hits", output.json.encodeToJsonElement(value.hits))
      put("query", output.json.encodeToJsonElement(value.query))
      put("params", output.json.encodeToJsonElement(value.params))
      value.additionalProperties?.onEach { (key, element) -> put(key, element) }
    }
    (encoder as JsonEncoder).encodeJsonElement(json)
  }
}
