/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Precision of a geographical search (in meters), to [group results that are more or less the same distance from a central point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/).
 */
@Serializable(AroundPrecisionSerializer::class)
public sealed interface AroundPrecision {

  public data class IntWrapper(val value: Int) : AroundPrecision

  public data class ListOfAroundPrecisionFromValueInnerWrapper(val value: List<AroundPrecisionFromValueInner>) : AroundPrecision

  public companion object {

    /**
     * AroundPrecision as Int
     *
     */
    public fun Number(
      value: Int,
    ): IntWrapper = IntWrapper(
      value = value,
    )

    /**
     * AroundPrecision as List<AroundPrecisionFromValueInner>
     *
     */
    public fun ListOfAroundPrecisionFromValueInner(
      value: List<AroundPrecisionFromValueInner>,
    ): ListOfAroundPrecisionFromValueInnerWrapper = ListOfAroundPrecisionFromValueInnerWrapper(
      value = value,
    )
  }
}

internal class AroundPrecisionSerializer : KSerializer<AroundPrecision> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("AroundPrecision")

  override fun serialize(encoder: Encoder, value: AroundPrecision) {
    when (value) {
      is AroundPrecision.IntWrapper -> Int.serializer().serialize(encoder, value.value)
      is AroundPrecision.ListOfAroundPrecisionFromValueInnerWrapper -> ListSerializer(AroundPrecisionFromValueInner.serializer()).serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): AroundPrecision {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize Int
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<AroundPrecision.IntWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Int (error: ${e.message})")
      }
    }

    // deserialize List<AroundPrecisionFromValueInner>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<AroundPrecision.ListOfAroundPrecisionFromValueInnerWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<AroundPrecisionFromValueInner> (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
