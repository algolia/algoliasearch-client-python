/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.ingestion

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * AuthInput
 *
 * Implementations:
 * - [AuthAPIKey]
 * - [AuthAlgolia]
 * - [AuthBasic]
 * - [AuthGoogleServiceAccount]
 * - [AuthOAuth]
 */
@Serializable(AuthInputSerializer::class)
public sealed interface AuthInput {

  public companion object {
  }
}

internal class AuthInputSerializer : KSerializer<AuthInput> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("AuthInput")

  override fun serialize(encoder: Encoder, value: AuthInput) {
    when (value) {
      is AuthAPIKey -> AuthAPIKey.serializer().serialize(encoder, value)
      is AuthAlgolia -> AuthAlgolia.serializer().serialize(encoder, value)
      is AuthBasic -> AuthBasic.serializer().serialize(encoder, value)
      is AuthGoogleServiceAccount -> AuthGoogleServiceAccount.serializer().serialize(encoder, value)
      is AuthOAuth -> AuthOAuth.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): AuthInput {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize AuthAPIKey
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AuthAPIKey.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AuthAPIKey (error: ${e.message})")
      }
    }

    // deserialize AuthAlgolia
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AuthAlgolia.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AuthAlgolia (error: ${e.message})")
      }
    }

    // deserialize AuthBasic
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AuthBasic.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AuthBasic (error: ${e.message})")
      }
    }

    // deserialize AuthGoogleServiceAccount
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AuthGoogleServiceAccount.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AuthGoogleServiceAccount (error: ${e.message})")
      }
    }

    // deserialize AuthOAuth
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AuthOAuth.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AuthOAuth (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
