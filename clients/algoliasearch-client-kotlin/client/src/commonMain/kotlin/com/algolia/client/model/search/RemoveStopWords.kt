/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.search

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Removes stop (common) words from the query before executing it. removeStopWords is used in conjunction with the queryLanguages setting. list: language ISO codes for which ignoring plurals should be enabled. This list will override any values that you may have set in queryLanguages. true: enables the stop word functionality, ensuring that stop words are removed from consideration in a search. The languages supported here are either every language, or those set by queryLanguages. false: disables stop word functionality, allowing stop words to be taken into account in a search.
 */
@Serializable(RemoveStopWordsSerializer::class)
public sealed interface RemoveStopWords {

  public data class BooleanWrapper(val value: Boolean) : RemoveStopWords

  public data class ListOfStringWrapper(val value: List<String>) : RemoveStopWords

  public companion object {

    /**
     * RemoveStopWords as Boolean
     *
     */
    public fun Boolean(
      value: Boolean,
    ): BooleanWrapper = BooleanWrapper(
      value = value,
    )

    /**
     * RemoveStopWords as List<String>
     *
     */
    public fun ListOfString(
      value: List<String>,
    ): ListOfStringWrapper = ListOfStringWrapper(
      value = value,
    )
  }
}

internal class RemoveStopWordsSerializer : KSerializer<RemoveStopWords> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("RemoveStopWords")

  override fun serialize(encoder: Encoder, value: RemoveStopWords) {
    when (value) {
      is RemoveStopWords.BooleanWrapper -> Boolean.serializer().serialize(encoder, value.value)
      is RemoveStopWords.ListOfStringWrapper -> ListSerializer(String.serializer()).serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): RemoveStopWords {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize Boolean
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<RemoveStopWords.BooleanWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Boolean (error: ${e.message})")
      }
    }

    // deserialize List<String>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<RemoveStopWords.ListOfStringWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<String> (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
