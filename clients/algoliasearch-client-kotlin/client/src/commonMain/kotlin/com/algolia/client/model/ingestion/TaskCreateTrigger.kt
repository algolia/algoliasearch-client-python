/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.ingestion

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * TaskCreateTrigger
 */
@Serializable(TaskCreateTriggerSerializer::class)
public sealed interface TaskCreateTrigger {

  public companion object {

    /**
     * The trigger information of a task of type `onDemand`.
     *
     * @param type
     */
    public fun OnDemandTriggerInput(
      type: OnDemandTriggerType,
    ): OnDemandTriggerInput = com.algolia.client.model.ingestion.OnDemandTriggerInput(
      type = type,
    )

    /**
     * The trigger input for a task of type 'schedule'.
     *
     * @param type
     * @param cron A cron expression that represent at which regularity the task should run.
     */
    public fun ScheduleTriggerInput(
      type: ScheduleTriggerType,
      cron: String,
    ): ScheduleTriggerInput = com.algolia.client.model.ingestion.ScheduleTriggerInput(
      type = type,
      cron = cron,
    )

    /**
     * The trigger input for a task of type 'subscription'.
     *
     * @param type
     */
    public fun SubscriptionTrigger(
      type: SubscriptionTriggerType,
    ): SubscriptionTrigger = com.algolia.client.model.ingestion.SubscriptionTrigger(
      type = type,
    )
  }
}

internal class TaskCreateTriggerSerializer : KSerializer<TaskCreateTrigger> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("TaskCreateTrigger")

  override fun serialize(encoder: Encoder, value: TaskCreateTrigger) {
    when (value) {
      is OnDemandTriggerInput -> OnDemandTriggerInput.serializer().serialize(encoder, value)
      is ScheduleTriggerInput -> ScheduleTriggerInput.serializer().serialize(encoder, value)
      is SubscriptionTrigger -> SubscriptionTrigger.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): TaskCreateTrigger {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize OnDemandTriggerInput
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<OnDemandTriggerInput>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize OnDemandTriggerInput (error: ${e.message})")
      }
    }

    // deserialize ScheduleTriggerInput
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<ScheduleTriggerInput>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ScheduleTriggerInput (error: ${e.message})")
      }
    }

    // deserialize SubscriptionTrigger
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<SubscriptionTrigger>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SubscriptionTrigger (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
