/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Names of facets to which automatic filtering must be applied; they must match the facet name of a facet value placeholder in the query pattern.
 */
@Serializable(AutomaticFacetFiltersSerializer::class)
public sealed interface AutomaticFacetFilters {

  public data class ListOfAutomaticFacetFilterWrapper(val value: List<AutomaticFacetFilter>) : AutomaticFacetFilters

  public data class ListOfStringWrapper(val value: List<String>) : AutomaticFacetFilters

  public companion object {

    /**
     * AutomaticFacetFilters as List<AutomaticFacetFilter>
     *
     */
    public fun ListOfAutomaticFacetFilter(
      value: List<AutomaticFacetFilter>,
    ): ListOfAutomaticFacetFilterWrapper = ListOfAutomaticFacetFilterWrapper(
      value = value,
    )

    /**
     * AutomaticFacetFilters as List<String>
     *
     */
    public fun ListOfString(
      value: List<String>,
    ): ListOfStringWrapper = ListOfStringWrapper(
      value = value,
    )
  }
}

internal class AutomaticFacetFiltersSerializer : KSerializer<AutomaticFacetFilters> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("AutomaticFacetFilters")

  override fun serialize(encoder: Encoder, value: AutomaticFacetFilters) {
    when (value) {
      is AutomaticFacetFilters.ListOfAutomaticFacetFilterWrapper -> ListSerializer(AutomaticFacetFilter.serializer()).serialize(encoder, value.value)
      is AutomaticFacetFilters.ListOfStringWrapper -> ListSerializer(String.serializer()).serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): AutomaticFacetFilters {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize List<AutomaticFacetFilter>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<AutomaticFacetFilters.ListOfAutomaticFacetFilterWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<AutomaticFacetFilter> (error: ${e.message})")
      }
    }

    // deserialize List<String>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<AutomaticFacetFilters.ListOfStringWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<String> (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
