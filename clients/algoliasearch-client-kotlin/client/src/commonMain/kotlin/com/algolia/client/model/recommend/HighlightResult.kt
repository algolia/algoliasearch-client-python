/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * HighlightResult
 */
@Serializable(HighlightResultSerializer::class)
public sealed interface HighlightResult {

  public data class ListOfHighlightResultOptionWrapper(val value: List<HighlightResultOption>) : HighlightResult

  public companion object {

    /**
     * Show highlighted section and words matched on a query.
     *
     * @param `value` Markup text with `facetQuery` matches highlighted.
     * @param matchLevel
     * @param matchedWords List of words from the query that matched the object.
     * @param fullyHighlighted Whether the entire attribute value is highlighted.
     */
    public fun HighlightResultOption(
      `value`: String,
      matchLevel: MatchLevel,
      matchedWords: List<String>,
      fullyHighlighted: Boolean? = null,
    ): HighlightResultOption = com.algolia.client.model.recommend.HighlightResultOption(
      `value` = `value`,
      matchLevel = matchLevel,
      matchedWords = matchedWords,
      fullyHighlighted = fullyHighlighted,
    )

    /**
     * HighlightResult as List<HighlightResultOption>
     *
     */
    public fun ListOfHighlightResultOption(
      value: List<HighlightResultOption>,
    ): ListOfHighlightResultOptionWrapper = ListOfHighlightResultOptionWrapper(
      value = value,
    )
  }
}

internal class HighlightResultSerializer : KSerializer<HighlightResult> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("HighlightResult")

  override fun serialize(encoder: Encoder, value: HighlightResult) {
    when (value) {
      is HighlightResultOption -> HighlightResultOption.serializer().serialize(encoder, value)
      is HighlightResult.ListOfHighlightResultOptionWrapper -> ListSerializer(HighlightResultOption.serializer()).serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): HighlightResult {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize HighlightResultOption
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<HighlightResultOption>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize HighlightResultOption (error: ${e.message})")
      }
    }

    // deserialize List<HighlightResultOption>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<HighlightResult.ListOfHighlightResultOptionWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<HighlightResultOption> (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
