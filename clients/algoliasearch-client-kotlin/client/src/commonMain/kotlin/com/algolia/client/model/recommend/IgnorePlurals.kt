/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Treats singular, plurals, and other forms of declensions as matching terms. `ignorePlurals` is used in conjunction with the `queryLanguages` setting. _list_: language ISO codes for which ignoring plurals should be enabled. This list will override any values that you may have set in `queryLanguages`. _true_: enables the ignore plurals feature, where singulars and plurals are considered equivalent (\"foot\" = \"feet\"). The languages supported here are either [every language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) (this is the default) or those set by `queryLanguages`. _false_: turns off the ignore plurals feature, so that singulars and plurals aren't considered to be the same (\"foot\" will not find \"feet\").
 */
@Serializable(IgnorePluralsSerializer::class)
public sealed interface IgnorePlurals {

  public data class BooleanWrapper(val value: Boolean) : IgnorePlurals

  public data class ListOfStringWrapper(val value: List<String>) : IgnorePlurals

  public companion object {

    /**
     * IgnorePlurals as Boolean
     *
     */
    public fun Boolean(
      value: Boolean,
    ): BooleanWrapper = BooleanWrapper(
      value = value,
    )

    /**
     * IgnorePlurals as List<String>
     *
     */
    public fun ListOfString(
      value: List<String>,
    ): ListOfStringWrapper = ListOfStringWrapper(
      value = value,
    )
  }
}

internal class IgnorePluralsSerializer : KSerializer<IgnorePlurals> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("IgnorePlurals")

  override fun serialize(encoder: Encoder, value: IgnorePlurals) {
    when (value) {
      is IgnorePlurals.BooleanWrapper -> Boolean.serializer().serialize(encoder, value.value)
      is IgnorePlurals.ListOfStringWrapper -> ListSerializer(String.serializer()).serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): IgnorePlurals {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize Boolean
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<IgnorePlurals.BooleanWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Boolean (error: ${e.message})")
      }
    }

    // deserialize List<String>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<IgnorePlurals.ListOfStringWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<String> (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
