/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * When providing a string, it replaces the entire query string. When providing an object, it describes incremental edits to be made to the query string (but you can't do both).
 */
@Serializable(ConsequenceQuerySerializer::class)
public sealed interface ConsequenceQuery {

  public data class StringWrapper(val value: String) : ConsequenceQuery

  public companion object {

    /**
     * ConsequenceQueryObject
     *
     * @param remove Words to remove.
     * @param edits Edits to apply.
     */
    public fun ConsequenceQueryObject(
      remove: List<String>? = null,
      edits: List<Edit>? = null,
    ): ConsequenceQueryObject = com.algolia.client.model.recommend.ConsequenceQueryObject(
      remove = remove,
      edits = edits,
    )

    /**
     * ConsequenceQuery as String
     *
     */
    public fun String(
      value: String,
    ): StringWrapper = StringWrapper(
      value = value,
    )
  }
}

internal class ConsequenceQuerySerializer : KSerializer<ConsequenceQuery> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("ConsequenceQuery")

  override fun serialize(encoder: Encoder, value: ConsequenceQuery) {
    when (value) {
      is ConsequenceQueryObject -> ConsequenceQueryObject.serializer().serialize(encoder, value)
      is ConsequenceQuery.StringWrapper -> String.serializer().serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): ConsequenceQuery {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize ConsequenceQueryObject
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<ConsequenceQueryObject>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ConsequenceQueryObject (error: ${e.message})")
      }
    }

    // deserialize String
    if (tree is JsonPrimitive) {
      try {
        return codec.json.decodeFromJsonElement<ConsequenceQuery.StringWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize String (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
