/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * When providing a string, it replaces the entire query string. When providing an object, it describes incremental edits to be made to the query string (but you can't do both).
 *
 * Implementations:
 * - [ConsequenceQueryObject]
 * - [String] - *[ConsequenceQuery.of]*
 */
@Serializable(ConsequenceQuerySerializer::class)
public sealed interface ConsequenceQuery {

  @JvmInline
  public value class StringValue(public val value: String) : ConsequenceQuery

  public companion object {

    /** [ConsequenceQuery] as [String] Value. */
    public fun of(value: String): ConsequenceQuery {
      return StringValue(value)
    }
  }
}

internal class ConsequenceQuerySerializer : KSerializer<ConsequenceQuery> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("ConsequenceQuery")

  override fun serialize(encoder: Encoder, value: ConsequenceQuery) {
    when (value) {
      is ConsequenceQueryObject -> ConsequenceQueryObject.serializer().serialize(encoder, value)
      is ConsequenceQuery.StringValue -> String.serializer().serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): ConsequenceQuery {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize ConsequenceQueryObject
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ConsequenceQueryObject.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ConsequenceQueryObject (error: ${e.message})")
      }
    }

    // deserialize String
    if (tree is JsonPrimitive) {
      try {
        val value = codec.json.decodeFromJsonElement(String.serializer(), tree)
        return ConsequenceQuery.of(value)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize String (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
