/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.ingestion

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Trigger
 *
 * Implementations:
 * - [OnDemandTrigger]
 * - [ScheduleTrigger]
 * - [SubscriptionTrigger]
 */
@Serializable(TriggerSerializer::class)
public sealed interface Trigger {

  public companion object {
  }
}

internal class TriggerSerializer : KSerializer<Trigger> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("Trigger")

  override fun serialize(encoder: Encoder, value: Trigger) {
    when (value) {
      is OnDemandTrigger -> OnDemandTrigger.serializer().serialize(encoder, value)
      is ScheduleTrigger -> ScheduleTrigger.serializer().serialize(encoder, value)
      is SubscriptionTrigger -> SubscriptionTrigger.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): Trigger {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize OnDemandTrigger
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(OnDemandTrigger.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize OnDemandTrigger (error: ${e.message})")
      }
    }

    // deserialize ScheduleTrigger
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ScheduleTrigger.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ScheduleTrigger (error: ${e.message})")
      }
    }

    // deserialize SubscriptionTrigger
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(SubscriptionTrigger.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SubscriptionTrigger (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
