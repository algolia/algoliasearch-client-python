/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.insights

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * EventsItems
 *
 * Implementations:
 * - [AddedToCartObjectIDs]
 * - [AddedToCartObjectIDsAfterSearch]
 * - [ClickedFilters]
 * - [ClickedObjectIDs]
 * - [ClickedObjectIDsAfterSearch]
 * - [ConvertedFilters]
 * - [ConvertedObjectIDs]
 * - [ConvertedObjectIDsAfterSearch]
 * - [Identify]
 * - [PurchasedObjectIDs]
 * - [PurchasedObjectIDsAfterSearch]
 * - [ViewedFilters]
 * - [ViewedObjectIDs]
 */
@Serializable(EventsItemsSerializer::class)
public sealed interface EventsItems {

  public companion object {
  }
}

internal class EventsItemsSerializer : KSerializer<EventsItems> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("EventsItems")

  override fun serialize(encoder: Encoder, value: EventsItems) {
    when (value) {
      is AddedToCartObjectIDs -> AddedToCartObjectIDs.serializer().serialize(encoder, value)
      is AddedToCartObjectIDsAfterSearch -> AddedToCartObjectIDsAfterSearch.serializer().serialize(encoder, value)
      is ClickedFilters -> ClickedFilters.serializer().serialize(encoder, value)
      is ClickedObjectIDs -> ClickedObjectIDs.serializer().serialize(encoder, value)
      is ClickedObjectIDsAfterSearch -> ClickedObjectIDsAfterSearch.serializer().serialize(encoder, value)
      is ConvertedFilters -> ConvertedFilters.serializer().serialize(encoder, value)
      is ConvertedObjectIDs -> ConvertedObjectIDs.serializer().serialize(encoder, value)
      is ConvertedObjectIDsAfterSearch -> ConvertedObjectIDsAfterSearch.serializer().serialize(encoder, value)
      is Identify -> Identify.serializer().serialize(encoder, value)
      is PurchasedObjectIDs -> PurchasedObjectIDs.serializer().serialize(encoder, value)
      is PurchasedObjectIDsAfterSearch -> PurchasedObjectIDsAfterSearch.serializer().serialize(encoder, value)
      is ViewedFilters -> ViewedFilters.serializer().serialize(encoder, value)
      is ViewedObjectIDs -> ViewedObjectIDs.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): EventsItems {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize AddedToCartObjectIDs
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AddedToCartObjectIDs.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AddedToCartObjectIDs (error: ${e.message})")
      }
    }

    // deserialize AddedToCartObjectIDsAfterSearch
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(AddedToCartObjectIDsAfterSearch.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AddedToCartObjectIDsAfterSearch (error: ${e.message})")
      }
    }

    // deserialize ClickedFilters
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ClickedFilters.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ClickedFilters (error: ${e.message})")
      }
    }

    // deserialize ClickedObjectIDs
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ClickedObjectIDs.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ClickedObjectIDs (error: ${e.message})")
      }
    }

    // deserialize ClickedObjectIDsAfterSearch
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ClickedObjectIDsAfterSearch.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ClickedObjectIDsAfterSearch (error: ${e.message})")
      }
    }

    // deserialize ConvertedFilters
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ConvertedFilters.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ConvertedFilters (error: ${e.message})")
      }
    }

    // deserialize ConvertedObjectIDs
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ConvertedObjectIDs.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ConvertedObjectIDs (error: ${e.message})")
      }
    }

    // deserialize ConvertedObjectIDsAfterSearch
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ConvertedObjectIDsAfterSearch.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ConvertedObjectIDsAfterSearch (error: ${e.message})")
      }
    }

    // deserialize Identify
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(Identify.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Identify (error: ${e.message})")
      }
    }

    // deserialize PurchasedObjectIDs
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(PurchasedObjectIDs.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize PurchasedObjectIDs (error: ${e.message})")
      }
    }

    // deserialize PurchasedObjectIDsAfterSearch
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(PurchasedObjectIDsAfterSearch.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize PurchasedObjectIDsAfterSearch (error: ${e.message})")
      }
    }

    // deserialize ViewedFilters
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ViewedFilters.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ViewedFilters (error: ${e.message})")
      }
    }

    // deserialize ViewedObjectIDs
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(ViewedObjectIDs.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ViewedObjectIDs (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
