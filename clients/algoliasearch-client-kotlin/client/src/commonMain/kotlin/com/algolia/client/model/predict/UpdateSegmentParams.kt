/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.predict

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * UpdateSegmentParams
 */
@Serializable(UpdateSegmentParamsSerializer::class)
public sealed interface UpdateSegmentParams {

  public companion object {

    /**
     * AllUpdateSegmentParams
     *
     * @param name The name or description of the segment.
     * @param conditions
     */
    public fun AllUpdateSegmentParams(
      name: String? = null,
      conditions: SegmentParentConditions? = null,
    ): AllUpdateSegmentParams = com.algolia.client.model.predict.AllUpdateSegmentParams(
      name = name,
      conditions = conditions,
    )

    /**
     * SegmentConditionsParam
     *
     * @param conditions
     */
    public fun SegmentConditionsParam(
      conditions: SegmentParentConditions? = null,
    ): SegmentConditionsParam = com.algolia.client.model.predict.SegmentConditionsParam(
      conditions = conditions,
    )

    /**
     * SegmentNameParam
     *
     * @param name The name or description of the segment.
     */
    public fun SegmentNameParam(
      name: String? = null,
    ): SegmentNameParam = com.algolia.client.model.predict.SegmentNameParam(
      name = name,
    )
  }
}

internal class UpdateSegmentParamsSerializer : KSerializer<UpdateSegmentParams> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("UpdateSegmentParams")

  override fun serialize(encoder: Encoder, value: UpdateSegmentParams) {
    when (value) {
      is AllUpdateSegmentParams -> AllUpdateSegmentParams.serializer().serialize(encoder, value)
      is SegmentConditionsParam -> SegmentConditionsParam.serializer().serialize(encoder, value)
      is SegmentNameParam -> SegmentNameParam.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): UpdateSegmentParams {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize AllUpdateSegmentParams
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<AllUpdateSegmentParams>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AllUpdateSegmentParams (error: ${e.message})")
      }
    }

    // deserialize SegmentConditionsParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<SegmentConditionsParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SegmentConditionsParam (error: ${e.message})")
      }
    }

    // deserialize SegmentNameParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<SegmentNameParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SegmentNameParam (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
