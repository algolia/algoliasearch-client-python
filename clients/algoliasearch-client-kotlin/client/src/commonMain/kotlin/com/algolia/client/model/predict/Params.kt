/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.predict

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * Params
 */
@Serializable(ParamsSerializer::class)
public sealed interface Params {

  public companion object {

    /**
     * AllParams
     *
     * @param modelsToRetrieve
     * @param typesToRetrieve
     */
    public fun AllParams(
      modelsToRetrieve: List<ModelsToRetrieve>? = null,
      typesToRetrieve: List<TypesToRetrieve>? = null,
    ): AllParams = com.algolia.client.model.predict.AllParams(
      modelsToRetrieve = modelsToRetrieve,
      typesToRetrieve = typesToRetrieve,
    )

    /**
     * ModelsToRetrieveParam
     *
     * @param modelsToRetrieve
     */
    public fun ModelsToRetrieveParam(
      modelsToRetrieve: List<ModelsToRetrieve>? = null,
    ): ModelsToRetrieveParam = com.algolia.client.model.predict.ModelsToRetrieveParam(
      modelsToRetrieve = modelsToRetrieve,
    )

    /**
     * TypesToRetrieveParam
     *
     * @param typesToRetrieve
     */
    public fun TypesToRetrieveParam(
      typesToRetrieve: List<TypesToRetrieve>? = null,
    ): TypesToRetrieveParam = com.algolia.client.model.predict.TypesToRetrieveParam(
      typesToRetrieve = typesToRetrieve,
    )
  }
}

internal class ParamsSerializer : KSerializer<Params> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("Params")

  override fun serialize(encoder: Encoder, value: Params) {
    when (value) {
      is AllParams -> AllParams.serializer().serialize(encoder, value)
      is ModelsToRetrieveParam -> ModelsToRetrieveParam.serializer().serialize(encoder, value)
      is TypesToRetrieveParam -> TypesToRetrieveParam.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): Params {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize AllParams
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<AllParams>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize AllParams (error: ${e.message})")
      }
    }

    // deserialize ModelsToRetrieveParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<ModelsToRetrieveParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize ModelsToRetrieveParam (error: ${e.message})")
      }
    }

    // deserialize TypesToRetrieveParam
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<TypesToRetrieveParam>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize TypesToRetrieveParam (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
