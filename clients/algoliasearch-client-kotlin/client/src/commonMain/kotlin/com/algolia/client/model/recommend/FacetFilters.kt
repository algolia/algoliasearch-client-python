/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * [Filter hits by facet value](https://www.algolia.com/doc/api-reference/api-parameters/facetFilters/).
 *
 * Implementations:
 * - [List<MixedSearchFilters>] - *[FacetFilters.of]*
 * - [String] - *[FacetFilters.of]*
 */
@Serializable(FacetFiltersSerializer::class)
public sealed interface FacetFilters {

  @JvmInline
  public value class ListOfMixedSearchFiltersValue(public val value: List<MixedSearchFilters>) : FacetFilters

  @JvmInline
  public value class StringValue(public val value: String) : FacetFilters

  public companion object {

    /** [FacetFilters] as [List<MixedSearchFilters>] Value. */
    public fun of(value: List<MixedSearchFilters>): FacetFilters {
      return ListOfMixedSearchFiltersValue(value)
    }

    /** [FacetFilters] as [String] Value. */
    public fun of(value: String): FacetFilters {
      return StringValue(value)
    }
  }
}

internal class FacetFiltersSerializer : KSerializer<FacetFilters> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("FacetFilters")

  override fun serialize(encoder: Encoder, value: FacetFilters) {
    when (value) {
      is FacetFilters.ListOfMixedSearchFiltersValue -> ListSerializer(MixedSearchFilters.serializer()).serialize(encoder, value.value)
      is FacetFilters.StringValue -> String.serializer().serialize(encoder, value.value)
    }
  }

  override fun deserialize(decoder: Decoder): FacetFilters {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize List<MixedSearchFilters>
    if (tree is JsonArray) {
      try {
        val value = codec.json.decodeFromJsonElement(ListSerializer(MixedSearchFilters.serializer()), tree)
        return FacetFilters.of(value)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<MixedSearchFilters> (error: ${e.message})")
      }
    }

    // deserialize String
    if (tree is JsonPrimitive) {
      try {
        val value = codec.json.decodeFromJsonElement(String.serializer(), tree)
        return FacetFilters.of(value)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize String (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
