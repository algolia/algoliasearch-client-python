/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.ingestion

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * DestinationInput
 */
@Serializable(DestinationInputSerializer::class)
public sealed interface DestinationInput {

  public companion object {

    /**
     * DestinationIndexName
     *
     * @param indexName The index name to store data in.
     * @param recordType
     * @param attributesToExclude Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (`.`):   - \"foo.bar\": will remove `bar` from `foo`. To remove elements from an array, you can use the following:   - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.   - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.
     */
    public fun DestinationIndexName(
      indexName: String,
      recordType: RecordType? = null,
      attributesToExclude: List<String>? = null,
    ): DestinationIndexName = com.algolia.client.model.ingestion.DestinationIndexName(
      indexName = indexName,
      recordType = recordType,
      attributesToExclude = attributesToExclude,
    )

    /**
     * DestinationIndexPrefix
     *
     * @param indexPrefix The prefix of the final index name.
     */
    public fun DestinationIndexPrefix(
      indexPrefix: String,
    ): DestinationIndexPrefix = com.algolia.client.model.ingestion.DestinationIndexPrefix(
      indexPrefix = indexPrefix,
    )
  }
}

internal class DestinationInputSerializer : KSerializer<DestinationInput> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("DestinationInput")

  override fun serialize(encoder: Encoder, value: DestinationInput) {
    when (value) {
      is DestinationIndexName -> DestinationIndexName.serializer().serialize(encoder, value)
      is DestinationIndexPrefix -> DestinationIndexPrefix.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): DestinationInput {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize DestinationIndexName
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<DestinationIndexName>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize DestinationIndexName (error: ${e.message})")
      }
    }

    // deserialize DestinationIndexPrefix
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<DestinationIndexPrefix>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize DestinationIndexPrefix (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
