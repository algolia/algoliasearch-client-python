/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * Controls whether [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/) is enabled and how it is applied.
 *
 * Implementations:
 * - [Boolean] - *[TypoTolerance.of]*
 * - [TypoToleranceEnum]
 */
@Serializable(TypoToleranceSerializer::class)
public sealed interface TypoTolerance {

  @JvmInline
  public value class BooleanValue(public val value: Boolean) : TypoTolerance

  public companion object {

    /** [TypoTolerance] as [Boolean] Value. */
    public fun of(value: Boolean): TypoTolerance {
      return BooleanValue(value)
    }
  }
}

internal class TypoToleranceSerializer : KSerializer<TypoTolerance> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("TypoTolerance")

  override fun serialize(encoder: Encoder, value: TypoTolerance) {
    when (value) {
      is TypoTolerance.BooleanValue -> Boolean.serializer().serialize(encoder, value.value)
      is TypoToleranceEnum -> TypoToleranceEnum.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): TypoTolerance {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize Boolean
    if (tree is JsonPrimitive) {
      try {
        val value = codec.json.decodeFromJsonElement(Boolean.serializer(), tree)
        return TypoTolerance.of(value)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize Boolean (error: ${e.message})")
      }
    }

    // deserialize TypoToleranceEnum
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement(TypoToleranceEnum.serializer(), tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize TypoToleranceEnum (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
