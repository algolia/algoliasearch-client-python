/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * SnippetResult
 */
@Serializable(SnippetResultSerializer::class)
public sealed interface SnippetResult {

  public data class ListOfSnippetResultOptionWrapper(val value: List<SnippetResultOption>) : SnippetResult

  public companion object {

    /**
     * SnippetResult as List<SnippetResultOption>
     *
     */
    public fun ListOfSnippetResultOption(
      value: List<SnippetResultOption>,
    ): ListOfSnippetResultOptionWrapper = ListOfSnippetResultOptionWrapper(
      value = value,
    )

    /**
     * Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.
     *
     * @param `value` Markup text with occurrences highlighted.
     * @param matchLevel
     */
    public fun SnippetResultOption(
      `value`: String,
      matchLevel: MatchLevel,
    ): SnippetResultOption = com.algolia.client.model.recommend.SnippetResultOption(
      `value` = `value`,
      matchLevel = matchLevel,
    )
  }
}

internal class SnippetResultSerializer : KSerializer<SnippetResult> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("SnippetResult")

  override fun serialize(encoder: Encoder, value: SnippetResult) {
    when (value) {
      is SnippetResult.ListOfSnippetResultOptionWrapper -> ListSerializer(SnippetResultOption.serializer()).serialize(encoder, value.value)
      is SnippetResultOption -> SnippetResultOption.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): SnippetResult {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize List<SnippetResultOption>
    if (tree is JsonArray) {
      try {
        return codec.json.decodeFromJsonElement<SnippetResult.ListOfSnippetResultOptionWrapper>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize List<SnippetResultOption> (error: ${e.message})")
      }
    }

    // deserialize SnippetResultOption
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<SnippetResultOption>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize SnippetResultOption (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
