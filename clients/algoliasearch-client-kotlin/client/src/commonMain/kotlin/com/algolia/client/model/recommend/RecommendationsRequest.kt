/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT. */
package com.algolia.client.model.recommend

import com.algolia.client.exception.AlgoliaClientException
import com.algolia.client.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*

/**
 * RecommendationsRequest
 */
@Serializable(RecommendationsRequestSerializer::class)
public sealed interface RecommendationsRequest {

  public companion object {

    /**
     * RecommendationRequest
     *
     * @param model
     * @param objectID Unique identifier of the object.
     * @param indexName The Algolia index name.
     * @param threshold The threshold to use when filtering recommendations by their score.
     * @param maxRecommendations The max number of recommendations to retrieve. If it's set to 0, all the recommendations of the objectID may be returned.
     * @param queryParameters
     * @param fallbackParameters
     */
    public fun RecommendationRequest(
      model: RecommendationModels,
      objectID: String,
      indexName: String,
      threshold: Int,
      maxRecommendations: Int? = null,
      queryParameters: SearchParamsObject? = null,
      fallbackParameters: SearchParamsObject? = null,
    ): RecommendationRequest = com.algolia.client.model.recommend.RecommendationRequest(
      model = model,
      objectID = objectID,
      indexName = indexName,
      threshold = threshold,
      maxRecommendations = maxRecommendations,
      queryParameters = queryParameters,
      fallbackParameters = fallbackParameters,
    )

    /**
     * TrendingRequest
     *
     * @param model
     * @param indexName The Algolia index name.
     * @param threshold The threshold to use when filtering recommendations by their score.
     * @param facetName The facet name to use for trending models.
     * @param facetValue The facet value to use for trending models.
     * @param maxRecommendations The max number of recommendations to retrieve. If it's set to 0, all the recommendations of the objectID may be returned.
     * @param queryParameters
     * @param fallbackParameters
     */
    public fun TrendingRequest(
      model: TrendingModels,
      indexName: String,
      threshold: Int,
      facetName: String? = null,
      facetValue: String? = null,
      maxRecommendations: Int? = null,
      queryParameters: SearchParamsObject? = null,
      fallbackParameters: SearchParamsObject? = null,
    ): TrendingRequest = com.algolia.client.model.recommend.TrendingRequest(
      model = model,
      indexName = indexName,
      threshold = threshold,
      facetName = facetName,
      facetValue = facetValue,
      maxRecommendations = maxRecommendations,
      queryParameters = queryParameters,
      fallbackParameters = fallbackParameters,
    )
  }
}

internal class RecommendationsRequestSerializer : KSerializer<RecommendationsRequest> {

  override val descriptor: SerialDescriptor = buildClassSerialDescriptor("RecommendationsRequest")

  override fun serialize(encoder: Encoder, value: RecommendationsRequest) {
    when (value) {
      is RecommendationRequest -> RecommendationRequest.serializer().serialize(encoder, value)
      is TrendingRequest -> TrendingRequest.serializer().serialize(encoder, value)
    }
  }

  override fun deserialize(decoder: Decoder): RecommendationsRequest {
    val codec = decoder.asJsonDecoder()
    val tree = codec.decodeJsonElement()

    // deserialize RecommendationRequest
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<RecommendationRequest>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize RecommendationRequest (error: ${e.message})")
      }
    }

    // deserialize TrendingRequest
    if (tree is JsonObject) {
      try {
        return codec.json.decodeFromJsonElement<TrendingRequest>(tree)
      } catch (e: Exception) {
        // deserialization failed, continue
        println("Failed to deserialize TrendingRequest (error: ${e.message})")
      }
    }

    throw AlgoliaClientException("Failed to deserialize json element: $tree")
  }
}
