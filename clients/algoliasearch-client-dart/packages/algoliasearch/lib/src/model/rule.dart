// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algoliasearch/src/model/condition.dart';
import 'package:algoliasearch/src/model/time_range.dart';
import 'package:algoliasearch/src/model/consequence.dart';

import 'package:json_annotation/json_annotation.dart';

part 'rule.g.dart';

@JsonSerializable()
final class Rule {
  /// Returns a new [Rule] instance.
  const Rule({
    required this.objectID,
    this.conditions,
    this.consequence,
    this.description,
    this.enabled,
    this.validity,
  });

  /// Unique identifier for a rule object.
  @JsonKey(name: r'objectID')
  final String objectID;

  /// [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions) required to activate a rule. You can use up to 25 conditions per rule.
  @JsonKey(name: r'conditions')
  final List<Condition>? conditions;

  @JsonKey(name: r'consequence')
  final Consequence? consequence;

  /// Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.
  @JsonKey(name: r'description')
  final String? description;

  /// Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time.
  @JsonKey(name: r'enabled')
  final bool? enabled;

  /// If you specify a validity period, the rule _only_ applies only during that period. If specified, the array must not be empty.
  @JsonKey(name: r'validity')
  final List<TimeRange>? validity;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Rule &&
          other.objectID == objectID &&
          other.conditions == conditions &&
          other.consequence == consequence &&
          other.description == description &&
          other.enabled == enabled &&
          other.validity == validity;

  @override
  int get hashCode =>
      objectID.hashCode +
      conditions.hashCode +
      consequence.hashCode +
      description.hashCode +
      enabled.hashCode +
      validity.hashCode;

  factory Rule.fromJson(Map<String, dynamic> json) => _$RuleFromJson(json);

  Map<String, dynamic> toJson() => _$RuleToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
