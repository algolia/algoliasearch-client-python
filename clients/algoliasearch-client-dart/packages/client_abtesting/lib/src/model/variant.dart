// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element

import 'package:json_annotation/json_annotation.dart';

part 'variant.g.dart';

@JsonSerializable()
final class Variant {
  /// Returns a new [Variant] instance.
  const Variant({
    required this.averageClickPosition,
    required this.clickCount,
    required this.clickThroughRate,
    required this.conversionCount,
    required this.conversionRate,
    required this.description,
    required this.index,
    required this.noResultCount,
    required this.outlierTrackedSearchesCount,
    required this.outlierUsersCount,
    required this.searchCount,
    required this.trackedSearchCount,
    required this.trafficPercentage,
    required this.userCount,
  });

  /// Variant's [average click position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position).
  @JsonKey(name: r'averageClickPosition')
  final int averageClickPosition;

  /// Number of click events for this variant.
  @JsonKey(name: r'clickCount')
  final int clickCount;

  /// Variant's [click-through rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
  @JsonKey(name: r'clickThroughRate')
  final double clickThroughRate;

  /// Number of click events for this variant.
  @JsonKey(name: r'conversionCount')
  final int conversionCount;

  /// Variant's [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
  @JsonKey(name: r'conversionRate')
  final double conversionRate;

  /// A/B test description.
  @JsonKey(name: r'description')
  final String description;

  /// A/B test index.
  @JsonKey(name: r'index')
  final String index;

  /// Number of [searches without results](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#searches-without-results) for that variant.
  @JsonKey(name: r'noResultCount')
  final int noResultCount;

  /// Number of tracked searches attributed to [outlier traffic](https://www.algolia.com/doc/guides/ab-testing/how-to-read-your-a-b-test-results/#is-the-split-off) that were removed from the A/B test. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.
  @JsonKey(name: r'outlierTrackedSearchesCount')
  final int outlierTrackedSearchesCount;

  /// Number of users attributed to [outlier traffic](https://www.algolia.com/doc/guides/ab-testing/how-to-read-your-a-b-test-results/#is-the-split-off) that were removed from the A/B test.
  @JsonKey(name: r'outlierUsersCount')
  final int outlierUsersCount;

  /// Number of searches carried out during the A/B test.
  @JsonKey(name: r'searchCount')
  final int searchCount;

  /// Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.
  @JsonKey(name: r'trackedSearchCount')
  final int trackedSearchCount;

  /// A/B test traffic percentage.
  @JsonKey(name: r'trafficPercentage')
  final int trafficPercentage;

  /// Number of users during the A/B test.
  @JsonKey(name: r'userCount')
  final int userCount;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Variant &&
          other.averageClickPosition == averageClickPosition &&
          other.clickCount == clickCount &&
          other.clickThroughRate == clickThroughRate &&
          other.conversionCount == conversionCount &&
          other.conversionRate == conversionRate &&
          other.description == description &&
          other.index == index &&
          other.noResultCount == noResultCount &&
          other.outlierTrackedSearchesCount == outlierTrackedSearchesCount &&
          other.outlierUsersCount == outlierUsersCount &&
          other.searchCount == searchCount &&
          other.trackedSearchCount == trackedSearchCount &&
          other.trafficPercentage == trafficPercentage &&
          other.userCount == userCount;

  @override
  int get hashCode =>
      averageClickPosition.hashCode +
      clickCount.hashCode +
      clickThroughRate.hashCode +
      conversionCount.hashCode +
      conversionRate.hashCode +
      description.hashCode +
      index.hashCode +
      noResultCount.hashCode +
      outlierTrackedSearchesCount.hashCode +
      outlierUsersCount.hashCode +
      searchCount.hashCode +
      trackedSearchCount.hashCode +
      trafficPercentage.hashCode +
      userCount.hashCode;

  factory Variant.fromJson(Map<String, dynamic> json) =>
      _$VariantFromJson(json);

  Map<String, dynamic> toJson() => _$VariantToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
