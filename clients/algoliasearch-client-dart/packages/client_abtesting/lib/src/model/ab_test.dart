// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_abtesting/src/model/variant.dart';

import 'package:json_annotation/json_annotation.dart';

part 'ab_test.g.dart';

@JsonSerializable()
final class ABTest {
  /// Returns a new [ABTest] instance.
  const ABTest({
    required this.abTestID,
    required this.clickSignificance,
    required this.conversionSignificance,
    required this.updatedAt,
    required this.createdAt,
    required this.name,
    required this.status,
    required this.variants,
  });

  /// Unique A/B test ID.
  @JsonKey(name: r'abTestID')
  final int abTestID;

  /// [A/B test significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance) based on click data. A value of 0.95 or over is considered to be _significant_.
  @JsonKey(name: r'clickSignificance')
  final double clickSignificance;

  /// End date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
  @JsonKey(name: r'conversionSignificance')
  final String conversionSignificance;

  /// Update date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
  @JsonKey(name: r'updatedAt')
  final String updatedAt;

  /// Creation date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
  @JsonKey(name: r'createdAt')
  final String createdAt;

  /// A/B test name.
  @JsonKey(name: r'name')
  final String name;

  /// A/B test status.
  @JsonKey(name: r'status')
  final String status;

  /// A/B test variants.
  @JsonKey(name: r'variants')
  final List<Variant> variants;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ABTest &&
          other.abTestID == abTestID &&
          other.clickSignificance == clickSignificance &&
          other.conversionSignificance == conversionSignificance &&
          other.updatedAt == updatedAt &&
          other.createdAt == createdAt &&
          other.name == name &&
          other.status == status &&
          other.variants == variants;

  @override
  int get hashCode =>
      abTestID.hashCode +
      clickSignificance.hashCode +
      conversionSignificance.hashCode +
      updatedAt.hashCode +
      createdAt.hashCode +
      name.hashCode +
      status.hashCode +
      variants.hashCode;

  factory ABTest.fromJson(Map<String, dynamic> json) => _$ABTestFromJson(json);

  Map<String, dynamic> toJson() => _$ABTestToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
