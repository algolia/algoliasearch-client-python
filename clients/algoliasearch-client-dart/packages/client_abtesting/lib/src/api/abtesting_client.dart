// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import 'package:algolia_client_core/algolia_client_core.dart';
import 'package:algolia_client_abtesting/src/deserialize.dart';
import 'package:algolia_client_abtesting/src/version.dart';

import 'package:algolia_client_abtesting/src/model/ab_test.dart';
import 'package:algolia_client_abtesting/src/model/ab_test_response.dart';
import 'package:algolia_client_abtesting/src/model/add_ab_tests_request.dart';
import 'package:algolia_client_abtesting/src/model/list_ab_tests_response.dart';

final class AbtestingClient implements ApiClient {
  @override
  final String apiKey;

  @override
  final String appId;

  @override
  final ClientOptions options;

  final String? region;

  final RetryStrategy _retryStrategy;

  AbtestingClient({
    required this.appId,
    required this.apiKey,
    this.options = const ClientOptions(),
    this.region,
  }) : _retryStrategy = RetryStrategy.create(
            segment: AgentSegment(value: "Abtesting", version: packageVersion),
            appId: appId,
            apiKey: apiKey,
            options: options,
            defaultHosts: () {
              final allowedRegions = ['de', 'us'];
              assert(
                region == null || allowedRegions.contains(region),
                '`region` must be one of the following: ${allowedRegions.join(', ')}',
              );
              final url = region == null
                  ? 'analytics.algolia.com'
                  : 'analytics.{region}.algolia.com'
                      .replaceAll('{region}', region);
              return [Host(url: url)];
            }) {
    assert(appId.isNotEmpty, '`appId` is missing.');
    assert(apiKey.isNotEmpty, '`apiKey` is missing.');
  }

  /// Create an A/B test.
  /// Creates an A/B test.
  ///
  /// Parameters:
  /// * [addABTestsRequest]
  /// * [requestOptions] additional request configuration.
  Future<ABTestResponse> addABTests({
    required AddABTestsRequest addABTestsRequest,
    RequestOptions? requestOptions,
  }) async {
    final request = ApiRequest(
      method: RequestMethod.post,
      path: r'/2/abtests',
      body: addABTestsRequest.toJson(),
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<ABTestResponse, ABTestResponse>(
      response,
      'ABTestResponse',
      growable: true,
    );
  }

  /// Send requests to the Algolia REST API.
  /// This method allow you to send requests to the Algolia REST API.
  ///
  /// Parameters:
  /// * [path] Path of the endpoint, anything after \"/1\" must be specified.
  /// * [parameters] Query parameters to apply to the current query.
  /// * [requestOptions] additional request configuration.
  Future<Object> del({
    required String path,
    Map<String, Object>? parameters,
    RequestOptions? requestOptions,
  }) async {
    assert(
      path.isNotEmpty,
      'Parameter `path` is required when calling `del`.',
    );
    final request = ApiRequest(
      method: RequestMethod.delete,
      path: r'/1{path}'.replaceAll('{' r'path' '}', path),
      queryParams: {
        ...?parameters,
      },
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<Object, Object>(
      response,
      'Object',
      growable: true,
    );
  }

  /// Delete an A/B test.
  /// Delete an A/B test. To determine the `id` for an A/B test, use the [`listABTests` operation](#tag/abtest/operation/listABTests).
  ///
  /// Parameters:
  /// * [id] Unique A/B test ID.
  /// * [requestOptions] additional request configuration.
  Future<ABTestResponse> deleteABTest({
    required int id,
    RequestOptions? requestOptions,
  }) async {
    final request = ApiRequest(
      method: RequestMethod.delete,
      path: r'/2/abtests/{id}'
          .replaceAll('{' r'id' '}', Uri.encodeComponent(id.toString())),
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<ABTestResponse, ABTestResponse>(
      response,
      'ABTestResponse',
      growable: true,
    );
  }

  /// Send requests to the Algolia REST API.
  /// This method allow you to send requests to the Algolia REST API.
  ///
  /// Parameters:
  /// * [path] Path of the endpoint, anything after \"/1\" must be specified.
  /// * [parameters] Query parameters to apply to the current query.
  /// * [requestOptions] additional request configuration.
  Future<Object> get({
    required String path,
    Map<String, Object>? parameters,
    RequestOptions? requestOptions,
  }) async {
    assert(
      path.isNotEmpty,
      'Parameter `path` is required when calling `get`.',
    );
    final request = ApiRequest(
      method: RequestMethod.get,
      path: r'/1{path}'.replaceAll('{' r'path' '}', path),
      queryParams: {
        ...?parameters,
      },
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<Object, Object>(
      response,
      'Object',
      growable: true,
    );
  }

  /// Get A/B test details.
  /// Get specific details for an A/B test. To determine the `id` for an A/B test, use the [`listABTests` operation](#tag/abtest/operation/listABTests).
  ///
  /// Parameters:
  /// * [id] Unique A/B test ID.
  /// * [requestOptions] additional request configuration.
  Future<ABTest> getABTest({
    required int id,
    RequestOptions? requestOptions,
  }) async {
    final request = ApiRequest(
      method: RequestMethod.get,
      path: r'/2/abtests/{id}'
          .replaceAll('{' r'id' '}', Uri.encodeComponent(id.toString())),
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<ABTest, ABTest>(
      response,
      'ABTest',
      growable: true,
    );
  }

  /// List all A/B tests.
  /// List all A/B tests.
  ///
  /// Parameters:
  /// * [offset] Position of the starting record. Used for paging. 0 is the first record.
  /// * [limit] Number of records to return (page size).
  /// * [indexPrefix] Only return A/B tests for indices starting with this prefix.
  /// * [indexSuffix] Only return A/B tests for indices ending with this suffix.
  /// * [requestOptions] additional request configuration.
  Future<ListABTestsResponse> listABTests({
    int? offset,
    int? limit,
    String? indexPrefix,
    String? indexSuffix,
    RequestOptions? requestOptions,
  }) async {
    final request = ApiRequest(
      method: RequestMethod.get,
      path: r'/2/abtests',
      queryParams: {
        if (offset != null) 'offset': offset,
        if (limit != null) 'limit': limit,
        if (indexPrefix != null) 'indexPrefix': indexPrefix,
        if (indexSuffix != null) 'indexSuffix': indexSuffix,
      },
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<ListABTestsResponse, ListABTestsResponse>(
      response,
      'ListABTestsResponse',
      growable: true,
    );
  }

  /// Send requests to the Algolia REST API.
  /// This method allow you to send requests to the Algolia REST API.
  ///
  /// Parameters:
  /// * [path] Path of the endpoint, anything after \"/1\" must be specified.
  /// * [parameters] Query parameters to apply to the current query.
  /// * [body] Parameters to send with the custom request.
  /// * [requestOptions] additional request configuration.
  Future<Object> post({
    required String path,
    Map<String, Object>? parameters,
    Object? body,
    RequestOptions? requestOptions,
  }) async {
    assert(
      path.isNotEmpty,
      'Parameter `path` is required when calling `post`.',
    );
    final request = ApiRequest(
      method: RequestMethod.post,
      path: r'/1{path}'.replaceAll('{' r'path' '}', path),
      queryParams: {
        ...?parameters,
      },
      body: body,
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<Object, Object>(
      response,
      'Object',
      growable: true,
    );
  }

  /// Send requests to the Algolia REST API.
  /// This method allow you to send requests to the Algolia REST API.
  ///
  /// Parameters:
  /// * [path] Path of the endpoint, anything after \"/1\" must be specified.
  /// * [parameters] Query parameters to apply to the current query.
  /// * [body] Parameters to send with the custom request.
  /// * [requestOptions] additional request configuration.
  Future<Object> put({
    required String path,
    Map<String, Object>? parameters,
    Object? body,
    RequestOptions? requestOptions,
  }) async {
    assert(
      path.isNotEmpty,
      'Parameter `path` is required when calling `put`.',
    );
    final request = ApiRequest(
      method: RequestMethod.put,
      path: r'/1{path}'.replaceAll('{' r'path' '}', path),
      queryParams: {
        ...?parameters,
      },
      body: body,
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<Object, Object>(
      response,
      'Object',
      growable: true,
    );
  }

  /// Stop an A/B test.
  /// If stopped, the test is over and can't be restarted. There is now only one index, receiving 100% of all search requests. The data gathered for stopped A/B tests is retained. To determine the `id` for an A/B test, use the [`listABTests` operation](#tag/abtest/operation/listABTests).
  ///
  /// Parameters:
  /// * [id] Unique A/B test ID.
  /// * [requestOptions] additional request configuration.
  Future<ABTestResponse> stopABTest({
    required int id,
    RequestOptions? requestOptions,
  }) async {
    final request = ApiRequest(
      method: RequestMethod.post,
      path: r'/2/abtests/{id}/stop'
          .replaceAll('{' r'id' '}', Uri.encodeComponent(id.toString())),
    );
    final response = await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    return deserialize<ABTestResponse, ABTestResponse>(
      response,
      'ABTestResponse',
      growable: true,
    );
  }

  @override
  void dispose() => _retryStrategy.dispose();
}
