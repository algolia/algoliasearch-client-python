// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_query_suggestions/src/model/source_index.dart';

import 'package:json_annotation/json_annotation.dart';

part 'query_suggestions_configuration_response.g.dart';

@JsonSerializable()
final class QuerySuggestionsConfigurationResponse {
  /// Returns a new [QuerySuggestionsConfigurationResponse] instance.
  const QuerySuggestionsConfigurationResponse({
    this.appId,
    this.sourceIndicesAPIKey,
    this.suggestionsIndicesAPIKey,
    this.externalIndicesAPIKey,
    required this.indexName,
    required this.sourceIndices,
    this.languages,
    this.exclude,
    this.enablePersonalization,
    this.allowSpecialCharacters,
  });

  /// Your Algolia application ID.
  @JsonKey(name: r'appId')
  final String? appId;

  /// API key used to read from your source index.
  @JsonKey(name: r'sourceIndicesAPIKey')
  final String? sourceIndicesAPIKey;

  /// API key used to write and configure your Query Suggestions index.
  @JsonKey(name: r'suggestionsIndicesAPIKey')
  final String? suggestionsIndicesAPIKey;

  /// API key used to read from external Algolia indices.
  @JsonKey(name: r'externalIndicesAPIKey')
  final String? externalIndicesAPIKey;

  /// Query Suggestions index name.
  @JsonKey(name: r'indexName')
  final String indexName;

  /// Algolia indices from which to get the popular searches for query suggestions.
  @JsonKey(name: r'sourceIndices')
  final List<SourceIndex> sourceIndices;

  /// One of types:
  /// - [bool]
  /// - [List<String>]
  @JsonKey(name: r'languages')
  final dynamic languages;

  /// Patterns to exclude from query suggestions.
  @JsonKey(name: r'exclude')
  final List<String>? exclude;

  /// Turn on personalized query suggestions.
  @JsonKey(name: r'enablePersonalization')
  final bool? enablePersonalization;

  /// Allow suggestions with special characters.
  @JsonKey(name: r'allowSpecialCharacters')
  final bool? allowSpecialCharacters;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QuerySuggestionsConfigurationResponse &&
          other.appId == appId &&
          other.sourceIndicesAPIKey == sourceIndicesAPIKey &&
          other.suggestionsIndicesAPIKey == suggestionsIndicesAPIKey &&
          other.externalIndicesAPIKey == externalIndicesAPIKey &&
          other.indexName == indexName &&
          other.sourceIndices == sourceIndices &&
          other.languages == languages &&
          other.exclude == exclude &&
          other.enablePersonalization == enablePersonalization &&
          other.allowSpecialCharacters == allowSpecialCharacters;

  @override
  int get hashCode =>
      appId.hashCode +
      sourceIndicesAPIKey.hashCode +
      suggestionsIndicesAPIKey.hashCode +
      externalIndicesAPIKey.hashCode +
      indexName.hashCode +
      sourceIndices.hashCode +
      languages.hashCode +
      (exclude == null ? 0 : exclude.hashCode) +
      enablePersonalization.hashCode +
      allowSpecialCharacters.hashCode;

  factory QuerySuggestionsConfigurationResponse.fromJson(
          Map<String, dynamic> json) =>
      _$QuerySuggestionsConfigurationResponseFromJson(json);

  Map<String, dynamic> toJson() =>
      _$QuerySuggestionsConfigurationResponseToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
