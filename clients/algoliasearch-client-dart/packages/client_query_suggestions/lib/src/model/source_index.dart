// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_query_suggestions/src/model/facet.dart';

import 'package:json_annotation/json_annotation.dart';

part 'source_index.g.dart';

@JsonSerializable()
final class SourceIndex {
  /// Returns a new [SourceIndex] instance.
  const SourceIndex({
    required this.indexName,
    this.replicas,
    this.analyticsTags,
    this.facets,
    this.minHits,
    this.minLetters,
    this.generate,
    this.external_,
  });

  /// Name of the Algolia index to use as source for query suggestions.
  @JsonKey(name: r'indexName')
  final String indexName;

  /// If true, Query Suggestions uses all replicas of the primary index to find popular searches. If false, only the primary index is used.
  @JsonKey(name: r'replicas')
  final bool? replicas;

  /// [Analytics tags](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) for filtering the popular searches.
  @JsonKey(name: r'analyticsTags')
  final List<String>? analyticsTags;

  /// Facets to use as top categories with your suggestions.  If provided, Query Suggestions adds the top facet values to each suggestion.
  @JsonKey(name: r'facets')
  final List<Facet>? facets;

  /// Minimum number of hits required to be included as a suggestion.  A search query must at least generate `minHits` hits to be included in the Query Suggestions index.
  // minimum: 0
  @JsonKey(name: r'minHits')
  final int? minHits;

  /// Minimum letters required to be included as a suggestion.  A search query must be at least `minLetters` long to be included in the Query Suggestions index.
  // minimum: 0
  @JsonKey(name: r'minLetters')
  final int? minLetters;

  @JsonKey(name: r'generate')
  final List<List<String>>? generate;

  /// Algolia indices with popular searches to use as query suggestions.  Records of these indices must have these attributes:    - `query`: search query which will be added as a suggestion   - `count`: measure of popularity of that search query  For example, you can export popular searches from an external analytics tool, such as Google Analytics or Adobe Analytics, and feed this data into an external Algolia index. You can use this external index to generate query suggestions until your Algolia analytics has collected enough data.
  @JsonKey(name: r'external')
  final List<String>? external_;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SourceIndex &&
          other.indexName == indexName &&
          other.replicas == replicas &&
          other.analyticsTags == analyticsTags &&
          other.facets == facets &&
          other.minHits == minHits &&
          other.minLetters == minLetters &&
          other.generate == generate &&
          other.external_ == external_;

  @override
  int get hashCode =>
      indexName.hashCode +
      replicas.hashCode +
      (analyticsTags == null ? 0 : analyticsTags.hashCode) +
      (facets == null ? 0 : facets.hashCode) +
      minHits.hashCode +
      minLetters.hashCode +
      generate.hashCode +
      (external_ == null ? 0 : external_.hashCode);

  factory SourceIndex.fromJson(Map<String, dynamic> json) =>
      _$SourceIndexFromJson(json);

  Map<String, dynamic> toJson() => _$SourceIndexToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
