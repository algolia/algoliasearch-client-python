// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element

import 'package:json_annotation/json_annotation.dart';

part 'base_index_settings.g.dart';

@JsonSerializable()
final class BaseIndexSettings {
  /// Returns a new [BaseIndexSettings] instance.
  const BaseIndexSettings({
    this.replicas,
    this.paginationLimitedTo,
    this.unretrievableAttributes,
    this.disableTypoToleranceOnWords,
    this.attributesToTransliterate,
    this.camelCaseAttributes,
    this.decompoundedAttributes,
    this.indexLanguages,
    this.disablePrefixOnAttributes,
    this.allowCompressionOfIntegerArray,
    this.numericAttributesForFiltering,
    this.separatorsToIndex,
    this.searchableAttributes,
    this.userData,
    this.customNormalization,
  });

  /// Creates replicas, exact copies of an index.
  @JsonKey(name: r'replicas')
  final List<String>? replicas;

  /// Set the maximum number of hits accessible via pagination.
  @JsonKey(name: r'paginationLimitedTo')
  final int? paginationLimitedTo;

  /// List of attributes that can't be retrieved at query time.
  @JsonKey(name: r'unretrievableAttributes')
  final List<String>? unretrievableAttributes;

  /// A list of words for which you want to turn off typo tolerance.
  @JsonKey(name: r'disableTypoToleranceOnWords')
  final List<String>? disableTypoToleranceOnWords;

  /// Specify on which attributes in your index Algolia should apply Japanese transliteration to make words indexed in Katakana or Kanji searchable in Hiragana.
  @JsonKey(name: r'attributesToTransliterate')
  final List<String>? attributesToTransliterate;

  /// List of attributes on which to do a decomposition of camel case words.
  @JsonKey(name: r'camelCaseAttributes')
  final List<String>? camelCaseAttributes;

  /// Specify on which attributes in your index Algolia should apply word segmentation, also known as decompounding.
  @JsonKey(name: r'decompoundedAttributes')
  final Object? decompoundedAttributes;

  /// Sets the languages at the index level for language-specific processing such as tokenization and normalization.
  @JsonKey(name: r'indexLanguages')
  final List<String>? indexLanguages;

  /// List of attributes on which you want to disable prefix matching.
  @JsonKey(name: r'disablePrefixOnAttributes')
  final List<String>? disablePrefixOnAttributes;

  /// Enables compression of large integer arrays.
  @JsonKey(name: r'allowCompressionOfIntegerArray')
  final bool? allowCompressionOfIntegerArray;

  /// List of numeric attributes that can be used as numerical filters.
  @JsonKey(name: r'numericAttributesForFiltering')
  final List<String>? numericAttributesForFiltering;

  /// Control which separators are indexed.
  @JsonKey(name: r'separatorsToIndex')
  final String? separatorsToIndex;

  /// The complete list of attributes used for searching.
  @JsonKey(name: r'searchableAttributes')
  final List<String>? searchableAttributes;

  /// Lets you store custom data in your indices.
  @JsonKey(name: r'userData')
  final Object? userData;

  /// Overrides Algolia's default normalization.
  @JsonKey(name: r'customNormalization')
  final Map<String, Map<String, String>>? customNormalization;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BaseIndexSettings &&
          other.replicas == replicas &&
          other.paginationLimitedTo == paginationLimitedTo &&
          other.unretrievableAttributes == unretrievableAttributes &&
          other.disableTypoToleranceOnWords == disableTypoToleranceOnWords &&
          other.attributesToTransliterate == attributesToTransliterate &&
          other.camelCaseAttributes == camelCaseAttributes &&
          other.decompoundedAttributes == decompoundedAttributes &&
          other.indexLanguages == indexLanguages &&
          other.disablePrefixOnAttributes == disablePrefixOnAttributes &&
          other.allowCompressionOfIntegerArray ==
              allowCompressionOfIntegerArray &&
          other.numericAttributesForFiltering ==
              numericAttributesForFiltering &&
          other.separatorsToIndex == separatorsToIndex &&
          other.searchableAttributes == searchableAttributes &&
          other.userData == userData &&
          other.customNormalization == customNormalization;

  @override
  int get hashCode =>
      replicas.hashCode +
      paginationLimitedTo.hashCode +
      unretrievableAttributes.hashCode +
      disableTypoToleranceOnWords.hashCode +
      attributesToTransliterate.hashCode +
      camelCaseAttributes.hashCode +
      decompoundedAttributes.hashCode +
      indexLanguages.hashCode +
      disablePrefixOnAttributes.hashCode +
      allowCompressionOfIntegerArray.hashCode +
      numericAttributesForFiltering.hashCode +
      separatorsToIndex.hashCode +
      searchableAttributes.hashCode +
      userData.hashCode +
      customNormalization.hashCode;

  factory BaseIndexSettings.fromJson(Map<String, dynamic> json) =>
      _$BaseIndexSettingsFromJson(json);

  Map<String, dynamic> toJson() => _$BaseIndexSettingsToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
