// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element

import 'package:json_annotation/json_annotation.dart';

part 'automatic_facet_filter.g.dart';

@JsonSerializable()
final class AutomaticFacetFilter {
  /// Returns a new [AutomaticFacetFilter] instance.
  const AutomaticFacetFilter({
    required this.facet,
    this.score,
    this.disjunctive,
  });

  /// Attribute to filter on. This must match a facet placeholder in the Rule's pattern.
  @JsonKey(name: r'facet')
  final String facet;

  /// Score for the filter. Typically used for optional or disjunctive filters.
  @JsonKey(name: r'score')
  final int? score;

  /// Whether the filter is disjunctive (true) or conjunctive (false).
  @JsonKey(name: r'disjunctive')
  final bool? disjunctive;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AutomaticFacetFilter &&
          other.facet == facet &&
          other.score == score &&
          other.disjunctive == disjunctive;

  @override
  int get hashCode => facet.hashCode + score.hashCode + disjunctive.hashCode;

  factory AutomaticFacetFilter.fromJson(Map<String, dynamic> json) =>
      _$AutomaticFacetFilterFromJson(json);

  Map<String, dynamic> toJson() => _$AutomaticFacetFilterToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
