// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_search/src/model/consequence_params.dart';
import 'package:algolia_client_search/src/model/consequence_hide.dart';

import 'package:json_annotation/json_annotation.dart';

part 'consequence.g.dart';

@JsonSerializable()
final class Consequence {
  /// Returns a new [Consequence] instance.
  const Consequence({
    this.params,
    this.promote,
    this.filterPromotes,
    this.hide_,
    this.userData,
  });

  @JsonKey(name: r'params')
  final ConsequenceParams? params;

  /// Objects to promote as hits.
  @JsonKey(name: r'promote')
  final Iterable<dynamic>? promote;

  /// Only use in combination with the promote consequence. When true, promoted results will be restricted to match the filters of the current search. When false, the promoted results will show up regardless of the filters.
  @JsonKey(name: r'filterPromotes')
  final bool? filterPromotes;

  /// Objects to hide from hits. Each object must contain an objectID field. By default, you can hide up to 50 items per rule.
  @JsonKey(name: r'hide')
  final List<ConsequenceHide>? hide_;

  /// Custom JSON object that will be appended to the userData array in the response. This object isn't interpreted by the API. It's limited to 1kB of minified JSON.
  @JsonKey(name: r'userData')
  final Object? userData;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Consequence &&
          other.params == params &&
          other.promote == promote &&
          other.filterPromotes == filterPromotes &&
          other.hide_ == hide_ &&
          other.userData == userData;

  @override
  int get hashCode =>
      params.hashCode +
      promote.hashCode +
      filterPromotes.hashCode +
      hide_.hashCode +
      userData.hashCode;

  factory Consequence.fromJson(Map<String, dynamic> json) =>
      _$ConsequenceFromJson(json);

  Map<String, dynamic> toJson() => _$ConsequenceToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
