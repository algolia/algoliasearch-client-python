// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element

import 'package:json_annotation/json_annotation.dart';

part 'base_search_params_without_query.g.dart';

@JsonSerializable()
final class BaseSearchParamsWithoutQuery {
  /// Returns a new [BaseSearchParamsWithoutQuery] instance.
  const BaseSearchParamsWithoutQuery({
    this.similarQuery,
    this.filters,
    this.facetFilters,
    this.optionalFilters,
    this.numericFilters,
    this.tagFilters,
    this.sumOrFiltersScores,
    this.facets,
    this.maxValuesPerFacet,
    this.facetingAfterDistinct,
    this.sortFacetValuesBy,
    this.page,
    this.offset,
    this.length,
    this.aroundLatLng,
    this.aroundLatLngViaIP,
    this.aroundRadius,
    this.aroundPrecision,
    this.minimumAroundRadius,
    this.insideBoundingBox,
    this.insidePolygon,
    this.naturalLanguages,
    this.ruleContexts,
    this.personalizationImpact,
    this.userToken,
    this.getRankingInfo,
    this.clickAnalytics,
    this.analytics,
    this.analyticsTags,
    this.percentileComputation,
    this.enableABTest,
    this.enableReRanking,
    this.reRankingApplyFilter,
  });

  /// Overrides the query parameter and performs a more generic search that can be used to find \"similar\" results.
  @JsonKey(name: r'similarQuery')
  final String? similarQuery;

  /// Filter the query with numeric, facet and/or tag filters.
  @JsonKey(name: r'filters')
  final String? filters;

  @JsonKey(name: r'facetFilters')
  final dynamic facetFilters;

  @JsonKey(name: r'optionalFilters')
  final dynamic optionalFilters;

  @JsonKey(name: r'numericFilters')
  final dynamic numericFilters;

  @JsonKey(name: r'tagFilters')
  final dynamic tagFilters;

  /// Determines how to calculate the total score for filtering.
  @JsonKey(name: r'sumOrFiltersScores')
  final bool? sumOrFiltersScores;

  /// Retrieve facets and their facet values.
  @JsonKey(name: r'facets')
  final List<String>? facets;

  /// Maximum number of facet values to return for each facet during a regular search.
  @JsonKey(name: r'maxValuesPerFacet')
  final int? maxValuesPerFacet;

  /// Force faceting to be applied after de-duplication (via the Distinct setting).
  @JsonKey(name: r'facetingAfterDistinct')
  final bool? facetingAfterDistinct;

  /// Controls how facet values are fetched.
  @JsonKey(name: r'sortFacetValuesBy')
  final String? sortFacetValuesBy;

  /// Specify the page to retrieve.
  @JsonKey(name: r'page')
  final int? page;

  /// Specify the offset of the first hit to return.
  @JsonKey(name: r'offset')
  final int? offset;

  /// Set the number of hits to retrieve (used only with offset).
  // minimum: 1
  // maximum: 1000
  @JsonKey(name: r'length')
  final int? length;

  /// Search for entries around a central geolocation, enabling a geo search within a circular area.
  @JsonKey(name: r'aroundLatLng')
  final String? aroundLatLng;

  /// Search for entries around a given location automatically computed from the requester's IP address.
  @JsonKey(name: r'aroundLatLngViaIP')
  final bool? aroundLatLngViaIP;

  @JsonKey(name: r'aroundRadius')
  final dynamic aroundRadius;

  /// Precision of geo search (in meters), to add grouping by geo location to the ranking formula.
  @JsonKey(name: r'aroundPrecision')
  final int? aroundPrecision;

  /// Minimum radius (in meters) used for a geo search when aroundRadius is not set.
  // minimum: 1
  @JsonKey(name: r'minimumAroundRadius')
  final int? minimumAroundRadius;

  /// Search inside a rectangular area (in geo coordinates).
  @JsonKey(name: r'insideBoundingBox')
  final List<double>? insideBoundingBox;

  /// Search inside a polygon (in geo coordinates).
  @JsonKey(name: r'insidePolygon')
  final List<double>? insidePolygon;

  /// This parameter changes the default values of certain parameters and settings that work best for a natural language query, such as ignorePlurals, removeStopWords, removeWordsIfNoResults, analyticsTags and ruleContexts. These parameters and settings work well together when the query is formatted in natural language instead of keywords, for example when your user performs a voice search.
  @JsonKey(name: r'naturalLanguages')
  final List<String>? naturalLanguages;

  /// Enables contextual rules.
  @JsonKey(name: r'ruleContexts')
  final List<String>? ruleContexts;

  /// Define the impact of the Personalization feature.
  @JsonKey(name: r'personalizationImpact')
  final int? personalizationImpact;

  /// Associates a certain user token with the current search.
  @JsonKey(name: r'userToken')
  final String? userToken;

  /// Retrieve detailed ranking information.
  @JsonKey(name: r'getRankingInfo')
  final bool? getRankingInfo;

  /// Enable the Click Analytics feature.
  @JsonKey(name: r'clickAnalytics')
  final bool? clickAnalytics;

  /// Whether the current query will be taken into account in the Analytics.
  @JsonKey(name: r'analytics')
  final bool? analytics;

  /// List of tags to apply to the query for analytics purposes.
  @JsonKey(name: r'analyticsTags')
  final List<String>? analyticsTags;

  /// Whether to include or exclude a query from the processing-time percentile computation.
  @JsonKey(name: r'percentileComputation')
  final bool? percentileComputation;

  /// Whether this search should participate in running AB tests.
  @JsonKey(name: r'enableABTest')
  final bool? enableABTest;

  /// Whether this search should use AI Re-Ranking.
  @JsonKey(name: r'enableReRanking')
  final bool? enableReRanking;

  @JsonKey(name: r'reRankingApplyFilter')
  final dynamic reRankingApplyFilter;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BaseSearchParamsWithoutQuery &&
          other.similarQuery == similarQuery &&
          other.filters == filters &&
          other.facetFilters == facetFilters &&
          other.optionalFilters == optionalFilters &&
          other.numericFilters == numericFilters &&
          other.tagFilters == tagFilters &&
          other.sumOrFiltersScores == sumOrFiltersScores &&
          other.facets == facets &&
          other.maxValuesPerFacet == maxValuesPerFacet &&
          other.facetingAfterDistinct == facetingAfterDistinct &&
          other.sortFacetValuesBy == sortFacetValuesBy &&
          other.page == page &&
          other.offset == offset &&
          other.length == length &&
          other.aroundLatLng == aroundLatLng &&
          other.aroundLatLngViaIP == aroundLatLngViaIP &&
          other.aroundRadius == aroundRadius &&
          other.aroundPrecision == aroundPrecision &&
          other.minimumAroundRadius == minimumAroundRadius &&
          other.insideBoundingBox == insideBoundingBox &&
          other.insidePolygon == insidePolygon &&
          other.naturalLanguages == naturalLanguages &&
          other.ruleContexts == ruleContexts &&
          other.personalizationImpact == personalizationImpact &&
          other.userToken == userToken &&
          other.getRankingInfo == getRankingInfo &&
          other.clickAnalytics == clickAnalytics &&
          other.analytics == analytics &&
          other.analyticsTags == analyticsTags &&
          other.percentileComputation == percentileComputation &&
          other.enableABTest == enableABTest &&
          other.enableReRanking == enableReRanking &&
          other.reRankingApplyFilter == reRankingApplyFilter;

  @override
  int get hashCode =>
      similarQuery.hashCode +
      filters.hashCode +
      facetFilters.hashCode +
      optionalFilters.hashCode +
      numericFilters.hashCode +
      tagFilters.hashCode +
      sumOrFiltersScores.hashCode +
      facets.hashCode +
      maxValuesPerFacet.hashCode +
      facetingAfterDistinct.hashCode +
      sortFacetValuesBy.hashCode +
      page.hashCode +
      offset.hashCode +
      length.hashCode +
      aroundLatLng.hashCode +
      aroundLatLngViaIP.hashCode +
      aroundRadius.hashCode +
      aroundPrecision.hashCode +
      minimumAroundRadius.hashCode +
      insideBoundingBox.hashCode +
      insidePolygon.hashCode +
      naturalLanguages.hashCode +
      ruleContexts.hashCode +
      personalizationImpact.hashCode +
      userToken.hashCode +
      getRankingInfo.hashCode +
      clickAnalytics.hashCode +
      analytics.hashCode +
      analyticsTags.hashCode +
      percentileComputation.hashCode +
      enableABTest.hashCode +
      enableReRanking.hashCode +
      (reRankingApplyFilter == null ? 0 : reRankingApplyFilter.hashCode);

  factory BaseSearchParamsWithoutQuery.fromJson(Map<String, dynamic> json) =>
      _$BaseSearchParamsWithoutQueryFromJson(json);

  Map<String, dynamic> toJson() => _$BaseSearchParamsWithoutQueryToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
