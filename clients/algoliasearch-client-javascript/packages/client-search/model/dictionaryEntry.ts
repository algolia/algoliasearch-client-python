// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { DictionaryEntryState } from './dictionaryEntryState';

/**
 * Dictionary entry.
 */
export type DictionaryEntry = Record<string, any> & {
  /**
   * Unique identifier for a dictionary object.
   */
  objectID: string;

  /**
   * [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
   */
  language: string;

  /**
   * Dictionary entry word. Usage depends on the type of dictionary entry. **`stopwordEntry`** The stop word you want to add or update. If the entry already exists in Algolia\'s standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`. **`compoundEntry`** When `decomposition` is empty: adds `word` as a compound atom. For example, atom “kino” decomposes the query “kopfkino” into \"kopf\" and \"kino\". When `decomposition` isn\'t empty: creates a decomposition exception. For example, when decomposition is set to the [\"hund\", \"hutte\"] exception, \"hundehutte\" decomposes into “hund” and “hutte”, discarding the linking \"e\".
   */
  word?: string;

  /**
   * Compound dictionary [word declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/). If the entry already exists in Algolia\'s standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`.
   */
  words?: string[];

  /**
   * For compound entries, governs the behavior of the `word` parameter.
   */
  decomposition?: string[];

  state?: DictionaryEntryState;
};
