// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { AroundPrecision } from './aroundPrecision';
import type { AroundRadius } from './aroundRadius';
import type { FacetFilters } from './facetFilters';
import type { NumericFilters } from './numericFilters';
import type { OptionalFilters } from './optionalFilters';
import type { ReRankingApplyFilter } from './reRankingApplyFilter';
import type { TagFilters } from './tagFilters';

export type BaseSearchParamsWithoutQuery = {
  /**
   * Overrides the query parameter and performs a more generic search.
   */
  similarQuery?: string;

  /**
   * [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric, facet, or tag filters.
   */
  filters?: string;

  facetFilters?: FacetFilters;

  optionalFilters?: OptionalFilters;

  numericFilters?: NumericFilters;

  tagFilters?: TagFilters;

  /**
   * Determines how to calculate [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores). If `false`, maximum score is kept. If `true`, score is summed.
   */
  sumOrFiltersScores?: boolean;

  /**
   * Returns [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts), their facet values, and the number of matching facet values.
   */
  facets?: string[];

  /**
   * Maximum number of facet values to return for each facet.
   */
  maxValuesPerFacet?: number;

  /**
   * Forces faceting to be applied after [de-duplication](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/) (with the distinct feature). Alternatively, the `afterDistinct` [modifier](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) of `attributesForFaceting` allows for more granular control.
   */
  facetingAfterDistinct?: boolean;

  /**
   * Controls how facet values are fetched.
   */
  sortFacetValuesBy?: string;

  /**
   * Page to retrieve (the first page is `0`, not `1`).
   */
  page?: number;

  /**
   * Specifies the offset of the first hit to return. > **Note**: Using `page` and `hitsPerPage` is the recommended method for [paging results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you can use `offset` and `length` to implement [an alternative approach to paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
   */
  offset?: number;

  /**
   * Sets the number of hits to retrieve (for use with `offset`). > **Note**: Using `page` and `hitsPerPage` is the recommended method for [paging results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you can use `offset` and `length` to implement [an alternative approach to paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
   */
  length?: number;

  /**
   * Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point), enabling a geographical search within a circular area.
   */
  aroundLatLng?: string;

  /**
   * Search for entries around a location. The location is automatically computed from the requester\'s IP address.
   */
  aroundLatLngViaIP?: boolean;

  aroundRadius?: AroundRadius;

  aroundPrecision?: AroundPrecision;

  /**
   * Minimum radius (in meters) used for a geographical search when `aroundRadius` isn\'t set.
   */
  minimumAroundRadius?: number;

  /**
   * Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas) (in geographical coordinates).
   */
  insideBoundingBox?: number[];

  /**
   * Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas) (in geographical coordinates).
   */
  insidePolygon?: number[];

  /**
   * Changes the default values of parameters that work best for a natural language query, such as `ignorePlurals`, `removeStopWords`, `removeWordsIfNoResults`, `analyticsTags`, and `ruleContexts`. These parameters work well together when the query consists of fuller natural language strings instead of keywords, for example when processing voice search queries.
   */
  naturalLanguages?: string[];

  /**
   * Assigns [rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) to search queries.
   */
  ruleContexts?: string[];

  /**
   * Defines how much [Personalization affects results](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
   */
  personalizationImpact?: number;

  /**
   * Associates a [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/) with the current search.
   */
  userToken?: string;

  /**
   * Incidates whether the search response includes [detailed ranking information](https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/understanding-the-api-response/#ranking-information).
   */
  getRankingInfo?: boolean;

  /**
   * Indicates whether a query ID parameter is included in the search response. This is required for [tracking click and conversion events](https://www.algolia.com/doc/guides/sending-events/concepts/event-types/#events-related-to-algolia-requests).
   */
  clickAnalytics?: boolean;

  /**
   * Indicates whether this query will be included in [analytics](https://www.algolia.com/doc/guides/search-analytics/guides/exclude-queries/).
   */
  analytics?: boolean;

  /**
   * Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
   */
  analyticsTags?: string[];

  /**
   * Whether to include or exclude a query from the processing-time percentile computation.
   */
  percentileComputation?: boolean;

  /**
   * Incidates whether this search will be considered in A/B testing.
   */
  enableABTest?: boolean;

  /**
   * Indicates whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).
   */
  enableReRanking?: boolean;

  reRankingApplyFilter?: ReRankingApplyFilter | null;
};
