// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { AdvancedSyntaxFeatures } from './advancedSyntaxFeatures';
import type { AlternativesAsExact } from './alternativesAsExact';
import type { Distinct } from './distinct';
import type { ExactOnSingleWordQuery } from './exactOnSingleWordQuery';
import type { IgnorePlurals } from './ignorePlurals';
import type { Mode } from './mode';
import type { QueryType } from './queryType';
import type { ReRankingApplyFilter } from './reRankingApplyFilter';
import type { RemoveStopWords } from './removeStopWords';
import type { RemoveWordsIfNoResults } from './removeWordsIfNoResults';
import type { RenderingContent } from './renderingContent';
import type { SemanticSearch } from './semanticSearch';
import type { TypoTolerance } from './typoTolerance';

export type IndexSettingsAsSearchParams = {
  /**
   * Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/) and the [modifiers](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) that can be applied: `filterOnly`, `searchable`, and `afterDistinct`.
   */
  attributesForFaceting?: string[];

  /**
   * Attributes to include in the API response. To reduce the size of your response, you can retrieve only some of the attributes. By default, the response includes all attributes.
   */
  attributesToRetrieve?: string[];

  /**
   * Determines the order in which Algolia [returns your results](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).
   */
  ranking?: string[];

  /**
   * Specifies the [Custom ranking criterion](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Use the `asc` and `desc` modifiers to specify the ranking order: ascending or descending.
   */
  customRanking?: string[];

  /**
   * Relevancy threshold below which less relevant results aren\'t included in the results.
   */
  relevancyStrictness?: number;

  /**
   * Attributes to highlight. Strings that match the search query in the attributes are highlighted by surrounding them with HTML tags (`highlightPreTag` and `highlightPostTag`).
   */
  attributesToHighlight?: string[];

  /**
   * Attributes to _snippet_. \'Snippeting\' is shortening the attribute to a certain number of words. If not specified, the attribute is shortened to the 10 words around the matching string but you can specify the number. For example: `body:20`.
   */
  attributesToSnippet?: string[];

  /**
   * HTML string to insert before the highlighted parts in all highlight and snippet results.
   */
  highlightPreTag?: string;

  /**
   * HTML string to insert after the highlighted parts in all highlight and snippet results.
   */
  highlightPostTag?: string;

  /**
   * String used as an ellipsis indicator when a snippet is truncated.
   */
  snippetEllipsisText?: string;

  /**
   * Restrict highlighting and snippeting to items that matched the query.
   */
  restrictHighlightAndSnippetArrays?: boolean;

  /**
   * Number of hits per page.
   */
  hitsPerPage?: number;

  /**
   * Minimum number of characters a word in the query string must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
   */
  minWordSizefor1Typo?: number;

  /**
   * Minimum number of characters a word in the query string must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
   */
  minWordSizefor2Typos?: number;

  typoTolerance?: TypoTolerance;

  /**
   * Whether to allow typos on numbers (\"numeric tokens\") in the query string.
   */
  allowTyposOnNumericTokens?: boolean;

  /**
   * Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
   */
  disableTypoToleranceOnAttributes?: string[];

  ignorePlurals?: IgnorePlurals;

  removeStopWords?: RemoveStopWords;

  /**
   * Characters that the engine shouldn\'t automatically [normalize](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
   */
  keepDiacriticsOnCharacters?: string;

  /**
   * Sets your user\'s search language. This adjusts language-specific settings and features such as `ignorePlurals`, `removeStopWords`, and [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) word detection.
   */
  queryLanguages?: string[];

  /**
   * [Splits compound words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words) into their component word parts in the query.
   */
  decompoundQuery?: boolean;

  /**
   * Incidates whether [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/) are enabled.
   */
  enableRules?: boolean;

  /**
   * Incidates whether [Personalization](https://www.algolia.com/doc/guides/personalization/what-is-personalization/) is enabled.
   */
  enablePersonalization?: boolean;

  queryType?: QueryType;

  removeWordsIfNoResults?: RemoveWordsIfNoResults;

  mode?: Mode;

  semanticSearch?: SemanticSearch;

  /**
   * Enables the [advanced query syntax](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#advanced-syntax).
   */
  advancedSyntax?: boolean;

  /**
   * Words which should be considered [optional](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words) when found in a query.
   */
  optionalWords?: string[];

  /**
   * Attributes for which you want to [turn off the exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
   */
  disableExactOnAttributes?: string[];

  exactOnSingleWordQuery?: ExactOnSingleWordQuery;

  /**
   * Alternatives that should be considered an exact match by [the exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
   */
  alternativesAsExact?: AlternativesAsExact[];

  /**
   * Allows you to specify which advanced syntax features are active when `advancedSyntax` is enabled.
   */
  advancedSyntaxFeatures?: AdvancedSyntaxFeatures[];

  distinct?: Distinct;

  /**
   * Name of the deduplication attribute to be used with Algolia\'s [_distinct_ feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).
   */
  attributeForDistinct?: string;

  /**
   * Whether to highlight and snippet the original word that matches the synonym or the synonym itself.
   */
  replaceSynonymsInHighlight?: boolean;

  /**
   * Precision of the [proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity).
   */
  minProximity?: number;

  /**
   * Attributes to include in the API response for search and browse queries.
   */
  responseFields?: string[];

  /**
   * Maximum number of facet hits to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
   */
  maxFacetHits?: number;

  /**
   * Maximum number of facet values to return for each facet.
   */
  maxValuesPerFacet?: number;

  /**
   * Controls how facet values are fetched.
   */
  sortFacetValuesBy?: string;

  /**
   * When the [Attribute criterion is ranked above Proximity](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute-and-proximity-combinations) in your ranking formula, Proximity is used to select which searchable attribute is matched in the Attribute ranking stage.
   */
  attributeCriteriaComputedByMinProximity?: boolean;

  renderingContent?: RenderingContent;

  /**
   * Indicates whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).
   */
  enableReRanking?: boolean;

  reRankingApplyFilter?: ReRankingApplyFilter | null;
};
