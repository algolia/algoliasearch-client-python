SearchQuery:
  oneOf:
    - $ref: '#/SearchForHits'
    - $ref: '#/SearchForFacets'

SearchForHits:
  allOf:
    - $ref: '../../../common/schemas/SearchParams.yml#/searchParams'
    - $ref: '#/searchForHitsOptions'

SearchForFacets:
  allOf:
    - $ref: '../../../common/schemas/SearchParams.yml#/searchParams'
    - $ref: '#/searchForFacetsOptions'
  x-discriminator-fields:
    - facet
    - type

searchForFacetsOptions:
  type: object
  properties:
    facet:
      type: string
      description: Facet name.
    indexName:
      $ref: '../../../common/parameters.yml#/indexName'
    facetQuery:
      $ref: '#/facetQuery'
    maxFacetHits:
      $ref: '../../../common/schemas/IndexSettings.yml#/maxFacetHits'
    type:
      $ref: '#/searchTypeFacet'
  required:
    - indexName
    - type
    - facet

facetQuery:
  type: string
  description: Text to search inside the facet's values.
  example: 'george'
  default: ''

searchForHitsOptions:
  # We provide this option because TypeScript can't distinguish union with optional keys
  # if they are not completely the same, see usage in `templates/javascript/model.mustache`
  x-is-SearchForHitsOptions: true
  type: object
  properties:
    indexName:
      $ref: '../../../common/parameters.yml#/indexName'
    type:
      $ref: '#/searchTypeDefault'
  required:
    - indexName

searchTypeFacet:
  type: string
  enum: [facet]
  default: facet
  description: >
    - `default`: perform a search query
    - `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).

searchTypeDefault:
  type: string
  enum: [default]
  default: default
  description: >
    - `default`: perform a search query
    - `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
