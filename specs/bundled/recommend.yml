openapi: 3.0.2
info:
  title: Recommend API
  description: >-
    The Recommend API lets you generate recommendations with several AI models.


    > **Note**: You should use Algolia's [libraries and
    tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/)
    to interact with the Recommend API. Using the HTTP endpoints directly is not
    covered by the [SLA](https://www.algolia.com/policies/sla/).
  version: 1.0.0
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    IndexName:
      name: indexName
      in: path
      description: Index on which to perform the request.
      required: true
      schema:
        type: string
        example: myIndexName
    Models:
      in: path
      name: model
      required: true
      description: >
        [Recommend
        models](https://www.algolia.com/doc/guides/algolia-recommend/overview/#recommend-models).
      schema:
        $ref: '#/components/schemas/recommendModels'
    ObjectID:
      name: objectID
      in: path
      description: Unique record (object) identifier.
      required: true
      schema:
        type: string
        example: '123'
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    facetName:
      type: string
      description: Facet name for trending models.
    trendingItemsModel:
      description: Trending items model.
      type: string
      enum:
        - trending-items
    query:
      type: string
      description: Text to search for in an index.
      default: ''
      x-categories:
        - Search
    searchParamsQuery:
      type: object
      additionalProperties: false
      properties:
        query:
          $ref: '#/components/schemas/query'
    filters:
      type: string
      description: >
        [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/)
        the query with numeric, facet, or tag filters.
      example: (category:Book OR category:Ebook) AND _tags:published
      default: ''
      x-categories:
        - Filtering
    searchFiltersArrayString:
      type: array
      items:
        type: string
    mixedSearchFilters:
      oneOf:
        - $ref: '#/components/schemas/searchFiltersArrayString'
        - type: string
    listOfSearchFilters:
      type: array
      items:
        $ref: '#/components/schemas/mixedSearchFilters'
    facetFilters:
      description: >
        [Filter hits by facet
        value](https://www.algolia.com/doc/api-reference/api-parameters/facetFilters/).
      example:
        - category:Book
        - author:John Doe
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    optionalFilters:
      description: >
        Create filters to boost or demote records. 


        Records that match the filter are ranked higher for positive and lower
        for negative optional filters. In contrast to regular filters, records
        that don't match the optional filter are still included in the results,
        only their ranking is affected.
      example:
        - category:Book
        - author:John Doe
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    numericFilters:
      description: >
        [Filter on numeric
        attributes](https://www.algolia.com/doc/api-reference/api-parameters/numericFilters/).
      example:
        -
          - inStock = 1
          - deliveryDate < 1441755506
        - price < 1000
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    tagFilters:
      description: >
        [Filter hits by
        tags](https://www.algolia.com/doc/api-reference/api-parameters/tagFilters/).
      example:
        -
          - Book
          - Movie
        - SciFi
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    page:
      type: integer
      description: Page to retrieve (the first page is `0`, not `1`).
      default: 0
      x-categories:
        - Pagination
    aroundLatLng:
      type: string
      description: >-
        Search for entries [around a central
        location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),
        enabling a geographical search within a circular area.
      example: 40.71,-74.01
      default: ''
      x-categories:
        - Geo-Search
    aroundLatLngViaIP:
      type: boolean
      description: >-
        Search for entries around a location. The location is automatically
        computed from the requester's IP address.
      default: false
      x-categories:
        - Geo-Search
    aroundRadiusAll:
      type: string
      enum:
        - all
    aroundRadius:
      description: >
        [Maximum
        radius](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#increase-the-search-radius)
        for a geographical search (in meters).
      oneOf:
        - type: integer
          minimum: 1
        - $ref: '#/components/schemas/aroundRadiusAll'
      x-categories:
        - Geo-Search
    aroundPrecisionFromValue:
      description: >-
        Precision of a geographical search (in meters), to [group results that
        are more or less the same distance from a central
        point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/).
      type: array
      items:
        type: object
        properties:
          from:
            type: integer
          value:
            type: integer
    aroundPrecision:
      description: >-
        Precision of a geographical search (in meters), to [group results that
        are more or less the same distance from a central
        point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/).
      oneOf:
        - type: integer
          default: 10
        - $ref: '#/components/schemas/aroundPrecisionFromValue'
      x-categories:
        - Geo-Search
    insideBoundingBox:
      type: array
      items:
        type: number
        format: double
      description: >-
        Search inside a [rectangular
        area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
        (in geographical coordinates).
      example:
        - 46.650828100116044
        - 7.123046875
        - 45.17210966999772
        - 1.009765625
      x-categories:
        - Geo-Search
    insidePolygon:
      type: array
      items:
        type: number
        format: double
      description: >-
        Search inside a
        [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
        (in geographical coordinates).
      example:
        - 46.650828100116044
        - 7.123046875
        - 45.17210966999772
        - 1.009765625
        - 49.62625916704081
        - 4.6181640625
      x-categories:
        - Geo-Search
    baseSearchParamsWithoutQuery:
      type: object
      additionalProperties: false
      properties:
        similarQuery:
          type: string
          description: Overrides the query parameter and performs a more generic search.
          default: ''
          x-categories:
            - Search
        filters:
          $ref: '#/components/schemas/filters'
        facetFilters:
          $ref: '#/components/schemas/facetFilters'
        optionalFilters:
          $ref: '#/components/schemas/optionalFilters'
        numericFilters:
          $ref: '#/components/schemas/numericFilters'
        tagFilters:
          $ref: '#/components/schemas/tagFilters'
        sumOrFiltersScores:
          type: boolean
          description: >
            Determines how to calculate [filter
            scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).

            If `false`, maximum score is kept.

            If `true`, score is summed.
          default: false
          x-categories:
            - Filtering
        restrictSearchableAttributes:
          type: array
          items:
            type: string
          example:
            - title
            - author
          description: >-
            Restricts a query to only look at a subset of your [searchable
            attributes](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/).
          default: []
          x-categories:
            - Filtering
        facets:
          type: array
          items:
            type: string
          description: >-
            Returns
            [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts),
            their facet values, and the number of matching facet values.
          default: []
          x-categories:
            - Faceting
        facetingAfterDistinct:
          type: boolean
          description: >
            Forces faceting to be applied after
            [de-duplication](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/)
            (with the distinct feature). Alternatively, the `afterDistinct`
            [modifier](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers)
            of `attributesForFaceting` allows for more granular control.
          default: false
          x-categories:
            - Faceting
        page:
          $ref: '#/components/schemas/page'
        offset:
          type: integer
          description: >
            Specifies the offset of the first hit to return.

            > **Note**: Using `page` and `hitsPerPage` is the recommended method
            for [paging
            results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/).
            However, you can use `offset` and `length` to implement [an
            alternative approach to
            paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
          x-categories:
            - Pagination
        length:
          type: integer
          description: >
            Sets the number of hits to retrieve (for use with `offset`).

            > **Note**: Using `page` and `hitsPerPage` is the recommended method
            for [paging
            results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/).
            However, you can use `offset` and `length` to implement [an
            alternative approach to
            paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
          minimum: 1
          maximum: 1000
          x-categories:
            - Pagination
        aroundLatLng:
          $ref: '#/components/schemas/aroundLatLng'
        aroundLatLngViaIP:
          $ref: '#/components/schemas/aroundLatLngViaIP'
        aroundRadius:
          $ref: '#/components/schemas/aroundRadius'
        aroundPrecision:
          $ref: '#/components/schemas/aroundPrecision'
        minimumAroundRadius:
          type: integer
          description: >-
            Minimum radius (in meters) used for a geographical search when
            `aroundRadius` isn't set.
          minimum: 1
          x-categories:
            - Geo-Search
        insideBoundingBox:
          $ref: '#/components/schemas/insideBoundingBox'
        insidePolygon:
          $ref: '#/components/schemas/insidePolygon'
        naturalLanguages:
          type: array
          items:
            type: string
          description: >-
            Changes the default values of parameters that work best for a
            natural language query, such as `ignorePlurals`, `removeStopWords`,
            `removeWordsIfNoResults`, `analyticsTags`, and `ruleContexts`. These
            parameters work well together when the query consists of fuller
            natural language strings instead of keywords, for example when
            processing voice search queries.
          default: []
          x-categories:
            - Languages
        ruleContexts:
          type: array
          items:
            type: string
          description: >-
            Assigns [rule
            contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)
            to search queries.
          default: []
          x-categories:
            - Rules
        personalizationImpact:
          type: integer
          description: >-
            Defines how much [Personalization affects
            results](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
          default: 100
          x-categories:
            - Personalization
        userToken:
          type: string
          description: >-
            Associates a [user
            token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/)
            with the current search.
          example: '123456'
          x-categories:
            - Personalization
        getRankingInfo:
          type: boolean
          description: >-
            Incidates whether the search response includes [detailed ranking
            information](https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/understanding-the-api-response/#ranking-information).
          default: false
          x-categories:
            - Advanced
        explain:
          type: array
          items:
            type: string
          description: >-
            Enriches the API's response with information about how the query was
            processed.
          default: []
          x-categories:
            - Advanced
        synonyms:
          type: boolean
          description: >-
            Whether to take into account an index's synonyms for a particular
            search.
          default: true
          x-categories:
            - Advanced
        clickAnalytics:
          type: boolean
          description: >-
            Indicates whether a query ID parameter is included in the search
            response. This is required for [tracking click and conversion
            events](https://www.algolia.com/doc/guides/sending-events/concepts/event-types/#events-related-to-algolia-requests).
          default: false
          x-categories:
            - Analytics
        analytics:
          type: boolean
          description: >-
            Indicates whether this query will be included in
            [analytics](https://www.algolia.com/doc/guides/search-analytics/guides/exclude-queries/).
          default: true
          x-categories:
            - Analytics
        analyticsTags:
          type: array
          items:
            type: string
          description: >-
            Tags to apply to the query for [segmenting analytics
            data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
          default: []
          x-categories:
            - Analytics
        percentileComputation:
          type: boolean
          description: >-
            Whether to include or exclude a query from the processing-time
            percentile computation.
          default: true
          x-categories:
            - Advanced
        enableABTest:
          type: boolean
          description: Incidates whether this search will be considered in A/B testing.
          default: true
          x-categories:
            - Advanced
    baseSearchParams:
      allOf:
        - $ref: '#/components/schemas/searchParamsQuery'
        - $ref: '#/components/schemas/baseSearchParamsWithoutQuery'
    hitsPerPage:
      type: integer
      description: Number of hits per page.
      default: 20
      minimum: 1
      maximum: 1000
      x-categories:
        - Pagination
    typoToleranceEnum:
      type: string
      enum:
        - min
        - strict
    typoTolerance:
      description: >-
        Controls whether [typo
        tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/)
        is enabled and how it is applied.
      oneOf:
        - type: boolean
          default: true
        - $ref: '#/components/schemas/typoToleranceEnum'
      x-categories:
        - Typos
    ignorePlurals:
      description: >
        Treats singular, plurals, and other forms of declensions as matching
        terms.

        `ignorePlurals` is used in conjunction with the `queryLanguages`
        setting.

        _list_: language ISO codes for which ignoring plurals should be enabled.
        This list will override any values that you may have set in
        `queryLanguages`. _true_: enables the ignore plurals feature, where
        singulars and plurals are considered equivalent ("foot" = "feet"). The
        languages supported here are either [every
        language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)
        (this is the default) or those set by `queryLanguages`. _false_: turns
        off the ignore plurals feature, so that singulars and plurals aren't
        considered to be the same ("foot" will not find "feet").
      example:
        - ca
        - es
      oneOf:
        - type: array
          items:
            type: string
        - type: boolean
          default: false
      x-categories:
        - Languages
    removeStopWords:
      description: >
        Removes stop (common) words from the query before executing it.

        `removeStopWords` is used in conjunction with the `queryLanguages`
        setting.

        _list_: language ISO codes for which stop words should be enabled. This
        list will override any values that you may have set in `queryLanguages`.
        _true_: enables the stop words feature, ensuring that stop words are
        removed from consideration in a search. The languages supported here are
        either [every
        language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)
        (this is the default) or those set by `queryLanguages`. _false_: turns
        off the stop words feature, allowing stop words to be taken into account
        in a search.
      example:
        - ca
        - es
      oneOf:
        - type: array
          items:
            type: string
        - type: boolean
          default: false
      x-categories:
        - Languages
    queryType:
      type: string
      enum:
        - prefixLast
        - prefixAll
        - prefixNone
      description: >-
        Determines how query words are [interpreted as
        prefixes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/prefix-searching/).
      default: prefixLast
      x-categories:
        - Query strategy
    removeWordsIfNoResults:
      type: string
      enum:
        - none
        - lastWords
        - firstWords
        - allOptional
      example: firstWords
      description: >-
        Strategy to [remove
        words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/in-depth/why-use-remove-words-if-no-results/)
        from the query when it doesn't match any hits.
      default: none
      x-categories:
        - Query strategy
    mode:
      type: string
      enum:
        - neuralSearch
        - keywordSearch
      description: Search mode the index will use to query for results.
      default: keywordSearch
      x-categories:
        - Query strategy
    semanticSearch:
      type: object
      description: >
        Settings for the semantic search part of NeuralSearch. Only used when
        `mode` is _neuralSearch_.
      properties:
        eventSources:
          description: >-
            Indices from which to collect click and conversion events. If null,
            the current index and replica group will be used as the event
            source.
          nullable: true
          type: array
          items:
            type: string
    exactOnSingleWordQuery:
      type: string
      enum:
        - attribute
        - none
        - word
      description: >-
        Determines how the [Exact ranking
        criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes)
        is computed when the query contains only one word.
      default: attribute
      x-categories:
        - Query strategy
    alternativesAsExact:
      type: string
      enum:
        - ignorePlurals
        - singleWordSynonym
        - multiWordsSynonym
      x-categories:
        - Query strategy
    advancedSyntaxFeatures:
      type: string
      enum:
        - exactPhrase
        - excludeWords
      x-categories:
        - Query strategy
    distinct:
      description: >-
        Enables [deduplication or grouping of results (Algolia's _distinct_
        feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature)).
      example: 1
      oneOf:
        - type: boolean
        - type: integer
          minimum: 0
          maximum: 4
          default: 0
      x-categories:
        - Advanced
    maxFacetHits:
      type: integer
      description: >-
        Maximum number of facet hits to return when [searching for facet
        values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
      maximum: 100
      default: 10
      x-categories:
        - Advanced
    order:
      description: Pinned order of facet lists.
      type: array
      items:
        type: string
    facets:
      description: Ordering of facets (widgets).
      type: object
      additionalProperties: false
      properties:
        order:
          $ref: '#/components/schemas/order'
    sortRemainingBy:
      description: |
        How to display the remaining items:

          - `count`: facet count (descending).
          - `alpha`: alphabetical (ascending).
          - `hidden`: show only pinned values.
      type: string
      enum:
        - count
        - alpha
        - hidden
    value:
      type: object
      additionalProperties: false
      properties:
        order:
          $ref: '#/components/schemas/order'
        sortRemainingBy:
          $ref: '#/components/schemas/sortRemainingBy'
    values:
      description: Ordering of facet values within an individual facet.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/value'
    facetOrdering:
      description: Defines the ordering of facets (widgets).
      type: object
      additionalProperties: false
      properties:
        facets:
          $ref: '#/components/schemas/facets'
        values:
          $ref: '#/components/schemas/values'
    renderingContent:
      description: >-
        Extra content for the search UI, for example, to control the [ordering
        and display of
        facets](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/merchandising-facets/#merchandise-facets-and-their-values-in-the-manual-editor).
        You can set a default value and dynamically override it with
        [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/).
      type: object
      additionalProperties: false
      properties:
        facetOrdering:
          $ref: '#/components/schemas/facetOrdering'
      x-categories:
        - Advanced
    reRankingApplyFilter:
      description: >-
        When [Dynamic
        Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/)
        is enabled, only records that match these filters will be affected by
        Dynamic Re-Ranking.
      nullable: true
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
          x-categories:
            - Filtering
    indexSettingsAsSearchParams:
      type: object
      additionalProperties: false
      properties:
        attributesForFaceting:
          type: array
          items:
            type: string
          example:
            - author
            - filterOnly(isbn)
            - searchable(edition)
            - afterDistinct(category)
            - afterDistinct(searchable(publisher))
          description: >
            Attributes used for
            [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/)
            and the
            [modifiers](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers)
            that can be applied: `filterOnly`, `searchable`, and
            `afterDistinct`.
          default: []
          x-categories:
            - Faceting
        attributesToRetrieve:
          type: array
          items:
            type: string
          example:
            - author
            - title
            - content
          description: >-
            Attributes to include in the API response. To reduce the size of
            your response, you can retrieve only some of the attributes. By
            default, the response includes all attributes.
          default:
            - '*'
          x-categories:
            - Attributes
        ranking:
          type: array
          items:
            type: string
          description: >-
            Determines the order in which Algolia [returns your
            results](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).
          default:
            - typo
            - geo
            - words
            - filters
            - proximity
            - attribute
            - exact
            - custom
          x-categories:
            - Ranking
        customRanking:
          type: array
          items:
            type: string
          example:
            - desc(popularity)
            - asc(price)
          description: >
            Specifies the [Custom ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/).
            Use the `asc` and `desc` modifiers to specify the ranking order:
            ascending or descending.
          default: []
          x-categories:
            - Ranking
        relevancyStrictness:
          type: integer
          example: 90
          description: >-
            Relevancy threshold below which less relevant results aren't
            included in the results.
          default: 100
          x-categories:
            - Ranking
        attributesToHighlight:
          type: array
          items:
            type: string
          example:
            - author
            - title
            - content
          description: >-
            Attributes to highlight. Strings that match the search query in the
            attributes are highlighted by surrounding them with HTML tags
            (`highlightPreTag` and `highlightPostTag`).
          x-categories:
            - Highlighting and Snippeting
        attributesToSnippet:
          type: array
          items:
            type: string
          example:
            - content:80
            - description
          description: >
            Attributes to _snippet_. 'Snippeting' is shortening the attribute to
            a certain number of words. If not specified, the attribute is
            shortened to the 10 words around the matching string but you can
            specify the number. For example: `body:20`.
          default: []
          x-categories:
            - Highlighting and Snippeting
        highlightPreTag:
          type: string
          description: >-
            HTML string to insert before the highlighted parts in all highlight
            and snippet results.
          default: <em>
          x-categories:
            - Highlighting and Snippeting
        highlightPostTag:
          type: string
          description: >-
            HTML string to insert after the highlighted parts in all highlight
            and snippet results.
          default: </em>
          x-categories:
            - Highlighting and Snippeting
        snippetEllipsisText:
          type: string
          description: String used as an ellipsis indicator when a snippet is truncated.
          default: …
          x-categories:
            - Highlighting and Snippeting
        restrictHighlightAndSnippetArrays:
          type: boolean
          description: >-
            Restrict highlighting and snippeting to items that matched the
            query.
          default: false
          x-categories:
            - Highlighting and Snippeting
        hitsPerPage:
          $ref: '#/components/schemas/hitsPerPage'
        minWordSizefor1Typo:
          type: integer
          description: >-
            Minimum number of characters a word in the query string must contain
            to accept matches with [one
            typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
          default: 4
          x-categories:
            - Typos
        minWordSizefor2Typos:
          type: integer
          description: >-
            Minimum number of characters a word in the query string must contain
            to accept matches with [two
            typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
          default: 8
          x-categories:
            - Typos
        typoTolerance:
          $ref: '#/components/schemas/typoTolerance'
        allowTyposOnNumericTokens:
          type: boolean
          description: >-
            Whether to allow typos on numbers ("numeric tokens") in the query
            string.
          default: true
          x-categories:
            - Typos
        disableTypoToleranceOnAttributes:
          type: array
          items:
            type: string
          example:
            - sku
          description: >-
            Attributes for which you want to turn off [typo
            tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
          default: []
          x-categories:
            - Typos
        ignorePlurals:
          $ref: '#/components/schemas/ignorePlurals'
        removeStopWords:
          $ref: '#/components/schemas/removeStopWords'
        keepDiacriticsOnCharacters:
          type: string
          example: øé
          description: >-
            Characters that the engine shouldn't automatically
            [normalize](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
          default: ''
          x-categories:
            - Languages
        queryLanguages:
          type: array
          items:
            type: string
          example:
            - es
          description: >-
            Sets your user's search language. This adjusts language-specific
            settings and features such as `ignorePlurals`, `removeStopWords`,
            and
            [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk)
            word detection.
          default: []
          x-categories:
            - Languages
        decompoundQuery:
          type: boolean
          description: >
            [Splits compound
            words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words)
            into their component word parts in the query.
          default: true
          x-categories:
            - Languages
        enableRules:
          type: boolean
          description: >-
            Incidates whether
            [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/)
            are enabled.
          default: true
          x-categories:
            - Rules
        enablePersonalization:
          type: boolean
          description: >-
            Incidates whether
            [Personalization](https://www.algolia.com/doc/guides/personalization/what-is-personalization/)
            is enabled.
          default: false
          x-categories:
            - Personalization
        queryType:
          $ref: '#/components/schemas/queryType'
        removeWordsIfNoResults:
          $ref: '#/components/schemas/removeWordsIfNoResults'
        mode:
          $ref: '#/components/schemas/mode'
        semanticSearch:
          $ref: '#/components/schemas/semanticSearch'
        advancedSyntax:
          type: boolean
          description: >-
            Enables the [advanced query
            syntax](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#advanced-syntax).
          default: false
          x-categories:
            - Query strategy
        optionalWords:
          type: array
          items:
            type: string
          example:
            - blue
            - iphone case
          description: >-
            Words which should be considered
            [optional](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words)
            when found in a query.
          default: []
          x-categories:
            - Query strategy
        disableExactOnAttributes:
          type: array
          items:
            type: string
          example:
            - description
          description: >-
            Attributes for which you want to [turn off the exact ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
          default: []
          x-categories:
            - Query strategy
        exactOnSingleWordQuery:
          $ref: '#/components/schemas/exactOnSingleWordQuery'
        alternativesAsExact:
          type: array
          items:
            $ref: '#/components/schemas/alternativesAsExact'
          description: >-
            Alternatives that should be considered an exact match by [the exact
            ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
          default:
            - ignorePlurals
            - singleWordSynonym
          x-categories:
            - Query strategy
        advancedSyntaxFeatures:
          type: array
          items:
            $ref: '#/components/schemas/advancedSyntaxFeatures'
          description: >-
            Allows you to specify which advanced syntax features are active when
            `advancedSyntax` is enabled.
          default:
            - exactPhrase
            - excludeWords
          x-categories:
            - Query strategy
        distinct:
          $ref: '#/components/schemas/distinct'
        attributeForDistinct:
          description: >-
            Name of the deduplication attribute to be used with Algolia's
            [_distinct_
            feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).
          example: url
          type: string
        replaceSynonymsInHighlight:
          type: boolean
          description: >-
            Whether to highlight and snippet the original word that matches the
            synonym or the synonym itself.
          default: false
          x-categories:
            - Highlighting and Snippeting
        minProximity:
          type: integer
          minimum: 1
          maximum: 7
          description: >-
            Precision of the [proximity ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity).
          default: 1
          x-categories:
            - Advanced
        responseFields:
          type: array
          items:
            type: string
          description: >-
            Attributes to include in the API response for search and browse
            queries.
          default: []
          x-categories:
            - Advanced
        maxFacetHits:
          $ref: '#/components/schemas/maxFacetHits'
        maxValuesPerFacet:
          type: integer
          description: Maximum number of facet values to return for each facet.
          default: 100
          x-categories:
            - Faceting
        sortFacetValuesBy:
          type: string
          description: Controls how facet values are fetched.
          default: count
          x-categories:
            - Faceting
        attributeCriteriaComputedByMinProximity:
          type: boolean
          description: >-
            When the [Attribute criterion is ranked above
            Proximity](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute-and-proximity-combinations)
            in your ranking formula, Proximity is used to select which
            searchable attribute is matched in the Attribute ranking stage.
          default: false
          x-categories:
            - Advanced
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
        enableReRanking:
          type: boolean
          description: >-
            Indicates whether this search will use [Dynamic
            Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).
          default: true
          x-categories:
            - Filtering
        reRankingApplyFilter:
          $ref: '#/components/schemas/reRankingApplyFilter'
    searchParamsObject:
      allOf:
        - $ref: '#/components/schemas/baseSearchParams'
        - $ref: '#/components/schemas/indexSettingsAsSearchParams'
    indexName:
      type: string
      example: products
      description: Algolia index name.
    baseRecommendRequest:
      type: object
      additionalProperties: false
      properties:
        indexName:
          $ref: '#/components/schemas/indexName'
        threshold:
          type: integer
          minimum: 0
          maximum: 100
          description: >
            Recommendations with a confidence score lower than `threshold` won't
            appear in results.

            > **Note**: Each recommendation has a confidence score of 0 to 100.
            The closer the score is to 100, the more relevant the
            recommendations are.
        maxRecommendations:
          type: integer
          default: 0
          description: >-
            Maximum number of recommendations to retrieve. If 0, all
            recommendations will be returned.
      required:
        - indexName
    trendingItemsQuery:
      allOf:
        - type: object
          title: baseTrendingItemsQuery
          additionalProperties: false
          properties:
            facetName:
              $ref: '#/components/schemas/facetName'
            facetValue:
              type: string
              description: Facet value for trending models.
            model:
              $ref: '#/components/schemas/trendingItemsModel'
            queryParameters:
              $ref: '#/components/schemas/searchParamsObject'
            fallbackParameters:
              $ref: '#/components/schemas/searchParamsObject'
        - $ref: '#/components/schemas/baseRecommendRequest'
    trendingFacetsModel:
      description: Trending facets model.
      type: string
      enum:
        - trending-facets
    trendingFacetsQuery:
      allOf:
        - type: object
          title: baseTrendingFacetsQuery
          additionalProperties: false
          properties:
            facetName:
              $ref: '#/components/schemas/facetName'
            model:
              $ref: '#/components/schemas/trendingFacetsModel'
          required:
            - facetName
        - $ref: '#/components/schemas/baseRecommendRequest'
    recommendationModels:
      description: Recommendation model.
      type: string
      enum:
        - related-products
        - bought-together
    objectID:
      type: string
      description: Unique object identifier.
      example: product-1
    recommendationsQuery:
      allOf:
        - type: object
          title: baseRecommendationsQuery
          additionalProperties: false
          properties:
            model:
              $ref: '#/components/schemas/recommendationModels'
            objectID:
              $ref: '#/components/schemas/objectID'
            queryParameters:
              $ref: '#/components/schemas/searchParamsObject'
            fallbackParameters:
              $ref: '#/components/schemas/searchParamsObject'
          required:
            - model
            - objectID
        - $ref: '#/components/schemas/baseRecommendRequest'
    recommendationsRequest:
      oneOf:
        - $ref: '#/components/schemas/trendingItemsQuery'
        - $ref: '#/components/schemas/trendingFacetsQuery'
        - $ref: '#/components/schemas/recommendationsQuery'
    nbHits:
      type: integer
      description: Number of hits the search query matched.
      example: 20
    nbPages:
      type: integer
      description: Number of pages of results for the current query.
      example: 1
    RedirectRuleIndexMetadata:
      type: object
      properties:
        source:
          type: string
          description: Source index for the redirect rule.
        dest:
          type: string
          description: Destination index for the redirect rule.
        reason:
          type: string
          description: Reason for the redirect rule.
        succeed:
          type: boolean
          description: Redirect rule status.
        data:
          type: object
          description: Redirect rule data.
          required:
            - ruleObjectID
          properties:
            ruleObjectID:
              type: string
      required:
        - data
        - succeed
        - reason
        - dest
        - source
    userData:
      example:
        settingID: f2a7b51e3503acc6a39b3784ffb84300
        pluginVersion: 1.6.0
      description: Lets you store custom data in your indices.
      default: {}
      x-categories:
        - Advanced
    baseSearchResponse:
      type: object
      additionalProperties: false
      required:
        - nbHits
        - page
        - nbPages
        - hitsPerPage
        - processingTimeMS
      properties:
        abTestID:
          type: integer
          description: >-
            A/B test ID. This is only included in the response for indices that
            are part of an A/B test.
        abTestVariantID:
          type: integer
          minimum: 1
          description: >-
            Variant ID. This is only included in the response for indices that
            are part of an A/B test.
        aroundLatLng:
          type: string
          description: Computed geographical location.
          example: 40.71,-74.01
          pattern: ^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$
        automaticRadius:
          type: string
          description: Automatically-computed radius.
        exhaustiveFacetsCount:
          type: boolean
          description: >-
            Indicates whether the facet count is exhaustive (exact) or
            approximate.
        exhaustiveNbHits:
          type: boolean
          description: >-
            Indicates whether the number of hits `nbHits` is exhaustive (exact)
            or approximate.
        exhaustiveTypo:
          type: boolean
          description: >-
            Indicates whether the search for typos was exhaustive (exact) or
            approximate.
        facets:
          title: facets
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: integer
          description: Mapping of each facet name to the corresponding facet counts.
          example:
            category:
              food: 1
              tech: 42
        facets_stats:
          title: facetsStats
          type: object
          description: Statistics for numerical facets.
          additionalProperties:
            type: object
            title: facetStats
            properties:
              min:
                type: number
                format: double
                description: Minimum value in the results.
              max:
                type: number
                format: double
                description: Maximum value in the results.
              avg:
                type: number
                format: double
                description: Average facet value in the results.
              sum:
                type: number
                format: double
                description: Sum of all values in the results.
        hitsPerPage:
          $ref: '#/components/schemas/hitsPerPage'
        index:
          type: string
          example: indexName
          description: Index name used for the query.
        indexUsed:
          type: string
          description: >-
            Index name used for the query. During A/B testing, the targeted
            index isn't always the index used by the query.
          example: indexNameAlt
        message:
          type: string
          description: Warnings about the query.
        nbHits:
          $ref: '#/components/schemas/nbHits'
        nbPages:
          $ref: '#/components/schemas/nbPages'
        nbSortedHits:
          type: integer
          description: Number of hits selected and sorted by the relevant sort algorithm.
          example: 20
        page:
          $ref: '#/components/schemas/page'
        redirect:
          type: object
          description: >
            [Redirect results to a
            URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/).
          properties:
            index:
              type: array
              items:
                $ref: '#/components/schemas/RedirectRuleIndexMetadata'
        parsedQuery:
          type: string
          description: >-
            Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean)
            query string that will be searched.
          example: george clo
        processingTimeMS:
          type: integer
          description: Time the server took to process the request, in milliseconds.
          example: 20
        queryAfterRemoval:
          type: string
          description: >-
            Markup text indicating which parts of the original query have been
            removed to retrieve a non-empty result set.
        serverUsed:
          type: string
          description: Host name of the server that processed the request.
          example: c2-uk-3.algolia.net
        userData:
          $ref: '#/components/schemas/userData'
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
    highlightedValue:
      type: string
      description: Markup text with `facetQuery` matches highlighted.
      example: <em>George</em> <em>Clo</em>oney
    matchLevel:
      type: string
      description: Indicates how well the attribute matched the search query.
      enum:
        - none
        - partial
        - full
    highlightResultOption:
      type: object
      description: Show highlighted section and words matched on a query.
      additionalProperties: false
      properties:
        value:
          $ref: '#/components/schemas/highlightedValue'
        matchLevel:
          $ref: '#/components/schemas/matchLevel'
        matchedWords:
          type: array
          description: List of words from the query that matched the object.
          example:
            - action
          items:
            type: string
        fullyHighlighted:
          type: boolean
          description: Whether the entire attribute value is highlighted.
      required:
        - value
        - matchLevel
        - matchedWords
    highlightResult:
      oneOf:
        - $ref: '#/components/schemas/highlightResultOption'
        - type: array
          items:
            $ref: '#/components/schemas/highlightResultOption'
    highlightResultMap:
      type: object
      description: Show highlighted section and words matched on a query.
      additionalProperties:
        $ref: '#/components/schemas/highlightResult'
    snippetResultOption:
      type: object
      description: >-
        Snippeted attributes show parts of the matched attributes. Only returned
        when attributesToSnippet is non-empty.
      additionalProperties: false
      properties:
        value:
          $ref: '#/components/schemas/highlightedValue'
        matchLevel:
          $ref: '#/components/schemas/matchLevel'
      required:
        - value
        - matchLevel
    snippetResult:
      oneOf:
        - $ref: '#/components/schemas/snippetResultOption'
        - type: array
          items:
            $ref: '#/components/schemas/snippetResultOption'
    snippetResultMap:
      type: object
      description: >-
        Snippeted attributes show parts of the matched attributes. Only returned
        when attributesToSnippet is non-empty.
      additionalProperties:
        $ref: '#/components/schemas/snippetResult'
    matchedGeoLocation:
      type: object
      properties:
        lat:
          type: number
          format: double
          description: Latitude of the matched location.
        lng:
          type: number
          format: double
          description: Longitude of the matched location.
        distance:
          type: integer
          description: >-
            Distance between the matched location and the search location (in
            meters).
    personalization:
      type: object
      properties:
        filtersScore:
          type: integer
          description: The score of the filters.
        rankingScore:
          type: integer
          description: The score of the ranking.
        score:
          type: integer
          description: The score of the event.
    rankingInfo:
      type: object
      additionalProperties: false
      properties:
        filters:
          type: integer
          description: This field is reserved for advanced usage.
        firstMatchedWord:
          type: integer
          description: >-
            Position of the most important matched attribute in the attributes
            to index list.
        geoDistance:
          type: integer
          description: >-
            Distance between the geo location in the search query and the best
            matching geo location in the record, divided by the geo precision
            (in meters).
        geoPrecision:
          type: integer
          description: Precision used when computing the geo distance, in meters.
        matchedGeoLocation:
          $ref: '#/components/schemas/matchedGeoLocation'
        personalization:
          $ref: '#/components/schemas/personalization'
        nbExactWords:
          type: integer
          description: Number of exactly matched words.
        nbTypos:
          type: integer
          description: Number of typos encountered when matching the record.
        promoted:
          type: boolean
          description: Present and set to true if a Rule promoted the hit.
        proximityDistance:
          type: integer
          description: >-
            When the query contains more than one word, the sum of the distances
            between matched words (in meters).
        userScore:
          type: integer
          description: Custom ranking for the object, expressed as a single integer value.
        words:
          type: integer
          description: Number of matched words, including prefixes and typos.
        promotedByReRanking:
          type: boolean
          description: Wether the record are promoted by the re-ranking strategy.
      required:
        - promoted
        - nbTypos
        - firstMatchedWord
        - geoDistance
        - nbExactWords
        - words
        - filters
        - userScore
    _distinctSeqID:
      type: integer
    recommendHit:
      type: object
      description: Recommend hit.
      additionalProperties: true
      required:
        - objectID
        - _score
      properties:
        objectID:
          $ref: '#/components/schemas/objectID'
        _highlightResult:
          $ref: '#/components/schemas/highlightResultMap'
        _snippetResult:
          $ref: '#/components/schemas/snippetResultMap'
        _rankingInfo:
          $ref: '#/components/schemas/rankingInfo'
        _distinctSeqID:
          $ref: '#/components/schemas/_distinctSeqID'
        _score:
          type: number
          format: double
          minimum: 0
          maximum: 100
          description: Recommendation score.
    recommendHits:
      type: object
      additionalProperties: false
      properties:
        hits:
          type: array
          items:
            $ref: '#/components/schemas/recommendHit'
        query:
          $ref: '#/components/schemas/query'
        params:
          type: string
          description: URL-encoded string of all search parameters.
          example: query=a&hitsPerPage=20
      required:
        - hits
    recommendationsResponse:
      allOf:
        - $ref: '#/components/schemas/baseSearchResponse'
        - $ref: '#/components/schemas/recommendHits'
    recommendModels:
      type: string
      enum:
        - related-products
        - bought-together
        - trending-facets
        - trending-items
    updatedAt:
      type: string
      example: '2023-07-04T12:49:15Z'
      description: >-
        Timestamp of the last update in [ISO
        8601](https://wikipedia.org/wiki/ISO_8601) format.
    anchoring:
      type: string
      description: >-
        Whether the pattern parameter matches the beginning (`startsWith`) or
        end (`endsWith`) of the query string, is an exact match (`is`), or a
        partial match (`contains`).
      enum:
        - is
        - startsWith
        - endsWith
        - contains
    condition:
      type: object
      additionalProperties: false
      properties:
        pattern:
          type: string
          description: Query pattern syntax.
          example: '{facet:brand}'
        anchoring:
          $ref: '#/components/schemas/anchoring'
        alternatives:
          type: boolean
          description: Whether the pattern matches on plurals, synonyms, and typos.
          default: false
        context:
          type: string
          description: 'Rule context format: [A-Za-z0-9_-]+).'
          example: trackedFilters
    editType:
      description: Type of edit.
      type: string
      enum:
        - remove
        - replace
    edit:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/editType'
        delete:
          description: Text or patterns to remove from the query string.
          type: string
        insert:
          description: >-
            Text that should be inserted in place of the removed text inside the
            query string.
          type: string
    consequenceQueryObject:
      type: object
      additionalProperties: false
      properties:
        remove:
          description: Words to remove.
          type: array
          items:
            type: string
        edits:
          description: Edits to apply.
          type: array
          items:
            $ref: '#/components/schemas/edit'
    consequenceQuery:
      description: >-
        When providing a string, it replaces the entire query string. When
        providing an object, it describes incremental edits to be made to the
        query string (but you can't do both).
      oneOf:
        - $ref: '#/components/schemas/consequenceQueryObject'
        - type: string
    automaticFacetFilter:
      type: object
      description: Automatic facet Filter.
      additionalProperties: false
      properties:
        facet:
          type: string
          description: >-
            Attribute to filter on. This must match a facet placeholder in the
            Rule's pattern.
        score:
          type: integer
          default: 1
          description: >-
            Score for the filter. Typically used for optional or disjunctive
            filters.
        disjunctive:
          type: boolean
          default: false
          description: Whether the filter is disjunctive (true) or conjunctive (false).
      required:
        - facet
    automaticFacetFilters:
      description: >-
        Names of facets to which automatic filtering must be applied; they must
        match the facet name of a facet value placeholder in the query pattern.
      oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/automaticFacetFilter'
        - type: array
          items:
            type: string
    params:
      type: object
      description: Additional search parameters.
      additionalProperties: false
      properties:
        query:
          $ref: '#/components/schemas/consequenceQuery'
        automaticFacetFilters:
          $ref: '#/components/schemas/automaticFacetFilters'
        automaticOptionalFacetFilters:
          $ref: '#/components/schemas/automaticFacetFilters'
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
    consequenceParams:
      allOf:
        - $ref: '#/components/schemas/baseSearchParamsWithoutQuery'
        - $ref: '#/components/schemas/indexSettingsAsSearchParams'
        - $ref: '#/components/schemas/params'
    promotePosition:
      type: integer
      description: >-
        The position to promote the records to. If you pass objectIDs, the
        records are placed at this position as a group. For example, if you
        pronmote four objectIDs to position 0, the records take the first four
        positions.
      example: 0
    promoteObjectIDs:
      description: Records to promote.
      type: object
      additionalProperties: false
      properties:
        objectIDs:
          type: array
          description: Unique identifiers of the records to promote.
          example:
            - 3f31c087763a2ceec359b318fc3edef3
            - 63c3c871e31a152d67df7720192fd752
          items:
            type: string
        position:
          $ref: '#/components/schemas/promotePosition'
      required:
        - position
        - objectIDs
    promoteObjectID:
      description: Record to promote.
      type: object
      additionalProperties: false
      properties:
        objectID:
          type: string
          example: 2b642cf64c587f50388eb1b8d047bf56
          description: Unique identifier of the record to promote.
        position:
          $ref: '#/components/schemas/promotePosition'
      required:
        - position
        - objectID
    promote:
      oneOf:
        - $ref: '#/components/schemas/promoteObjectIDs'
        - $ref: '#/components/schemas/promoteObjectID'
    consequence:
      type: object
      description: >
        [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences)
        of a rule.
      additionalProperties: false
      properties:
        params:
          $ref: '#/components/schemas/consequenceParams'
        promote:
          type: array
          description: Records to promote.
          items:
            $ref: '#/components/schemas/promote'
        filterPromotes:
          type: boolean
          default: false
          description: >-
            Only use in combination with the `promote` consequence. When `true`,
            promoted results will be restricted to match the filters of the
            current search. When `false`, the promoted results will show up
            regardless of the filters.
        hide:
          type: array
          description: Records to hide. By default, you can hide up to 50 records per rule.
          items:
            title: consequenceHide
            type: object
            description: Unique identifier of the record to hide.
            additionalProperties: false
            properties:
              objectID:
                $ref: '#/components/schemas/objectID'
            required:
              - objectID
        userData:
          description: >-
            Custom JSON object that will be appended to the userData array in
            the response. This object isn't interpreted by the API. It's limited
            to 1kB of minified JSON.
          example:
            settingID: f2a7b51e3503acc6a39b3784ffb84300
            pluginVersion: 1.6.0
    ruleResponse:
      type: object
      description: Rule object.
      additionalProperties: false
      properties:
        _metadata:
          type: object
          properties:
            lastUpdate:
              $ref: '#/components/schemas/updatedAt'
        objectID:
          type: string
          description: Unique identifier for a rule object.
          example: hide-12345
        conditions:
          type: array
          description: >
            [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions)
            required to activate a rule. You can use up to 25 conditions per
            rule.
          items:
            $ref: '#/components/schemas/condition'
        consequence:
          $ref: '#/components/schemas/consequence'
        description:
          type: string
          description: >-
            Description of the rule's purpose. This can be helpful for display
            in the Algolia dashboard.
          example: Display a promotional banner
        enabled:
          type: boolean
          default: true
          description: >-
            Indicates whether to enable the rule. If it isn't enabled, it isn't
            applied at query time.
      required:
        - objectID
    taskID:
      type: integer
      format: int64
      example: 1514562690001
      description: >
        Unique identifier of a task.

        A successful API response means that a task was added to a queue. It
        might not run immediately. You can check the task's progress with the
        `task` operation and this `taskID`.
    deletedAt:
      type: string
      example: '2023-06-27T14:42:38.831Z'
      description: >-
        Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)
        format.
    taskStatus:
      type: string
      enum:
        - published
        - notPublished
      description: _published_ if the task has been processed, _notPublished_ otherwise.
    parameters_query:
      type: string
      description: Full-text query.
      default: ''
    parameters_page:
      type: integer
      minimum: 0
      description: Requested page (the first page is page 0).
    parameters_hitsPerPage:
      type: integer
      default: 20
      minimum: 1
      maximum: 1000
      description: Maximum number of hits per page.
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    DeletedAt:
      description: OK
      content:
        application/json:
          schema:
            title: deletedAtResponse
            description: Response, taskID, and deletion timestamp.
            additionalProperties: false
            type: object
            required:
              - taskID
              - deletedAt
            properties:
              taskID:
                $ref: '#/components/schemas/taskID'
              deletedAt:
                $ref: '#/components/schemas/deletedAt'
servers:
  - url: https://{appId}.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-1.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-2.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-3.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-dsn.algolianet.com
    variables:
      appId:
        default: myAppId
security:
  - appId: []
    apiKey: []
tags:
  - name: recommendations
    x-displayName: Recommend
    description: Manage recommendations.
x-tagGroups:
  - name: General
    tags:
      - recommendations
paths:
  /1{path}:
    get:
      operationId: get
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - recommend
    post:
      operationId: post
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - recommend
    put:
      operationId: put
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - recommend
    delete:
      operationId: del
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - recommend
  /1/indexes/*/recommendations:
    post:
      tags:
        - recommend
      operationId: getRecommendations
      x-use-read-transporter: true
      x-cacheable: true
      summary: Get recommendations and trending items.
      description: |
        Returns results from either recommendation or trending models:

          - **Recommendations** are provided by the [Related Products](https://www.algolia.com/doc/guides/algolia-recommend/overview/#related-products-and-related-content) and [Frequently Bought Together](https://www.algolia.com/doc/guides/algolia-recommend/overview/#frequently-bought-together) models
          - **Trending** models are [Trending Items and Trending Facet Values](https://www.algolia.com/doc/guides/algolia-recommend/overview/#trending-items-and-trending-facet-values).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: getRecommendationsParams
              description: Recommend parameters.
              type: object
              additionalProperties: false
              properties:
                requests:
                  type: array
                  description: >-
                    Request parameters depend on the model (recommendations or
                    trending).
                  items:
                    $ref: '#/components/schemas/recommendationsRequest'
              required:
                - requests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getRecommendationsResponse
                type: object
                additionalProperties: false
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/recommendationsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
  /1/indexes/{indexName}/{model}/recommend/rules/{objectID}:
    get:
      tags:
        - recommend
      operationId: getRecommendRule
      summary: Get a Recommend rule.
      description: >-
        Return a [Recommend
        rule](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).
      parameters:
        - $ref: '#/components/parameters/IndexName'
        - $ref: '#/components/parameters/Models'
        - $ref: '#/components/parameters/ObjectID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
    delete:
      tags:
        - recommend
      operationId: deleteRecommendRule
      summary: Delete a Recommend rule.
      description: >-
        Delete a [Recommend
        rule](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).
      parameters:
        - $ref: '#/components/parameters/IndexName'
        - $ref: '#/components/parameters/Models'
        - $ref: '#/components/parameters/ObjectID'
      responses:
        '200':
          $ref: '#/components/responses/DeletedAt'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
  /1/indexes/{indexName}/{model}/task/{taskID}:
    get:
      tags:
        - recommend
      operationId: getRecommendStatus
      summary: Get a Recommend task's status.
      description: >-
        Some operations, such as deleting a Recommend rule, will respond with a
        `taskID` value. Use this value here to check the status of that task.
      parameters:
        - $ref: '#/components/parameters/IndexName'
        - $ref: '#/components/parameters/Models'
        - name: taskID
          in: path
          description: Unique identifier of a task. Numeric value (up to 64bits).
          required: true
          schema:
            type: integer
            format: int64
            example: 13235
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getRecommendTaskResponse
                type: object
                additionalProperties: false
                properties:
                  status:
                    $ref: '#/components/schemas/taskStatus'
                required:
                  - status
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
  /1/indexes/{indexName}/{model}/recommend/rules/search:
    post:
      tags:
        - recommend
      operationId: searchRecommendRules
      x-use-read-transporter: true
      x-cacheable: true
      summary: List Recommend rules.
      description: >-
        List [Recommend
        rules](https://www.algolia.com/doc/guides/algolia-recommend/how-to/rules/).
      parameters:
        - $ref: '#/components/parameters/IndexName'
        - $ref: '#/components/parameters/Models'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: searchRecommendRulesParams
              description: Recommend rules search parameters.
              additionalProperties: false
              properties:
                query:
                  $ref: '#/components/schemas/parameters_query'
                context:
                  type: string
                  description: >-
                    Restricts responses to the specified [contextual
                    rule](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#creating-contextual-rules).
                  example: mobile
                page:
                  $ref: '#/components/schemas/parameters_page'
                hitsPerPage:
                  $ref: '#/components/schemas/parameters_hitsPerPage'
                enabled:
                  type: boolean
                  nullable: true
                  default: null
                  description: >-
                    Restricts responses to enabled rules. When absent (default),
                    _all_ rules are retrieved.
                requestOptions:
                  type: array
                  description: Request options to send with the API call.
                  example: |
                    {timeouts:{read:20}}
                  items:
                    type: object
                    description: Request option.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchRecommendRulesResponse
                type: object
                additionalProperties: false
                required:
                  - hits
                  - nbHits
                  - page
                  - nbPages
                properties:
                  hits:
                    type: array
                    description: Fetched rules.
                    items:
                      $ref: '#/components/schemas/ruleResponse'
                  nbHits:
                    type: integer
                    description: Number of fetched rules.
                  page:
                    type: integer
                    description: Current page.
                  nbPages:
                    type: integer
                    description: Number of pages.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
