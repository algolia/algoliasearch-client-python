openapi: 3.0.2
info:
  title: Search API
  description: >-
    Use the Search REST API  to manage your data (indices and records),
    implement search, and improve relevance (with Rules, synonyms, and language
    dictionaries).


    Although Algolia provides a REST API, you should use the official open
    source API [clients, libraries, and
    tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/)
    instead.

    There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST
    API directly.
  version: 1.0.0
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    IndexName:
      name: indexName
      in: path
      description: Index on which to perform the request.
      required: true
      schema:
        type: string
        example: myIndexName
    ObjectID:
      name: objectID
      in: path
      description: Unique record (object) identifier.
      required: true
      schema:
        type: string
        example: '123'
    ForwardToReplicas:
      in: query
      name: forwardToReplicas
      description: >-
        Indicates whether changed index settings are forwarded to the replica
        indices.
      schema:
        type: boolean
    parameters_ObjectID:
      name: objectID
      in: path
      description: Unique identifier of a synonym object.
      required: true
      schema:
        type: string
        example: synonymID
    ReplaceExistingSynonyms:
      in: query
      name: replaceExistingSynonyms
      schema:
        type: boolean
      description: >-
        Indicates whether to replace all synonyms in the index with the ones
        sent with this request.
    Type:
      in: query
      name: type
      description: >-
        Search for specific [types of
        synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms).
      schema:
        $ref: '#/components/schemas/SynonymType'
    PageDefault0:
      in: query
      name: page
      description: >
        Returns the requested page number (the first page is 0). Page size is
        set by `hitsPerPage`. When null, there's no pagination.
      schema:
        type: integer
        nullable: true
        minimum: 0
        default: 0
    HitsPerPage:
      in: query
      name: hitsPerPage
      description: Maximum number of hits per page.
      schema:
        type: integer
        default: 100
    KeyString:
      in: path
      name: key
      required: true
      schema:
        type: string
        example: YourAPIKey
      description: API key.
    parameters_ObjectID-2:
      in: path
      name: objectID
      description: Unique identifier of a rule object.
      example: a-rule-id
      required: true
      schema:
        type: string
    ClearExistingRules:
      in: query
      name: clearExistingRules
      required: false
      schema:
        type: boolean
      description: >-
        Indicates whether existing rules should be deleted before adding this
        batch.
    DictionaryName:
      in: path
      name: dictionaryName
      description: Dictionary to search in.
      required: true
      schema:
        $ref: '#/components/schemas/dictionaryType'
    Page:
      in: query
      name: page
      description: >
        Returns the requested page number. The page size is determined by the
        `hitsPerPage` parameter. You can see the number of available pages in
        the `nbPages` response attribute. When `page` is null, the API response
        is not paginated.
      schema:
        type: integer
        minimum: 0
        nullable: true
        default: null
    UserIDInHeader:
      name: X-Algolia-User-ID
      description: userID to assign.
      in: header
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z0-9 \-*.]+$
    UserIDInPath:
      name: userID
      description: userID to assign.
      in: path
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z0-9 \-*.]+$
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    paramsAsString:
      description: Search parameters as a URL-encoded query string.
      example: hitsPerPage=2&getRankingInfo=1
      type: string
      default: ''
    searchParamsString:
      type: object
      additionalProperties: false
      x-discriminator-fields:
        - params
      properties:
        params:
          $ref: '#/components/schemas/paramsAsString'
    query:
      type: string
      description: Text to search for in an index.
      default: ''
      x-categories:
        - Search
    searchParamsQuery:
      type: object
      additionalProperties: false
      properties:
        query:
          $ref: '#/components/schemas/query'
    filters:
      type: string
      description: >
        [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/)
        the query with numeric, facet, or tag filters.
      example: (category:Book OR category:Ebook) AND _tags:published
      default: ''
      x-categories:
        - Filtering
    searchFiltersArrayString:
      type: array
      items:
        type: string
    mixedSearchFilters:
      oneOf:
        - $ref: '#/components/schemas/searchFiltersArrayString'
        - type: string
    listOfSearchFilters:
      type: array
      items:
        $ref: '#/components/schemas/mixedSearchFilters'
    facetFilters:
      description: >
        [Filter hits by facet
        value](https://www.algolia.com/doc/api-reference/api-parameters/facetFilters/).
      example:
        - category:Book
        - author:John Doe
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    optionalFilters:
      description: >
        Create filters to boost or demote records. 


        Records that match the filter are ranked higher for positive and lower
        for negative optional filters. In contrast to regular filters, records
        that don't match the optional filter are still included in the results,
        only their ranking is affected.
      example:
        - category:Book
        - author:John Doe
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    numericFilters:
      description: >
        [Filter on numeric
        attributes](https://www.algolia.com/doc/api-reference/api-parameters/numericFilters/).
      example:
        -
          - inStock = 1
          - deliveryDate < 1441755506
        - price < 1000
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    tagFilters:
      description: >
        [Filter hits by
        tags](https://www.algolia.com/doc/api-reference/api-parameters/tagFilters/).
      example:
        -
          - Book
          - Movie
        - SciFi
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
      x-categories:
        - Filtering
    page:
      type: integer
      description: Page to retrieve (the first page is `0`, not `1`).
      default: 0
      x-categories:
        - Pagination
    aroundLatLng:
      type: string
      description: >-
        Search for entries [around a central
        location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),
        enabling a geographical search within a circular area.
      example: 40.71,-74.01
      default: ''
      x-categories:
        - Geo-Search
    aroundLatLngViaIP:
      type: boolean
      description: >-
        Search for entries around a location. The location is automatically
        computed from the requester's IP address.
      default: false
      x-categories:
        - Geo-Search
    aroundRadiusAll:
      type: string
      enum:
        - all
    aroundRadius:
      description: >
        [Maximum
        radius](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#increase-the-search-radius)
        for a geographical search (in meters).
      oneOf:
        - type: integer
          minimum: 1
        - $ref: '#/components/schemas/aroundRadiusAll'
      x-categories:
        - Geo-Search
    aroundPrecisionFromValue:
      description: >-
        Precision of a geographical search (in meters), to [group results that
        are more or less the same distance from a central
        point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/).
      type: array
      items:
        type: object
        properties:
          from:
            type: integer
          value:
            type: integer
    aroundPrecision:
      description: >-
        Precision of a geographical search (in meters), to [group results that
        are more or less the same distance from a central
        point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/).
      oneOf:
        - type: integer
          default: 10
        - $ref: '#/components/schemas/aroundPrecisionFromValue'
      x-categories:
        - Geo-Search
    insideBoundingBox:
      type: array
      items:
        type: number
        format: double
      description: >-
        Search inside a [rectangular
        area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
        (in geographical coordinates).
      example:
        - 46.650828100116044
        - 7.123046875
        - 45.17210966999772
        - 1.009765625
      x-categories:
        - Geo-Search
    insidePolygon:
      type: array
      items:
        type: number
        format: double
      description: >-
        Search inside a
        [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
        (in geographical coordinates).
      example:
        - 46.650828100116044
        - 7.123046875
        - 45.17210966999772
        - 1.009765625
        - 49.62625916704081
        - 4.6181640625
      x-categories:
        - Geo-Search
    baseSearchParamsWithoutQuery:
      type: object
      additionalProperties: false
      properties:
        similarQuery:
          type: string
          description: Overrides the query parameter and performs a more generic search.
          default: ''
          x-categories:
            - Search
        filters:
          $ref: '#/components/schemas/filters'
        facetFilters:
          $ref: '#/components/schemas/facetFilters'
        optionalFilters:
          $ref: '#/components/schemas/optionalFilters'
        numericFilters:
          $ref: '#/components/schemas/numericFilters'
        tagFilters:
          $ref: '#/components/schemas/tagFilters'
        sumOrFiltersScores:
          type: boolean
          description: >
            Determines how to calculate [filter
            scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).

            If `false`, maximum score is kept.

            If `true`, score is summed.
          default: false
          x-categories:
            - Filtering
        restrictSearchableAttributes:
          type: array
          items:
            type: string
          example:
            - title
            - author
          description: >-
            Restricts a query to only look at a subset of your [searchable
            attributes](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/).
          default: []
          x-categories:
            - Filtering
        facets:
          type: array
          items:
            type: string
          description: >-
            Returns
            [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts),
            their facet values, and the number of matching facet values.
          default: []
          x-categories:
            - Faceting
        facetingAfterDistinct:
          type: boolean
          description: >
            Forces faceting to be applied after
            [de-duplication](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/)
            (with the distinct feature). Alternatively, the `afterDistinct`
            [modifier](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers)
            of `attributesForFaceting` allows for more granular control.
          default: false
          x-categories:
            - Faceting
        page:
          $ref: '#/components/schemas/page'
        offset:
          type: integer
          description: >
            Specifies the offset of the first hit to return.

            > **Note**: Using `page` and `hitsPerPage` is the recommended method
            for [paging
            results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/).
            However, you can use `offset` and `length` to implement [an
            alternative approach to
            paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
          x-categories:
            - Pagination
        length:
          type: integer
          description: >
            Sets the number of hits to retrieve (for use with `offset`).

            > **Note**: Using `page` and `hitsPerPage` is the recommended method
            for [paging
            results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/).
            However, you can use `offset` and `length` to implement [an
            alternative approach to
            paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
          minimum: 1
          maximum: 1000
          x-categories:
            - Pagination
        aroundLatLng:
          $ref: '#/components/schemas/aroundLatLng'
        aroundLatLngViaIP:
          $ref: '#/components/schemas/aroundLatLngViaIP'
        aroundRadius:
          $ref: '#/components/schemas/aroundRadius'
        aroundPrecision:
          $ref: '#/components/schemas/aroundPrecision'
        minimumAroundRadius:
          type: integer
          description: >-
            Minimum radius (in meters) used for a geographical search when
            `aroundRadius` isn't set.
          minimum: 1
          x-categories:
            - Geo-Search
        insideBoundingBox:
          $ref: '#/components/schemas/insideBoundingBox'
        insidePolygon:
          $ref: '#/components/schemas/insidePolygon'
        naturalLanguages:
          type: array
          items:
            type: string
          description: >-
            Changes the default values of parameters that work best for a
            natural language query, such as `ignorePlurals`, `removeStopWords`,
            `removeWordsIfNoResults`, `analyticsTags`, and `ruleContexts`. These
            parameters work well together when the query consists of fuller
            natural language strings instead of keywords, for example when
            processing voice search queries.
          default: []
          x-categories:
            - Languages
        ruleContexts:
          type: array
          items:
            type: string
          description: >-
            Assigns [rule
            contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)
            to search queries.
          default: []
          x-categories:
            - Rules
        personalizationImpact:
          type: integer
          description: >-
            Defines how much [Personalization affects
            results](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
          default: 100
          x-categories:
            - Personalization
        userToken:
          type: string
          description: >-
            Associates a [user
            token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/)
            with the current search.
          example: '123456'
          x-categories:
            - Personalization
        getRankingInfo:
          type: boolean
          description: >-
            Incidates whether the search response includes [detailed ranking
            information](https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/understanding-the-api-response/#ranking-information).
          default: false
          x-categories:
            - Advanced
        explain:
          type: array
          items:
            type: string
          description: >-
            Enriches the API's response with information about how the query was
            processed.
          default: []
          x-categories:
            - Advanced
        synonyms:
          type: boolean
          description: >-
            Whether to take into account an index's synonyms for a particular
            search.
          default: true
          x-categories:
            - Advanced
        clickAnalytics:
          type: boolean
          description: >-
            Indicates whether a query ID parameter is included in the search
            response. This is required for [tracking click and conversion
            events](https://www.algolia.com/doc/guides/sending-events/concepts/event-types/#events-related-to-algolia-requests).
          default: false
          x-categories:
            - Analytics
        analytics:
          type: boolean
          description: >-
            Indicates whether this query will be included in
            [analytics](https://www.algolia.com/doc/guides/search-analytics/guides/exclude-queries/).
          default: true
          x-categories:
            - Analytics
        analyticsTags:
          type: array
          items:
            type: string
          description: >-
            Tags to apply to the query for [segmenting analytics
            data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
          default: []
          x-categories:
            - Analytics
        percentileComputation:
          type: boolean
          description: >-
            Whether to include or exclude a query from the processing-time
            percentile computation.
          default: true
          x-categories:
            - Advanced
        enableABTest:
          type: boolean
          description: Incidates whether this search will be considered in A/B testing.
          default: true
          x-categories:
            - Advanced
    baseSearchParams:
      allOf:
        - $ref: '#/components/schemas/searchParamsQuery'
        - $ref: '#/components/schemas/baseSearchParamsWithoutQuery'
    hitsPerPage:
      type: integer
      description: Number of hits per page.
      default: 20
      minimum: 1
      maximum: 1000
      x-categories:
        - Pagination
    typoToleranceEnum:
      type: string
      enum:
        - min
        - strict
    typoTolerance:
      description: >-
        Controls whether [typo
        tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/)
        is enabled and how it is applied.
      oneOf:
        - type: boolean
          default: true
        - $ref: '#/components/schemas/typoToleranceEnum'
      x-categories:
        - Typos
    ignorePlurals:
      description: >
        Treats singular, plurals, and other forms of declensions as matching
        terms.

        `ignorePlurals` is used in conjunction with the `queryLanguages`
        setting.

        _list_: language ISO codes for which ignoring plurals should be enabled.
        This list will override any values that you may have set in
        `queryLanguages`. _true_: enables the ignore plurals feature, where
        singulars and plurals are considered equivalent ("foot" = "feet"). The
        languages supported here are either [every
        language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)
        (this is the default) or those set by `queryLanguages`. _false_: turns
        off the ignore plurals feature, so that singulars and plurals aren't
        considered to be the same ("foot" will not find "feet").
      example:
        - ca
        - es
      oneOf:
        - type: array
          items:
            type: string
        - type: boolean
          default: false
      x-categories:
        - Languages
    removeStopWords:
      description: >
        Removes stop (common) words from the query before executing it.

        `removeStopWords` is used in conjunction with the `queryLanguages`
        setting.

        _list_: language ISO codes for which stop words should be enabled. This
        list will override any values that you may have set in `queryLanguages`.
        _true_: enables the stop words feature, ensuring that stop words are
        removed from consideration in a search. The languages supported here are
        either [every
        language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)
        (this is the default) or those set by `queryLanguages`. _false_: turns
        off the stop words feature, allowing stop words to be taken into account
        in a search.
      example:
        - ca
        - es
      oneOf:
        - type: array
          items:
            type: string
        - type: boolean
          default: false
      x-categories:
        - Languages
    queryType:
      type: string
      enum:
        - prefixLast
        - prefixAll
        - prefixNone
      description: >-
        Determines how query words are [interpreted as
        prefixes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/prefix-searching/).
      default: prefixLast
      x-categories:
        - Query strategy
    removeWordsIfNoResults:
      type: string
      enum:
        - none
        - lastWords
        - firstWords
        - allOptional
      example: firstWords
      description: >-
        Strategy to [remove
        words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/in-depth/why-use-remove-words-if-no-results/)
        from the query when it doesn't match any hits.
      default: none
      x-categories:
        - Query strategy
    mode:
      type: string
      enum:
        - neuralSearch
        - keywordSearch
      description: Search mode the index will use to query for results.
      default: keywordSearch
      x-categories:
        - Query strategy
    semanticSearch:
      type: object
      description: >
        Settings for the semantic search part of NeuralSearch. Only used when
        `mode` is _neuralSearch_.
      properties:
        eventSources:
          description: >-
            Indices from which to collect click and conversion events. If null,
            the current index and replica group will be used as the event
            source.
          nullable: true
          type: array
          items:
            type: string
    exactOnSingleWordQuery:
      type: string
      enum:
        - attribute
        - none
        - word
      description: >-
        Determines how the [Exact ranking
        criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes)
        is computed when the query contains only one word.
      default: attribute
      x-categories:
        - Query strategy
    alternativesAsExact:
      type: string
      enum:
        - ignorePlurals
        - singleWordSynonym
        - multiWordsSynonym
      x-categories:
        - Query strategy
    advancedSyntaxFeatures:
      type: string
      enum:
        - exactPhrase
        - excludeWords
      x-categories:
        - Query strategy
    distinct:
      description: >-
        Enables [deduplication or grouping of results (Algolia's _distinct_
        feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature)).
      example: 1
      oneOf:
        - type: boolean
        - type: integer
          minimum: 0
          maximum: 4
          default: 0
      x-categories:
        - Advanced
    maxFacetHits:
      type: integer
      description: >-
        Maximum number of facet hits to return when [searching for facet
        values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
      maximum: 100
      default: 10
      x-categories:
        - Advanced
    order:
      description: Pinned order of facet lists.
      type: array
      items:
        type: string
    facets:
      description: Ordering of facets (widgets).
      type: object
      additionalProperties: false
      properties:
        order:
          $ref: '#/components/schemas/order'
    sortRemainingBy:
      description: |
        How to display the remaining items:

          - `count`: facet count (descending).
          - `alpha`: alphabetical (ascending).
          - `hidden`: show only pinned values.
      type: string
      enum:
        - count
        - alpha
        - hidden
    value:
      type: object
      additionalProperties: false
      properties:
        order:
          $ref: '#/components/schemas/order'
        sortRemainingBy:
          $ref: '#/components/schemas/sortRemainingBy'
    values:
      description: Ordering of facet values within an individual facet.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/value'
    facetOrdering:
      description: Defines the ordering of facets (widgets).
      type: object
      additionalProperties: false
      properties:
        facets:
          $ref: '#/components/schemas/facets'
        values:
          $ref: '#/components/schemas/values'
    renderingContent:
      description: >-
        Extra content for the search UI, for example, to control the [ordering
        and display of
        facets](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/merchandising-facets/#merchandise-facets-and-their-values-in-the-manual-editor).
        You can set a default value and dynamically override it with
        [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/).
      type: object
      additionalProperties: false
      properties:
        facetOrdering:
          $ref: '#/components/schemas/facetOrdering'
      x-categories:
        - Advanced
    reRankingApplyFilter:
      description: >-
        When [Dynamic
        Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/)
        is enabled, only records that match these filters will be affected by
        Dynamic Re-Ranking.
      nullable: true
      oneOf:
        - $ref: '#/components/schemas/listOfSearchFilters'
        - type: string
          x-categories:
            - Filtering
    indexSettingsAsSearchParams:
      type: object
      additionalProperties: false
      properties:
        attributesForFaceting:
          type: array
          items:
            type: string
          example:
            - author
            - filterOnly(isbn)
            - searchable(edition)
            - afterDistinct(category)
            - afterDistinct(searchable(publisher))
          description: >
            Attributes used for
            [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/)
            and the
            [modifiers](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers)
            that can be applied: `filterOnly`, `searchable`, and
            `afterDistinct`.
          default: []
          x-categories:
            - Faceting
        attributesToRetrieve:
          type: array
          items:
            type: string
          example:
            - author
            - title
            - content
          description: >-
            Attributes to include in the API response. To reduce the size of
            your response, you can retrieve only some of the attributes. By
            default, the response includes all attributes.
          default:
            - '*'
          x-categories:
            - Attributes
        ranking:
          type: array
          items:
            type: string
          description: >-
            Determines the order in which Algolia [returns your
            results](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).
          default:
            - typo
            - geo
            - words
            - filters
            - proximity
            - attribute
            - exact
            - custom
          x-categories:
            - Ranking
        customRanking:
          type: array
          items:
            type: string
          example:
            - desc(popularity)
            - asc(price)
          description: >
            Specifies the [Custom ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/).
            Use the `asc` and `desc` modifiers to specify the ranking order:
            ascending or descending.
          default: []
          x-categories:
            - Ranking
        relevancyStrictness:
          type: integer
          example: 90
          description: >-
            Relevancy threshold below which less relevant results aren't
            included in the results.
          default: 100
          x-categories:
            - Ranking
        attributesToHighlight:
          type: array
          items:
            type: string
          example:
            - author
            - title
            - content
          description: >-
            Attributes to highlight. Strings that match the search query in the
            attributes are highlighted by surrounding them with HTML tags
            (`highlightPreTag` and `highlightPostTag`).
          x-categories:
            - Highlighting and Snippeting
        attributesToSnippet:
          type: array
          items:
            type: string
          example:
            - content:80
            - description
          description: >
            Attributes to _snippet_. 'Snippeting' is shortening the attribute to
            a certain number of words. If not specified, the attribute is
            shortened to the 10 words around the matching string but you can
            specify the number. For example: `body:20`.
          default: []
          x-categories:
            - Highlighting and Snippeting
        highlightPreTag:
          type: string
          description: >-
            HTML string to insert before the highlighted parts in all highlight
            and snippet results.
          default: <em>
          x-categories:
            - Highlighting and Snippeting
        highlightPostTag:
          type: string
          description: >-
            HTML string to insert after the highlighted parts in all highlight
            and snippet results.
          default: </em>
          x-categories:
            - Highlighting and Snippeting
        snippetEllipsisText:
          type: string
          description: String used as an ellipsis indicator when a snippet is truncated.
          default: …
          x-categories:
            - Highlighting and Snippeting
        restrictHighlightAndSnippetArrays:
          type: boolean
          description: >-
            Restrict highlighting and snippeting to items that matched the
            query.
          default: false
          x-categories:
            - Highlighting and Snippeting
        hitsPerPage:
          $ref: '#/components/schemas/hitsPerPage'
        minWordSizefor1Typo:
          type: integer
          description: >-
            Minimum number of characters a word in the query string must contain
            to accept matches with [one
            typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
          default: 4
          x-categories:
            - Typos
        minWordSizefor2Typos:
          type: integer
          description: >-
            Minimum number of characters a word in the query string must contain
            to accept matches with [two
            typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
          default: 8
          x-categories:
            - Typos
        typoTolerance:
          $ref: '#/components/schemas/typoTolerance'
        allowTyposOnNumericTokens:
          type: boolean
          description: >-
            Whether to allow typos on numbers ("numeric tokens") in the query
            string.
          default: true
          x-categories:
            - Typos
        disableTypoToleranceOnAttributes:
          type: array
          items:
            type: string
          example:
            - sku
          description: >-
            Attributes for which you want to turn off [typo
            tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
          default: []
          x-categories:
            - Typos
        ignorePlurals:
          $ref: '#/components/schemas/ignorePlurals'
        removeStopWords:
          $ref: '#/components/schemas/removeStopWords'
        keepDiacriticsOnCharacters:
          type: string
          example: øé
          description: >-
            Characters that the engine shouldn't automatically
            [normalize](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
          default: ''
          x-categories:
            - Languages
        queryLanguages:
          type: array
          items:
            type: string
          example:
            - es
          description: >-
            Sets your user's search language. This adjusts language-specific
            settings and features such as `ignorePlurals`, `removeStopWords`,
            and
            [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk)
            word detection.
          default: []
          x-categories:
            - Languages
        decompoundQuery:
          type: boolean
          description: >
            [Splits compound
            words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words)
            into their component word parts in the query.
          default: true
          x-categories:
            - Languages
        enableRules:
          type: boolean
          description: >-
            Incidates whether
            [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/)
            are enabled.
          default: true
          x-categories:
            - Rules
        enablePersonalization:
          type: boolean
          description: >-
            Incidates whether
            [Personalization](https://www.algolia.com/doc/guides/personalization/what-is-personalization/)
            is enabled.
          default: false
          x-categories:
            - Personalization
        queryType:
          $ref: '#/components/schemas/queryType'
        removeWordsIfNoResults:
          $ref: '#/components/schemas/removeWordsIfNoResults'
        mode:
          $ref: '#/components/schemas/mode'
        semanticSearch:
          $ref: '#/components/schemas/semanticSearch'
        advancedSyntax:
          type: boolean
          description: >-
            Enables the [advanced query
            syntax](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#advanced-syntax).
          default: false
          x-categories:
            - Query strategy
        optionalWords:
          type: array
          items:
            type: string
          example:
            - blue
            - iphone case
          description: >-
            Words which should be considered
            [optional](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words)
            when found in a query.
          default: []
          x-categories:
            - Query strategy
        disableExactOnAttributes:
          type: array
          items:
            type: string
          example:
            - description
          description: >-
            Attributes for which you want to [turn off the exact ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
          default: []
          x-categories:
            - Query strategy
        exactOnSingleWordQuery:
          $ref: '#/components/schemas/exactOnSingleWordQuery'
        alternativesAsExact:
          type: array
          items:
            $ref: '#/components/schemas/alternativesAsExact'
          description: >-
            Alternatives that should be considered an exact match by [the exact
            ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
          default:
            - ignorePlurals
            - singleWordSynonym
          x-categories:
            - Query strategy
        advancedSyntaxFeatures:
          type: array
          items:
            $ref: '#/components/schemas/advancedSyntaxFeatures'
          description: >-
            Allows you to specify which advanced syntax features are active when
            `advancedSyntax` is enabled.
          default:
            - exactPhrase
            - excludeWords
          x-categories:
            - Query strategy
        distinct:
          $ref: '#/components/schemas/distinct'
        attributeForDistinct:
          description: >-
            Name of the deduplication attribute to be used with Algolia's
            [_distinct_
            feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).
          example: url
          type: string
        replaceSynonymsInHighlight:
          type: boolean
          description: >-
            Whether to highlight and snippet the original word that matches the
            synonym or the synonym itself.
          default: false
          x-categories:
            - Highlighting and Snippeting
        minProximity:
          type: integer
          minimum: 1
          maximum: 7
          description: >-
            Precision of the [proximity ranking
            criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity).
          default: 1
          x-categories:
            - Advanced
        responseFields:
          type: array
          items:
            type: string
          description: >-
            Attributes to include in the API response for search and browse
            queries.
          default: []
          x-categories:
            - Advanced
        maxFacetHits:
          $ref: '#/components/schemas/maxFacetHits'
        maxValuesPerFacet:
          type: integer
          description: Maximum number of facet values to return for each facet.
          default: 100
          x-categories:
            - Faceting
        sortFacetValuesBy:
          type: string
          description: Controls how facet values are fetched.
          default: count
          x-categories:
            - Faceting
        attributeCriteriaComputedByMinProximity:
          type: boolean
          description: >-
            When the [Attribute criterion is ranked above
            Proximity](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute-and-proximity-combinations)
            in your ranking formula, Proximity is used to select which
            searchable attribute is matched in the Attribute ranking stage.
          default: false
          x-categories:
            - Advanced
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
        enableReRanking:
          type: boolean
          description: >-
            Indicates whether this search will use [Dynamic
            Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).
          default: true
          x-categories:
            - Filtering
        reRankingApplyFilter:
          $ref: '#/components/schemas/reRankingApplyFilter'
    searchParamsObject:
      allOf:
        - $ref: '#/components/schemas/baseSearchParams'
        - $ref: '#/components/schemas/indexSettingsAsSearchParams'
    searchParams:
      oneOf:
        - $ref: '#/components/schemas/searchParamsString'
        - $ref: '#/components/schemas/searchParamsObject'
    nbHits:
      type: integer
      description: Number of hits the search query matched.
      example: 20
    nbPages:
      type: integer
      description: Number of pages of results for the current query.
      example: 1
    RedirectRuleIndexMetadata:
      type: object
      properties:
        source:
          type: string
          description: Source index for the redirect rule.
        dest:
          type: string
          description: Destination index for the redirect rule.
        reason:
          type: string
          description: Reason for the redirect rule.
        succeed:
          type: boolean
          description: Redirect rule status.
        data:
          type: object
          description: Redirect rule data.
          required:
            - ruleObjectID
          properties:
            ruleObjectID:
              type: string
      required:
        - data
        - succeed
        - reason
        - dest
        - source
    userData:
      example:
        settingID: f2a7b51e3503acc6a39b3784ffb84300
        pluginVersion: 1.6.0
      description: Lets you store custom data in your indices.
      default: {}
      x-categories:
        - Advanced
    baseSearchResponse:
      type: object
      additionalProperties: false
      required:
        - nbHits
        - page
        - nbPages
        - hitsPerPage
        - processingTimeMS
      properties:
        abTestID:
          type: integer
          description: >-
            A/B test ID. This is only included in the response for indices that
            are part of an A/B test.
        abTestVariantID:
          type: integer
          minimum: 1
          description: >-
            Variant ID. This is only included in the response for indices that
            are part of an A/B test.
        aroundLatLng:
          type: string
          description: Computed geographical location.
          example: 40.71,-74.01
          pattern: ^(-?\d+(\.\d+)?),\s*(-?\d+(\.\d+)?)$
        automaticRadius:
          type: string
          description: Automatically-computed radius.
        exhaustiveFacetsCount:
          type: boolean
          description: >-
            Indicates whether the facet count is exhaustive (exact) or
            approximate.
        exhaustiveNbHits:
          type: boolean
          description: >-
            Indicates whether the number of hits `nbHits` is exhaustive (exact)
            or approximate.
        exhaustiveTypo:
          type: boolean
          description: >-
            Indicates whether the search for typos was exhaustive (exact) or
            approximate.
        facets:
          title: facets
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: integer
          description: Mapping of each facet name to the corresponding facet counts.
          example:
            category:
              food: 1
              tech: 42
        facets_stats:
          title: facetsStats
          type: object
          description: Statistics for numerical facets.
          additionalProperties:
            type: object
            title: facetStats
            properties:
              min:
                type: number
                format: double
                description: Minimum value in the results.
              max:
                type: number
                format: double
                description: Maximum value in the results.
              avg:
                type: number
                format: double
                description: Average facet value in the results.
              sum:
                type: number
                format: double
                description: Sum of all values in the results.
        hitsPerPage:
          $ref: '#/components/schemas/hitsPerPage'
        index:
          type: string
          example: indexName
          description: Index name used for the query.
        indexUsed:
          type: string
          description: >-
            Index name used for the query. During A/B testing, the targeted
            index isn't always the index used by the query.
          example: indexNameAlt
        message:
          type: string
          description: Warnings about the query.
        nbHits:
          $ref: '#/components/schemas/nbHits'
        nbPages:
          $ref: '#/components/schemas/nbPages'
        nbSortedHits:
          type: integer
          description: Number of hits selected and sorted by the relevant sort algorithm.
          example: 20
        page:
          $ref: '#/components/schemas/page'
        redirect:
          type: object
          description: >
            [Redirect results to a
            URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/).
          properties:
            index:
              type: array
              items:
                $ref: '#/components/schemas/RedirectRuleIndexMetadata'
        parsedQuery:
          type: string
          description: >-
            Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean)
            query string that will be searched.
          example: george clo
        processingTimeMS:
          type: integer
          description: Time the server took to process the request, in milliseconds.
          example: 20
        queryAfterRemoval:
          type: string
          description: >-
            Markup text indicating which parts of the original query have been
            removed to retrieve a non-empty result set.
        serverUsed:
          type: string
          description: Host name of the server that processed the request.
          example: c2-uk-3.algolia.net
        userData:
          $ref: '#/components/schemas/userData'
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
    objectID:
      type: string
      description: Unique object identifier.
      example: product-1
    highlightedValue:
      type: string
      description: Markup text with `facetQuery` matches highlighted.
      example: <em>George</em> <em>Clo</em>oney
    matchLevel:
      type: string
      description: Indicates how well the attribute matched the search query.
      enum:
        - none
        - partial
        - full
    highlightResultOption:
      type: object
      description: Show highlighted section and words matched on a query.
      additionalProperties: false
      properties:
        value:
          $ref: '#/components/schemas/highlightedValue'
        matchLevel:
          $ref: '#/components/schemas/matchLevel'
        matchedWords:
          type: array
          description: List of words from the query that matched the object.
          example:
            - action
          items:
            type: string
        fullyHighlighted:
          type: boolean
          description: Whether the entire attribute value is highlighted.
      required:
        - value
        - matchLevel
        - matchedWords
    highlightResult:
      oneOf:
        - $ref: '#/components/schemas/highlightResultOption'
        - type: array
          items:
            $ref: '#/components/schemas/highlightResultOption'
    highlightResultMap:
      type: object
      description: Show highlighted section and words matched on a query.
      additionalProperties:
        $ref: '#/components/schemas/highlightResult'
    snippetResultOption:
      type: object
      description: >-
        Snippeted attributes show parts of the matched attributes. Only returned
        when attributesToSnippet is non-empty.
      additionalProperties: false
      properties:
        value:
          $ref: '#/components/schemas/highlightedValue'
        matchLevel:
          $ref: '#/components/schemas/matchLevel'
      required:
        - value
        - matchLevel
    snippetResult:
      oneOf:
        - $ref: '#/components/schemas/snippetResultOption'
        - type: array
          items:
            $ref: '#/components/schemas/snippetResultOption'
    snippetResultMap:
      type: object
      description: >-
        Snippeted attributes show parts of the matched attributes. Only returned
        when attributesToSnippet is non-empty.
      additionalProperties:
        $ref: '#/components/schemas/snippetResult'
    matchedGeoLocation:
      type: object
      properties:
        lat:
          type: number
          format: double
          description: Latitude of the matched location.
        lng:
          type: number
          format: double
          description: Longitude of the matched location.
        distance:
          type: integer
          description: >-
            Distance between the matched location and the search location (in
            meters).
    personalization:
      type: object
      properties:
        filtersScore:
          type: integer
          description: The score of the filters.
        rankingScore:
          type: integer
          description: The score of the ranking.
        score:
          type: integer
          description: The score of the event.
    rankingInfo:
      type: object
      additionalProperties: false
      properties:
        filters:
          type: integer
          description: This field is reserved for advanced usage.
        firstMatchedWord:
          type: integer
          description: >-
            Position of the most important matched attribute in the attributes
            to index list.
        geoDistance:
          type: integer
          description: >-
            Distance between the geo location in the search query and the best
            matching geo location in the record, divided by the geo precision
            (in meters).
        geoPrecision:
          type: integer
          description: Precision used when computing the geo distance, in meters.
        matchedGeoLocation:
          $ref: '#/components/schemas/matchedGeoLocation'
        personalization:
          $ref: '#/components/schemas/personalization'
        nbExactWords:
          type: integer
          description: Number of exactly matched words.
        nbTypos:
          type: integer
          description: Number of typos encountered when matching the record.
        promoted:
          type: boolean
          description: Present and set to true if a Rule promoted the hit.
        proximityDistance:
          type: integer
          description: >-
            When the query contains more than one word, the sum of the distances
            between matched words (in meters).
        userScore:
          type: integer
          description: Custom ranking for the object, expressed as a single integer value.
        words:
          type: integer
          description: Number of matched words, including prefixes and typos.
        promotedByReRanking:
          type: boolean
          description: Wether the record are promoted by the re-ranking strategy.
      required:
        - promoted
        - nbTypos
        - firstMatchedWord
        - geoDistance
        - nbExactWords
        - words
        - filters
        - userScore
    _distinctSeqID:
      type: integer
    hit:
      type: object
      description: A single hit.
      x-is-generic: true
      additionalProperties: true
      required:
        - objectID
      properties:
        objectID:
          $ref: '#/components/schemas/objectID'
        _highlightResult:
          $ref: '#/components/schemas/highlightResultMap'
        _snippetResult:
          $ref: '#/components/schemas/snippetResultMap'
        _rankingInfo:
          $ref: '#/components/schemas/rankingInfo'
        _distinctSeqID:
          $ref: '#/components/schemas/_distinctSeqID'
    searchHits:
      type: object
      additionalProperties: false
      properties:
        hits:
          type: array
          items:
            $ref: '#/components/schemas/hit'
        query:
          $ref: '#/components/schemas/query'
        params:
          type: string
          description: URL-encoded string of all search parameters.
          example: query=a&hitsPerPage=20
      required:
        - hits
        - query
        - params
    searchResponse:
      allOf:
        - $ref: '#/components/schemas/baseSearchResponse'
        - $ref: '#/components/schemas/searchHits'
    indexName:
      type: string
      example: products
      description: Algolia index name.
    searchTypeDefault:
      type: string
      enum:
        - default
      default: default
      description: >
        - `default`: perform a search query - `facet` [searches for facet
        values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
    searchForHitsOptions:
      x-is-SearchForHitsOptions: true
      type: object
      properties:
        indexName:
          $ref: '#/components/schemas/indexName'
        type:
          $ref: '#/components/schemas/searchTypeDefault'
      required:
        - indexName
    SearchForHits:
      allOf:
        - $ref: '#/components/schemas/searchParams'
        - $ref: '#/components/schemas/searchForHitsOptions'
    facetQuery:
      type: string
      description: Text to search inside the facet's values.
      example: george
      default: ''
    searchTypeFacet:
      type: string
      enum:
        - facet
      default: facet
      description: >
        - `default`: perform a search query - `facet` [searches for facet
        values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
    searchForFacetsOptions:
      type: object
      properties:
        facet:
          type: string
          description: Facet name.
        indexName:
          $ref: '#/components/schemas/indexName'
        facetQuery:
          $ref: '#/components/schemas/facetQuery'
        maxFacetHits:
          $ref: '#/components/schemas/maxFacetHits'
        type:
          $ref: '#/components/schemas/searchTypeFacet'
      required:
        - indexName
        - type
        - facet
    SearchForFacets:
      allOf:
        - $ref: '#/components/schemas/searchParams'
        - $ref: '#/components/schemas/searchForFacetsOptions'
    SearchQuery:
      oneOf:
        - $ref: '#/components/schemas/SearchForHits'
        - $ref: '#/components/schemas/SearchForFacets'
    searchStrategy:
      type: string
      enum:
        - none
        - stopIfEnoughMatches
      description: >
        - `none`: executes all queries. - `stopIfEnoughMatches`: executes
        queries one by one, stopping further query execution as soon as a query
        matches at least the `hitsPerPage` number of results. 
    searchForFacetValuesResponse:
      type: object
      additionalProperties: false
      required:
        - facetHits
      x-discriminator-fields:
        - facetHits
      properties:
        facetHits:
          type: array
          items:
            type: object
            title: facetHits
            additionalProperties: false
            required:
              - value
              - highlighted
              - count
            properties:
              value:
                description: Facet value.
                example: Mobile phone
                type: string
              highlighted:
                $ref: '#/components/schemas/highlightedValue'
              count:
                description: >-
                  Number of records containing this facet value. This takes into
                  account the extra search parameters specified in the query.
                  Like for a regular search query, the [counts may not be
                  exhaustive](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).
                type: integer
    searchResult:
      oneOf:
        - $ref: '#/components/schemas/searchResponse'
        - $ref: '#/components/schemas/searchForFacetValuesResponse'
    cursor:
      type: object
      additionalProperties: false
      properties:
        cursor:
          type: string
          description: >
            Cursor indicating the location to resume browsing from. Must match
            the value returned by the previous call.

            Pass this value to the subsequent browse call to get the next page
            of results.

            When the end of the index has been reached, `cursor` is absent from
            the response.
          example: jMDY3M2MwM2QwMWUxMmQwYWI0ZTN
    browseParamsObject:
      allOf:
        - $ref: '#/components/schemas/searchParamsObject'
        - $ref: '#/components/schemas/cursor'
    browseParams:
      oneOf:
        - $ref: '#/components/schemas/searchParamsString'
        - $ref: '#/components/schemas/browseParamsObject'
    browseResponse:
      allOf:
        - $ref: '#/components/schemas/baseSearchResponse'
        - $ref: '#/components/schemas/searchHits'
        - $ref: '#/components/schemas/cursor'
    taskID:
      type: integer
      format: int64
      example: 1514562690001
      description: >
        Unique identifier of a task.

        A successful API response means that a task was added to a queue. It
        might not run immediately. You can check the task's progress with the
        `task` operation and this `taskID`.
    deletedAt:
      type: string
      example: '2023-06-27T14:42:38.831Z'
      description: >-
        Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)
        format.
    attribute:
      type: string
      description: Value of the attribute to be updated.
    updatedAt:
      type: string
      example: '2023-07-04T12:49:15Z'
      description: >-
        Timestamp of the last update in [ISO
        8601](https://wikipedia.org/wiki/ISO_8601) format.
    deleteByParams:
      type: object
      additionalProperties: false
      properties:
        facetFilters:
          $ref: '#/components/schemas/facetFilters'
        filters:
          $ref: '#/components/schemas/filters'
        numericFilters:
          $ref: '#/components/schemas/numericFilters'
        tagFilters:
          $ref: '#/components/schemas/tagFilters'
        aroundLatLng:
          $ref: '#/components/schemas/aroundLatLng'
        aroundRadius:
          $ref: '#/components/schemas/aroundRadius'
        insideBoundingBox:
          $ref: '#/components/schemas/insideBoundingBox'
        insidePolygon:
          $ref: '#/components/schemas/insidePolygon'
    builtInOperationType:
      type: string
      enum:
        - Increment
        - Decrement
        - Add
        - Remove
        - AddUnique
        - IncrementFrom
        - IncrementSet
      description: Operation to apply to the attribute.
    builtInOperation:
      type: object
      description: >-
        To update an attribute without pushing the entire record, you can use
        these built-in operations.
      additionalProperties: false
      properties:
        _operation:
          $ref: '#/components/schemas/builtInOperationType'
        value:
          type: string
          description: >-
            Value that corresponds to the operation, for example an `Increment`
            or `Decrement` step, `Add` or `Remove` value.
      required:
        - _operation
        - value
    attributeToUpdate:
      oneOf:
        - $ref: '#/components/schemas/attribute'
        - $ref: '#/components/schemas/builtInOperation'
    action:
      type: string
      enum:
        - addObject
        - updateObject
        - partialUpdateObject
        - partialUpdateObjectNoCreate
        - deleteObject
        - delete
        - clear
      description: Type of batch operation.
    objectIDs:
      type: array
      items:
        type: string
      example:
        - record-1
        - record-2
      description: Unique object (record) identifiers.
    baseIndexSettings:
      type: object
      additionalProperties: false
      properties:
        replicas:
          type: array
          items:
            type: string
          example:
            - virtual(prod_products_price_asc)
            - dev_products_replica
          description: >-
            Creates
            [replicas](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/),
            which are copies of a primary index with the same records but
            different settings.
          default: []
          x-categories:
            - Ranking
        paginationLimitedTo:
          type: integer
          example: 20
          description: Maximum number of hits accessible through pagination.
          default: 1000
        unretrievableAttributes:
          type: array
          items:
            type: string
          example:
            - popularity
          description: Attributes that can't be retrieved at query time.
          default: []
          x-categories:
            - Attributes
        disableTypoToleranceOnWords:
          type: array
          items:
            type: string
          example:
            - wheel
            - 1X2BCD
          description: >-
            Words for which you want to turn off [typo
            tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
          default: []
          x-categories:
            - Typos
        attributesToTransliterate:
          description: >-
            Attributes in your index to which [Japanese
            transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead)
            applies. This will ensure that words indexed in Katakana or Kanji
            can also be searched in Hiragana.
          type: array
          items:
            type: string
          example:
            - name
            - description
          x-categories:
            - Languages
        camelCaseAttributes:
          type: array
          items:
            type: string
          example:
            - description
          description: >-
            Attributes on which to split [camel
            case](https://wikipedia.org/wiki/Camel_case) words.
          default: []
          x-categories:
            - Languages
        decompoundedAttributes:
          type: object
          example:
            de:
              - name
          description: >-
            Attributes in your index to which [word
            segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/)
            (decompounding) applies.
          default: {}
          x-categories:
            - Languages
        indexLanguages:
          type: array
          items:
            type: string
          example:
            - ja
          description: >-
            Set the languages of your index, for language-specific processing
            steps such as
            [tokenization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/tokenization/)
            and
            [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
          default: []
          x-categories:
            - Languages
        disablePrefixOnAttributes:
          type: array
          items:
            type: string
          example:
            - sku
          description: >-
            Attributes for which you want to turn off [prefix
            matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search).
          default: []
          x-categories:
            - Query strategy
        allowCompressionOfIntegerArray:
          type: boolean
          description: >
            Incidates whether the engine compresses arrays with exclusively
            non-negative integers.

            When enabled, the compressed arrays may be reordered.
          default: false
          x-categories:
            - Performance
        numericAttributesForFiltering:
          type: array
          items:
            type: string
          description: >-
            Numeric attributes that can be used as [numerical
            filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters).
          example:
            - quantity
            - popularity
          default: []
          x-categories:
            - Performance
        separatorsToIndex:
          type: string
          example: +#
          description: >-
            Controls which separators are added to an Algolia index as part of
            [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean).
            Separators are all non-letter characters except spaces and currency
            characters, such as $€£¥.
          default: ''
          x-categories:
            - Typos
        searchableAttributes:
          type: array
          items:
            type: string
          example:
            - title,alternative_title
            - author
            - unordered(text)
            - emails.personal
          description: >
            [Attributes used for
            searching](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/),
            including determining [if matches at the beginning of a word are
            important (ordered) or not
            (unordered)](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/how-to/configuring-searchable-attributes-the-right-way/#understanding-word-position).
          default: []
          x-categories:
            - Attributes
        userData:
          $ref: '#/components/schemas/userData'
        customNormalization:
          description: >-
            A list of characters and their normalized replacements to override
            Algolia's default
            [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
          type: object
          example: |
            {default: {'ä': 'ae', 'ü': 'ue'}}
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          x-categories:
            - Languages
    indexSettings:
      description: Algolia index settings.
      allOf:
        - $ref: '#/components/schemas/baseIndexSettings'
        - $ref: '#/components/schemas/indexSettingsAsSearchParams'
    SynonymType:
      type: string
      description: Synonym type.
      example: onewaysynonym
      enum:
        - synonym
        - onewaysynonym
        - altcorrection1
        - altcorrection2
        - placeholder
    synonymHit:
      type: object
      description: Synonym object.
      additionalProperties: false
      properties:
        objectID:
          type: string
          description: Unique identifier of a synonym object.
          example: synonymID
        type:
          $ref: '#/components/schemas/SynonymType'
        synonyms:
          type: array
          items:
            type: string
          description: Words or phrases considered equivalent.
          example:
            - vehicle
            - auto
        input:
          type: string
          description: >-
            Word or phrase to appear in query strings (for
            [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).
          example: car
        word:
          type: string
          description: >-
            Word or phrase to appear in query strings (for [`altcorrection1` and
            `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).
          example: car
        corrections:
          type: array
          items:
            type: string
          description: Words to be matched in records.
          example:
            - vehicle
            - auto
        placeholder:
          type: string
          description: >
            [Placeholder
            token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/)
            to be put inside records.
          example: <Street>
        replacements:
          type: array
          items:
            type: string
          description: >-
            Query words that will match the [placeholder
            token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).
          example:
            - street
            - st
      required:
        - objectID
        - type
    id:
      type: string
      example: '12'
      description: Unique identifier of a synonym object.
    synonymHits:
      type: array
      description: Synonym objects.
      items:
        $ref: '#/components/schemas/synonymHit'
    searchSynonymsResponse:
      type: object
      additionalProperties: true
      properties:
        hits:
          $ref: '#/components/schemas/synonymHits'
        nbHits:
          $ref: '#/components/schemas/nbHits'
      required:
        - hits
        - nbHits
    keyString:
      type: string
      description: API key.
      example: 13ad45b4d0a2f6ea65ecbddf6aa260f2
    createdAtTimestamp:
      type: integer
      format: int64
      example: 1656345570000
      description: >-
        Timestamp of creation in milliseconds in [Unix epoch
        time](https://wikipedia.org/wiki/Unix_time).
    baseGetApiKeyResponse:
      type: object
      additionalProperties: false
      properties:
        value:
          $ref: '#/components/schemas/keyString'
        createdAt:
          $ref: '#/components/schemas/createdAtTimestamp'
      required:
        - key
        - createdAt
    acl:
      description: >
        API key permissions:


        `addObject`: required to add or update records, copy or move an index.

        `analytics`: required to access the Analytics API.

        `browse`: required to view records

        `deleteIndex`: required to delete indices.

        `deleteObject`: required to delete records.

        `editSettings`: required to change index settings.

        `inference`: required to access the Inference API.

        `listIndexes`: required to list indices.

        `logs`: required to access logs of search and indexing operations.

        `recommendation`: required to access the Personalization and Recommend
        APIs.

        `search`: required to search records

        `seeUnretrievableAttributes`: required to retrieve
        [`unretrievableAttributes`](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/)
        for all operations that return records.

        `settings`: required to examine index settings.
      type: string
      enum:
        - addObject
        - analytics
        - browse
        - deleteObject
        - deleteIndex
        - editSettings
        - inference
        - listIndexes
        - logs
        - personalization
        - recommendation
        - search
        - seeUnretrievableAttributes
        - settings
        - usage
    apiKey:
      type: object
      description: API key object.
      additionalProperties: false
      properties:
        acl:
          type: array
          description: >
            [Permissions](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl)
            associated with the key.
          example:
            - search
            - addObject
          default: []
          items:
            $ref: '#/components/schemas/acl'
        description:
          type: string
          description: Description of an API key for you and your team members.
          example: Browse-restricted key
          default: ''
        indexes:
          type: array
          description: >
            Restricts this API key to a list of indices or index patterns. If
            the list is empty, all indices are allowed.

            Specify either an exact index name or a pattern with a leading or
            trailing wildcard character (or both). For example:

            - `dev_*` matches all indices starting with "dev_" - `*_dev` matches
            all indices ending with "_dev" - `*_products_*` matches all indices
            containing "_products_".
          example:
            - dev_*
            - prod_products
          default: []
          items:
            type: string
        maxHitsPerQuery:
          type: integer
          description: >
            Maximum number of hits this API key can retrieve in one query. If
            zero, no limit is enforced.

            > **Note**: Use this parameter to protect you from third-party
            attempts to retrieve your entire content by massively querying the
            index.
          default: 0
        maxQueriesPerIPPerHour:
          type: integer
          description: >
            Maximum number of API calls per hour allowed from a given IP address
            or [user
            token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).

            Each time an API call is performed with this key, a check is
            performed. If there were more than the specified number of calls
            within the last hour, the API returns an error with the status code
            `429` (Too Many Requests).


            > **Note**: Use this parameter to protect you from third-party
            attempts to retrieve your entire content by massively querying the
            index.
          default: 0
        queryParameters:
          type: string
          description: >
            Force some [query
            parameters](https://www.algolia.com/doc/api-reference/api-parameters/)
            to be applied for each query made with this API key.

            It's a URL-encoded query string.
          example: >-
            typoTolerance%3Dstrict%26ignorePlurals%3Dfalse%26filters%3Drights%3Apublic
          default: ''
        referers:
          type: array
          description: >
            Restrict this API key to specific
            [referrers](https://www.algolia.com/doc/guides/security/api-keys/in-depth/api-key-restrictions/#http-referrers).
            If empty, all referrers are allowed.

            For example:

            - `https://algolia.com/*` matches all referrers starting with
            "https://algolia.com/" - `*.algolia.com` matches all referrers
            ending with ".algolia.com" - `*algolia.com*` allows everything in
            the domain "algolia.com".
          example:
            - '*algolia.com*'
          default: []
          items:
            type: string
        validity:
          type: integer
          description: >
            Validity duration of a key (in seconds).  The key will automatically
            be removed after this time has expired. The default value of 0 never
            expires.

            Short-lived API keys are useful to grant temporary access to your
            data. For example, in mobile apps, you can't [control when users
            update your
            app](https://www.algolia.com/doc/guides/security/security-best-practices/#use-secured-api-keys-in-mobile-apps).
            So instead of encoding keys into your app as you would for a web
            app, you should dynamically fetch them from your mobile app's
            backend.
          example: 86400
          default: 0
      required:
        - acl
    getApiKeyResponse:
      allOf:
        - $ref: '#/components/schemas/baseGetApiKeyResponse'
        - $ref: '#/components/schemas/apiKey'
    createdAt:
      type: string
      example: '2023-07-04T12:49:15Z'
      description: >-
        Timestamp of creation in [ISO-8601](https://wikipedia.org/wiki/ISO_8601)
        format.
    addApiKeyResponse:
      type: object
      additionalProperties: false
      properties:
        key:
          $ref: '#/components/schemas/keyString'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - key
        - createdAt
    anchoring:
      type: string
      description: >-
        Whether the pattern parameter matches the beginning (`startsWith`) or
        end (`endsWith`) of the query string, is an exact match (`is`), or a
        partial match (`contains`).
      enum:
        - is
        - startsWith
        - endsWith
        - contains
    condition:
      type: object
      additionalProperties: false
      properties:
        pattern:
          type: string
          description: Query pattern syntax.
          example: '{facet:brand}'
        anchoring:
          $ref: '#/components/schemas/anchoring'
        alternatives:
          type: boolean
          description: Whether the pattern matches on plurals, synonyms, and typos.
          default: false
        context:
          type: string
          description: 'Rule context format: [A-Za-z0-9_-]+).'
          example: trackedFilters
    editType:
      description: Type of edit.
      type: string
      enum:
        - remove
        - replace
    edit:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/editType'
        delete:
          description: Text or patterns to remove from the query string.
          type: string
        insert:
          description: >-
            Text that should be inserted in place of the removed text inside the
            query string.
          type: string
    consequenceQueryObject:
      type: object
      additionalProperties: false
      properties:
        remove:
          description: Words to remove.
          type: array
          items:
            type: string
        edits:
          description: Edits to apply.
          type: array
          items:
            $ref: '#/components/schemas/edit'
    consequenceQuery:
      description: >-
        When providing a string, it replaces the entire query string. When
        providing an object, it describes incremental edits to be made to the
        query string (but you can't do both).
      oneOf:
        - $ref: '#/components/schemas/consequenceQueryObject'
        - type: string
    automaticFacetFilter:
      type: object
      description: Automatic facet Filter.
      additionalProperties: false
      properties:
        facet:
          type: string
          description: >-
            Attribute to filter on. This must match a facet placeholder in the
            Rule's pattern.
        score:
          type: integer
          default: 1
          description: >-
            Score for the filter. Typically used for optional or disjunctive
            filters.
        disjunctive:
          type: boolean
          default: false
          description: Whether the filter is disjunctive (true) or conjunctive (false).
      required:
        - facet
    automaticFacetFilters:
      description: >-
        Names of facets to which automatic filtering must be applied; they must
        match the facet name of a facet value placeholder in the query pattern.
      oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/automaticFacetFilter'
        - type: array
          items:
            type: string
    params:
      type: object
      description: Additional search parameters.
      additionalProperties: false
      properties:
        query:
          $ref: '#/components/schemas/consequenceQuery'
        automaticFacetFilters:
          $ref: '#/components/schemas/automaticFacetFilters'
        automaticOptionalFacetFilters:
          $ref: '#/components/schemas/automaticFacetFilters'
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
    consequenceParams:
      allOf:
        - $ref: '#/components/schemas/baseSearchParamsWithoutQuery'
        - $ref: '#/components/schemas/indexSettingsAsSearchParams'
        - $ref: '#/components/schemas/params'
    promotePosition:
      type: integer
      description: >-
        The position to promote the records to. If you pass objectIDs, the
        records are placed at this position as a group. For example, if you
        pronmote four objectIDs to position 0, the records take the first four
        positions.
      example: 0
    promoteObjectIDs:
      description: Records to promote.
      type: object
      additionalProperties: false
      properties:
        objectIDs:
          type: array
          description: Unique identifiers of the records to promote.
          example:
            - 3f31c087763a2ceec359b318fc3edef3
            - 63c3c871e31a152d67df7720192fd752
          items:
            type: string
        position:
          $ref: '#/components/schemas/promotePosition'
      required:
        - position
        - objectIDs
    promoteObjectID:
      description: Record to promote.
      type: object
      additionalProperties: false
      properties:
        objectID:
          type: string
          example: 2b642cf64c587f50388eb1b8d047bf56
          description: Unique identifier of the record to promote.
        position:
          $ref: '#/components/schemas/promotePosition'
      required:
        - position
        - objectID
    promote:
      oneOf:
        - $ref: '#/components/schemas/promoteObjectIDs'
        - $ref: '#/components/schemas/promoteObjectID'
    consequence:
      type: object
      description: >
        [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences)
        of a rule.
      additionalProperties: false
      properties:
        params:
          $ref: '#/components/schemas/consequenceParams'
        promote:
          type: array
          description: Records to promote.
          items:
            $ref: '#/components/schemas/promote'
        filterPromotes:
          type: boolean
          default: false
          description: >-
            Only use in combination with the `promote` consequence. When `true`,
            promoted results will be restricted to match the filters of the
            current search. When `false`, the promoted results will show up
            regardless of the filters.
        hide:
          type: array
          description: Records to hide. By default, you can hide up to 50 records per rule.
          items:
            title: consequenceHide
            type: object
            description: Unique identifier of the record to hide.
            additionalProperties: false
            properties:
              objectID:
                $ref: '#/components/schemas/objectID'
            required:
              - objectID
        userData:
          description: >-
            Custom JSON object that will be appended to the userData array in
            the response. This object isn't interpreted by the API. It's limited
            to 1kB of minified JSON.
          example:
            settingID: f2a7b51e3503acc6a39b3784ffb84300
            pluginVersion: 1.6.0
    timeRange:
      type: object
      additionalProperties: false
      properties:
        from:
          type: integer
          description: Lower bound of the time range (Unix timestamp).
        until:
          type: integer
          description: Upper bound of the time range (Unix timestamp).
      required:
        - from
        - until
    rule:
      type: object
      description: Rule object.
      additionalProperties: false
      properties:
        objectID:
          type: string
          description: Unique identifier for a rule object.
          example: hide-12345
        conditions:
          type: array
          description: >
            [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions)
            required to activate a rule. You can use up to 25 conditions per
            rule.
          items:
            $ref: '#/components/schemas/condition'
        consequence:
          $ref: '#/components/schemas/consequence'
        description:
          type: string
          description: >-
            Description of the rule's purpose. This can be helpful for display
            in the Algolia dashboard.
          example: Display a promotional banner
        enabled:
          type: boolean
          default: true
          description: >-
            Indicates whether to enable the rule. If it isn't enabled, it isn't
            applied at query time.
        validity:
          type: array
          description: >-
            If you specify a validity period, the rule _only_ applies only
            during that period. If specified, the array must not be empty.
          items:
            $ref: '#/components/schemas/timeRange'
      required:
        - objectID
    updatedRuleResponse:
      type: object
      additionalProperties: false
      properties:
        objectID:
          $ref: '#/components/schemas/objectID'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        taskID:
          $ref: '#/components/schemas/taskID'
      required:
        - objectID
        - updatedAt
        - taskID
    parameters_query:
      type: string
      description: Rule object query.
      default: ''
    parameters_page:
      type: integer
      minimum: 0
      description: Requested page (the first page is page 0).
    parameters_hitsPerPage:
      type: integer
      default: 20
      minimum: 1
      maximum: 1000
      description: Maximum number of hits per page.
    dictionaryType:
      type: string
      enum:
        - plurals
        - stopwords
        - compounds
    dictionaryAction:
      type: string
      enum:
        - addEntry
        - deleteEntry
      description: Actions to perform.
    dictionaryEntryState:
      type: string
      enum:
        - enabled
        - disabled
      default: enabled
      description: >-
        Indicates whether a dictionary entry is active (`enabled`) or inactive
        (`disabled`).
    dictionaryEntry:
      type: object
      description: Dictionary entry.
      additionalProperties: true
      required:
        - objectID
        - language
      properties:
        objectID:
          type: string
          description: Unique identifier for a dictionary object.
          example: under
        language:
          type: string
          description: >
            [Supported language ISO
            code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
          example: de
        word:
          type: string
          description: >
            Dictionary entry word. Usage depends on the type of dictionary
            entry.

            **`stopwordEntry`**

            The stop word you want to add or update. If the entry already exists
            in Algolia's standard dictionary, you can override its behavior by
            adding it to the custom dictionary and setting its `state` to
            `disabled`.

            **`compoundEntry`**

            When `decomposition` is empty: adds `word` as a compound atom. For
            example, atom “kino” decomposes the query “kopfkino” into "kopf" and
            "kino".

            When `decomposition` isn't empty: creates a decomposition exception.
            For example, when decomposition is set to the ["hund", "hutte"]
            exception, "hundehutte" decomposes into “hund” and “hutte”,
            discarding the linking "e".
          example: down
        words:
          type: array
          description: >
            Compound dictionary [word
            declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/).

            If the entry already exists in Algolia's standard dictionary, you
            can override its behavior by adding it to the custom dictionary and
            setting its `state` to `disabled`.
          example:
            - cheval
            - chevaux
          items:
            type: string
        decomposition:
          type: array
          description: For compound entries, governs the behavior of the `word` parameter.
          example:
            - kopf
            - schmerz
            - tablette
          items:
            type: string
        state:
          $ref: '#/components/schemas/dictionaryEntryState'
    language:
      description: >
        [Supported language ISO
        code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
      example: en
      type: string
    standardEntry:
      description: Key-value pair of a language ISO code and a boolean value.
      example: |
        {'fr': false}
      type: object
      nullable: true
      additionalProperties:
        type: boolean
    standardEntries:
      description: >
        Key-value pairs of [supported language ISO
        codes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)
        and boolean values.
      additionalProperties: false
      properties:
        plurals:
          $ref: '#/components/schemas/standardEntry'
        stopwords:
          $ref: '#/components/schemas/standardEntry'
        compounds:
          $ref: '#/components/schemas/standardEntry'
    dictionaryLanguage:
      type: object
      additionalProperties: false
      nullable: true
      description: Custom entries for a dictionary.
      properties:
        nbCustomEntries:
          description: >
            If `0`, the dictionary hasn't been customized and only contains
            standard entries provided by Algolia.

            If `null`, that feature isn't available or isn't supported for that
            language.
          type: integer
    languages:
      type: object
      description: Dictionary language.
      additionalProperties: false
      required:
        - plurals
        - stopwords
        - compounds
      properties:
        plurals:
          $ref: '#/components/schemas/dictionaryLanguage'
        stopwords:
          $ref: '#/components/schemas/dictionaryLanguage'
        compounds:
          $ref: '#/components/schemas/dictionaryLanguage'
    userID:
      type: string
      pattern: ^[a-zA-Z0-9 \-*.]+$
      description: userID of the user.
      example: user1
    userId:
      title: userID
      type: object
      description: Unique user ID.
      properties:
        userID:
          $ref: '#/components/schemas/userID'
        clusterName:
          type: string
          description: Cluster to which the user is assigned.
          example: c1-test
        nbRecords:
          type: integer
          description: Number of records belonging to the user.
          example: 42
        dataSize:
          type: integer
          description: Data size used by the user.
          example: 0
      required:
        - userID
        - clusterName
        - nbRecords
        - dataSize
    clusterName:
      type: string
      description: Cluster name.
      example: c11-test
    nbRecords:
      type: integer
      description: Number of records in the cluster.
      example: 3
    dataSize:
      type: integer
      description: Data size taken by all the users assigned to the cluster.
      example: 481
    source:
      description: Source.
      required:
        - source
      properties:
        source:
          description: IP address range of the source.
          type: string
          example: 10.0.0.1/32
        description:
          description: Source description.
          type: string
          example: Server subnet
    sources:
      description: Sources.
      type: array
      items:
        $ref: '#/components/schemas/source'
    logType:
      type: string
      enum:
        - all
        - query
        - build
        - error
      default: all
    taskStatus:
      type: string
      enum:
        - published
        - notPublished
      description: _published_ if the task has been processed, _notPublished_ otherwise.
    operationType:
      type: string
      enum:
        - move
        - copy
      example: copy
      description: Operation to perform (_move_ or _copy_).
    scopeType:
      type: string
      enum:
        - settings
        - synonyms
        - rules
    fetchedIndex:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: Index name.
          example: movies
        createdAt:
          type: string
          description: >-
            Index creation date. An empty string means that the index has no
            records.
          example: '2022-09-19T16:36:44.471Z'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        entries:
          type: integer
          description: Number of records contained in the index.
          example: 100
        dataSize:
          type: integer
          description: Number of bytes of the index in minified format.
          example: 48450
        fileSize:
          type: integer
          description: Number of bytes of the index binary file.
          example: 112927
        lastBuildTimeS:
          type: integer
          description: Last build time.
          example: 3
        numberOfPendingTasks:
          type: integer
          default: 0
          description: >-
            Number of pending indexing operations. This value is deprecated and
            should not be used.
        pendingTask:
          type: boolean
          default: false
          description: >-
            A boolean which says whether the index has pending tasks. This value
            is deprecated and should not be used.
        primary:
          type: string
          description: >-
            Only present if the index is a replica. Contains the name of the
            related primary index.
          example: T02
        replicas:
          type: array
          items:
            type: string
          description: >-
            Only present if the index is a primary index with replicas. Contains
            the names of all linked replicas.
          example:
            - T02_push
            - T2replica
      required:
        - name
        - createdAt
        - updatedAt
        - entries
        - dataSize
        - fileSize
        - lastBuildTimeS
        - pendingTask
        - numberOfPendingTasks
    listIndicesResponse:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          description: All indices in your Algolia application.
          items:
            $ref: '#/components/schemas/fetchedIndex'
        nbPages:
          type: integer
          description: Number of pages.
          example: 100
      required:
        - items
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    DeletedAt:
      description: OK
      content:
        application/json:
          schema:
            title: deletedAtResponse
            description: Response, taskID, and deletion timestamp.
            additionalProperties: false
            type: object
            required:
              - taskID
              - deletedAt
            properties:
              taskID:
                $ref: '#/components/schemas/taskID'
              deletedAt:
                $ref: '#/components/schemas/deletedAt'
    UpdatedAtWithObjectId:
      description: OK
      content:
        application/json:
          schema:
            title: updatedAtWithObjectIdResponse
            description: >-
              Response, taskID, unique object identifier, and an update
              timestamp.
            additionalProperties: false
            type: object
            properties:
              taskID:
                $ref: '#/components/schemas/taskID'
              updatedAt:
                $ref: '#/components/schemas/updatedAt'
              objectID:
                $ref: '#/components/schemas/objectID'
    UpdatedAt:
      description: OK
      content:
        application/json:
          schema:
            title: updatedAtResponse
            description: Response, taskID, and update timestamp.
            additionalProperties: false
            type: object
            required:
              - taskID
              - updatedAt
            properties:
              taskID:
                $ref: '#/components/schemas/taskID'
              updatedAt:
                $ref: '#/components/schemas/updatedAt'
    CreatedAt:
      description: OK
      content:
        application/json:
          schema:
            title: createdAtResponse
            description: Response and creation timestamp.
            additionalProperties: false
            type: object
            required:
              - createdAt
            properties:
              createdAt:
                $ref: '#/components/schemas/createdAt'
servers:
  - url: https://{appId}.algolia.net
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-1.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-2.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-3.algolianet.com
    variables:
      appId:
        default: myAppId
  - url: https://{appId}-dsn.algolia.net
    variables:
      appId:
        default: myAppId
security:
  - appId: []
    apiKey: []
tags:
  - name: Advanced
    description: Advanced operations.
  - name: Api Keys
    description: Manage your API keys.
  - name: Clusters
    description: >
      Multi-cluster operations.

      Algolia no longer offers [multi-cluster
      management](https://www.algolia.com/doc/guides/scaling/managing-multiple-clusters-mcm/).

      - If you want to partition your data per user, use facets and secured API
      keys instead. - If you need more data, consider upgrading to a bigger
      cluster to suit your needs. Contact [Algolia's support
      team](https://support.algolia.com/hc/en-us/requests/new) for details.
  - name: Dictionaries
    description: >-
      Dictionary operations allow you to customize linguistic features such as
      [stop
      words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/),
      [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/),
      and [segmentation
      (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/).
  - name: Indices
    description: >-
      Manage indices, including listing them, checking and updating settings,
      deleting, copying, and renaming.
  - name: Records
    description: Record operations.
  - name: Rules
    description: Rules operations.
  - name: Search
    description: Search operations.
  - name: Synonyms
    description: Synonym operations.
  - name: Vaults
    description: >
      Vault operations.

      Algolia Vault allows you to restrict network-level access to your cluster
      to a specific set of IP addresses: for non-authorized IP addresses, the
      cluster is invisible.

      You should authorize the IP addresses of team members who need to access
      the Alglolia dashboard, as it's also affected by the restricted list you
      set up.

      To access this feature, [Algolia
      Vault](https://www.algolia.com/doc/guides/security/algolia-vault/) must be
      enabled on your server. Contact [Algolia's support
      team](https://support.algolia.com/hc/en-us/requests/new) for details.

      > **Note**: The maximum number of allowed sources is 1,000.
  - name: _model_index_settings
    x-displayName: Index settings
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/indexSettings" />.
x-tagGroups:
  - name: Search and indexing
    tags:
      - Indices
      - Records
      - Search
  - name: Relevance
    tags:
      - Rules
      - Synonyms
      - Dictionaries
  - name: Others
    tags:
      - Api Keys
      - Clusters
      - Vaults
      - Advanced
  - name: Models
    tags:
      - _model_index_settings
paths:
  /1{path}:
    post:
      operationId: post
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - algoliasearch
  /1/indexes/*/queries:
    post:
      tags:
        - algoliasearch
      operationId: search
      x-use-read-transporter: true
      x-cacheable: true
      x-legacy-signature: true
      summary: Search multiple indices.
      description: Send multiple search queries to one or more indices.
      requestBody:
        required: true
        description: >-
          Query requests and strategies. Results will be received in the same
          order as the queries.
        content:
          application/json:
            schema:
              title: searchMethodParams
              type: object
              additionalProperties: false
              properties:
                requests:
                  type: array
                  items:
                    $ref: '#/components/schemas/SearchQuery'
                strategy:
                  $ref: '#/components/schemas/searchStrategy'
              required:
                - requests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchResponses
                type: object
                additionalProperties: false
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/searchResult'
                required:
                  - results
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
