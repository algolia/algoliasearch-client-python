openapi: 3.0.2
info:
  title: Insights API
  description: >-
    The Algolia Insights API lets you collect events related to your search and
    discovery experience. Events represent actions that users take on your app
    or website. They unlock powerful features, such as recommendations,
    personalization, smarter search results, and analytics that help you
    optimize your user experience.
  version: 1.0.0
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    eventName:
      type: string
      minLength: 1
      maxLength: 64
      description: >
        Can contain up to 64 ASCII characters. 


        Consider naming events consistentlyâ€”for example,

        by adopting Segment's

        [object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework)

        framework.
      example: Product Clicked
    ClickEvent:
      type: string
      enum:
        - click
    index:
      type: string
      description: Name of the Algolia index.
      example: YourIndexName
    objectIDs:
      type: array
      description: List of object identifiers for items of an Algolia index.
      items:
        type: string
      minItems: 1
      maxItems: 20
      example:
        - object-1
        - object-2
        - object-3
    positions:
      type: array
      items:
        type: integer
      minimum: 1
      minItems: 1
      maxItems: 20
      description: |
        Position of the clicked objects in the search results.

        The first search result has a position of 1 (not 0).
        You must provide 1 `position` for each `objectID`.
      example:
        - 1
        - 2
        - 5
    queryID:
      type: string
      pattern: '[0-9a-f]{32}'
      minLength: 32
      maxLength: 32
      description: >
        Unique identifier for a search query.


        The query ID is required for events related to search or browse
        requests.

        If you add `clickAnalytics: true` as a search request parameter, the
        query ID is included in the API response.
      example: 3e48cd0616e466948dd85abf5c3fbbe2
    userToken:
      type: string
      minLength: 1
      maxLength: 129
      pattern: '[a-zA-Z0-9_=/+-]{1,129}'
      description: >
        Anonymous or pseudonymous user identifier. 


        > **Note**: Never include personally identifiable information in user
        tokens.
      example: test-user-1
    timestamp:
      type: integer
      format: int64
      description: >
        Time of the event in milliseconds in [Unix epoch
        time](https://wikipedia.org/wiki/Unix_time).

        By default, the Insights API uses the time it receives an event as its
        timestamp.
      example: 1687193127
    ClickedObjectIDsAfterSearch:
      type: object
      title: Clicked object IDs after search
      description: |
        Click event after an Algolia request.

        Use this event to track when users click items in the search results.
        If you're building your category pages with Algolia,
        you'll also use this event.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ClickEvent'
        index:
          $ref: '#/components/schemas/index'
        objectIDs:
          $ref: '#/components/schemas/objectIDs'
        positions:
          $ref: '#/components/schemas/positions'
        queryID:
          $ref: '#/components/schemas/queryID'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - objectIDs
        - positions
        - queryID
        - userToken
    ConversionEvent:
      type: string
      enum:
        - conversion
    ConvertedObjectIDsAfterSearch:
      type: object
      title: Converted object IDs after search
      description: >
        Use this event to track when users convert after a previous Algolia
        request.

        For example, a user clicks on an item in the search results to view the
        product detail page.

        Then, the user adds the item to their shopping cart.


        If you're building your category pages with Algolia,

        you'll also use this event.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ConversionEvent'
        index:
          $ref: '#/components/schemas/index'
        objectIDs:
          $ref: '#/components/schemas/objectIDs'
        queryID:
          $ref: '#/components/schemas/queryID'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - objectIDs
        - queryID
        - userToken
    ClickedObjectIDs:
      type: object
      title: Clicked object IDs
      description: >
        Use this event to track when users click items unrelated to a previous
        Algolia request.

        For example, if you don't use Algolia to build your category pages, use
        this event.


        To track click events related to Algolia requests, use the "Clicked
        object IDs after search" event.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ClickEvent'
        index:
          $ref: '#/components/schemas/index'
        objectIDs:
          $ref: '#/components/schemas/objectIDs'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - objectIDs
        - userToken
    ConvertedObjectIDs:
      type: object
      title: Converted object IDs
      description: >
        Use this event to track when users convert on items unrelated to a
        previous Algolia request.

        For example, if you don't use Algolia to build your category pages, use
        this event.


        To track conversion events related to Algolia requests, use the
        "Converted object IDs after search" event.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ConversionEvent'
        index:
          $ref: '#/components/schemas/index'
        objectIDs:
          $ref: '#/components/schemas/objectIDs'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - objectIDs
        - userToken
    filters:
      type: array
      description: |
        Facet filters.

        Each facet filter string must be URL-encoded, such as, `discount:10%25`.
      items:
        type: string
      minItems: 1
      maxItems: 20
      example:
        - brand:apple
    ClickedFilters:
      type: object
      title: Clicked filters
      description: >-
        Use this event to track when users click facet filters in your user
        interface.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ClickEvent'
        index:
          $ref: '#/components/schemas/index'
        filters:
          $ref: '#/components/schemas/filters'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - filters
        - userToken
    ConvertedFilters:
      type: object
      title: Converted filters
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ConversionEvent'
        index:
          $ref: '#/components/schemas/index'
        filters:
          $ref: '#/components/schemas/filters'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - filters
        - userToken
    ViewEvent:
      type: string
      enum:
        - view
    ViewedObjectIDs:
      type: object
      title: Viewed object IDs
      description: Use this event to track when users viewed items in the search results.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ViewEvent'
        index:
          $ref: '#/components/schemas/index'
        objectIDs:
          $ref: '#/components/schemas/objectIDs'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - objectIDs
        - userToken
    ViewedFilters:
      type: object
      title: Viewed filters
      description: |
        Use this method to capture active filters.
        For example, when browsing a category page,
        users see content filtered on that specific category.
      additionalProperties: false
      properties:
        eventName:
          $ref: '#/components/schemas/eventName'
        eventType:
          $ref: '#/components/schemas/ViewEvent'
        index:
          $ref: '#/components/schemas/index'
        filters:
          $ref: '#/components/schemas/filters'
        userToken:
          $ref: '#/components/schemas/userToken'
        timestamp:
          $ref: '#/components/schemas/timestamp'
      required:
        - eventName
        - eventType
        - index
        - filters
        - userToken
    EventsItems:
      oneOf:
        - $ref: '#/components/schemas/ClickedObjectIDsAfterSearch'
        - $ref: '#/components/schemas/ConvertedObjectIDsAfterSearch'
        - $ref: '#/components/schemas/ClickedObjectIDs'
        - $ref: '#/components/schemas/ConvertedObjectIDs'
        - $ref: '#/components/schemas/ClickedFilters'
        - $ref: '#/components/schemas/ConvertedFilters'
        - $ref: '#/components/schemas/ViewedObjectIDs'
        - $ref: '#/components/schemas/ViewedFilters'
    EventsResponse:
      type: object
      description: The response of the Insights API.
      additionalProperties: false
      properties:
        message:
          type: string
          description: Details about the response, such as error messages.
        status:
          type: integer
          description: The HTTP status code of the response.
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
servers:
  - url: https://insights.{region}.algolia.io
    variables:
      region:
        enum:
          - us
          - de
        default: us
  - url: https://insights.algolia.io
security:
  - appId: []
    apiKey: []
tags:
  - name: events
    x-displayName: Events
    description: >-
      Events represent user interactions with your website or app. They include
      details like the event's name, type, a timestamp or a user token.
x-tagGroups:
  - name: General
    tags:
      - events
paths:
  /1{path}:
    get:
      operationId: get
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - insights
    post:
      operationId: post
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - insights
    put:
      operationId: put
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - insights
    delete:
      operationId: del
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      tags:
        - insights
  /1/events:
    post:
      tags:
        - insights
      operationId: pushEvents
      summary: Send events.
      description: |
        Send a list of events to the Insights API.

        You can include up to 1,000 events in a single request,
        but the request body must be smaller than 2&nbsp;MB.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InsightsEvents
              type: object
              additionalProperties: false
              required:
                - events
              properties:
                events:
                  type: array
                  description: >
                    List of click and conversion events.


                    An event is an object representing a user interaction.

                    Events have attributes that describe the interaction,

                    such as an event name, a type, or a user token.

                    Some attributes require other attributes to be declared,

                    and some attributes can't be declared at the same time.


                    **All** events must be valid, otherwise the API returns an
                    error.
                  minItems: 1
                  maxItems: 1000
                  items:
                    $ref: '#/components/schemas/EventsItems'
            examples:
              ClickObjectIDsAfterSearch:
                summary: Click event after search requests.
                value:
                  events:
                    - eventName: Products Clicked
                      eventType: click
                      index: test-index
                      userToken: test-user-1
                      objectIDs:
                        - object-1
                      positions:
                        - 1
                      queryID: 7dfe2ada7bca48bdd0629649df0bee07
              ConversionObjectIDsAfterSearch:
                summary: Conversion event after search requests.
                value:
                  events:
                    - eventName: Products Added To Cart
                      eventType: conversion
                      index: test-index
                      userToken: test-user-1
                      objectIDs:
                        - object-1
                      queryID: 7dfe2ada7bca48bdd0629649df0bee07
              ClickObjectIDs:
                summary: Click event.
                value:
                  events:
                    - eventName: Products Clicked
                      eventType: click
                      index: test-index
                      userToken: test-user-1
                      objectIDs:
                        - object-1
              ConversionObjectIDs:
                summary: Conversion event.
                value:
                  events:
                    - eventName: Products Added To Cart
                      eventType: conversion
                      index: test-index
                      userToken: test-user-1
                      objectIDs:
                        - object-1
              ClickFilter:
                summary: Click event with filters.
                value:
                  events:
                    - eventName: Category Clicked
                      eventType: click
                      index: test-index
                      userToken: test-user-1
                      filters:
                        - category:books
              ConversionFilter:
                summary: Conversion event with filters.
                value:
                  events:
                    - eventName: Category Converted
                      eventType: conversion
                      index: test-index
                      userToken: test-user-1
                      filters:
                        - category:books
              ViewObjectIDs:
                summary: View event.
                value:
                  events:
                    - eventName: Products Viewed
                      eventType: view
                      index: test-index
                      userToken: test-user-1
                      objectIDs:
                        - object-1
              ViewFilters:
                summary: View event with filters.
                value:
                  events:
                    - eventName: Category Viewed
                      eventType: view
                      index: test-index
                      userToken: test-user-1
                      filters:
                        - category:books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
              examples:
                Success:
                  summary: Events successfully sent to the Insights API.
                  description: >-
                    Success indicates that the Insights API received the events
                    correctly, and that event properties are formatted
                    correctly. Success doesn't imply that the event can be used
                    by any Algolia feature. For example, the Insights API
                    doesn't check if the index name you provided exists, or if
                    the object IDs exist in your index.
                  value:
                    status: 200
                    message: OK
        '400':
          description: Bad Request.
          content:
            text/html:
              schema:
                type: string
                title: HTML
              examples:
                BadRequest:
                  summary: Bad request.
                  description: This error doesn't return a JSON object, but HTML.
                  value: >-
                    Error: Bad Request. Your client has issued a malformed or
                    illegal request.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
              examples:
                Unauthorized:
                  summary: Invalid credentials.
                  description: >-
                    You need to provide your application ID using the
                    `X-Algolia-Application-ID` header and your (search) API key
                    with the `X-Algolia-API-Key` header.
                  value:
                    status: 401
                    message: Invalid credentials
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
              examples:
                NotFound:
                  summary: Unsupported operation.
                  description: Check that you're using the correct URL.
                  value:
                    status: 404
                    message: >-
                      Path not supported by Insights REST API. Please have a
                      look at
                      [https://www.algolia.com/doc/rest-api/insights/](https://www.algolia.com/doc/rest-api/insights/)
                      for the list of valid commands.
        '405':
          description: Method Not Allowed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
              examples:
                MethodNotAllowed:
                  summary: Method not allowed.
                  description: >-
                    Check, that you're using the `POST` method with the Insights
                    API. Other methods aren't supported.
                  value:
                    status: 405
                    message: Method Not Allowed
        '413':
          description: Payload Too Large.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
              examples:
                PayloadTooLarge:
                  summary: Request body larger than 2&nbsp;MB.
                  value:
                    status: 413
                    message: Request Entity Too Large
        '422':
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
              examples:
                InvalidPayload:
                  summary: Incorrect event object.
                  value:
                    status: 422
                    message: Invalid payload
                NoEvents:
                  summary: No events.
                  description: >-
                    This can happen if you're sending an empty `events` array,
                    or if you try to send a single event object instead of the
                    `events` array.
                  value:
                    status: 422
                    message: No events to process
                NoEventsField:
                  summary: Missing events attribute.
                  description: >-
                    This can happen if you try to send an array of events
                    directly instead of using the `events` attribute.
                  value:
                    status: 422
                    message: >-
                      Invalid type for field : expected
                      insights.PublicEventsBatch, got array
                EventNameRequired:
                  summary: Missing eventName attribute.
                  value:
                    status: 422
                    message: EventName is required
                WrongEventName:
                  summary: Event name too long or wrong characters.
                  value:
                    status: 422
                    message: >-
                      EventName must contain only visible ASCII characters, and
                      be between 1 and 64 characters long
                EventTypeRequired:
                  summary: Missing eventType attribute.
                  value:
                    status: 422
                    message: EventType is required
                WrongEventType:
                  summary: Wrong event type.
                  value:
                    status: 422
                    message: EventType must be one of "click", "conversion" or "view"
                IndexRequired:
                  summary: Missing index attribute.
                  value:
                    status: 422
                    message: The index field is required
                UserTokenRequired:
                  summary: Missing userToken attribute.
                  value:
                    status: 422
                    message: The userToken field is required
                WrongUserToken:
                  summary: Malformed user token.
                  value:
                    status: 422
                    message: >-
                      UserToken must contain only alphanumeric, equal, plus,
                      slash, hyphen, or underscore characters, and be between 1
                      and 128 characters long
                NoObjectIDsOrFilters:
                  summary: Missing objectIDs or filters attribute.
                  description: >-
                    Each event must include either the `objectIDs` or `filters`
                    attribute.
                  value:
                    status: 422
                    message: Event should specify either some ObjectIDs or some Filters
                BothDefined:
                  summary: Both objectIDs and filters attributes defined.
                  value:
                    status: 422
                    message: Event should specify ObjectIDs or Filters, but not both
                PositionsOnWrongEventType:
                  summary: Wrong combination of positions and eventType attributes.
                  value:
                    status: 422
                    message: >-
                      Only event of type click should specify the positions
                      attribute
                PositionsWithoutQueryID:
                  summary: Positions attribute without queryID.
                  description: >-
                    Click events with the `positions` attribute require the
                    `queryID` attribute.
                  value:
                    status: 422
                    message: >-
                      Event of type click with positions should specify a
                      queryID
                WrongPositionsValue:
                  summary: Wrong value in positions array.
                  description: Any value in the `positions` array must be greater than 0.
                  value:
                    status: 422
                    message: >-
                      Event of type click may only have strictly positive
                      positions
                WrongPositionsItems:
                  summary: Wrong number of items in positions array.
                  description: >-
                    For click events with the `queryID` and `objectIDs`
                    attributes, you must include the `positions` attribute with
                    the same number of items as the `objectIDs` attribute.
                  value:
                    status: 422
                    message: >-
                      Event of type click should have the same number of
                      ObjectIDs and Positions
                WrongQueryID:
                  summary: Malformed query ID.
                  value:
                    status: 422
                    message: >-
                      Query ID must be a search query ID (32 characters
                      hexadecimal string)
                InvalidDataType:
                  summary: Wrong data type.
                  description: >-
                    This can happen if one or more of the attributes is a number
                    instead of a string.
                  value:
                    status: 422
                    message: 'Invalid type for field events: expected string, got number'
                InvalidTimestamp:
                  summary: Timestamp too old.
                  value:
                    status: 422
                    message: The timestamp must be at most 4 days in the past
                TooManyEvents:
                  summary: Too many events.
                  description: You can include up to 1,000 events in a single API request.
                  value:
                    status: 422
                    message: Cannot process more than 1000 events in a batch
