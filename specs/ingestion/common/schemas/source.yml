Source:
  type: object
  additionalProperties: false
  properties:
    sourceID:
      $ref: './common.yml#/sourceID'
    type:
      $ref: '#/SourceType'
    name:
      type: string
    input:
      $ref: '#/SourceInput'
    authenticationID:
      $ref: './common.yml#/authenticationID'
    createdAt:
      $ref: './common.yml#/createdAt'
    updatedAt:
      $ref: './common.yml#/updatedAt'
  required:
    - sourceID
    - type
    - name
    - input
    - createdAt

SourceCreate:
  type: object
  additionalProperties: false
  properties:
    type:
      $ref: '#/SourceType'
    name:
      type: string
    input:
      $ref: '#/SourceInput'
    authenticationID:
      $ref: './common.yml#/authenticationID'
  required:
    - type
    - name
    - input

SourceCreateResponse:
  type: object
  additionalProperties: false
  properties:
    sourceID:
      $ref: './common.yml#/sourceID'
    name:
      type: string
    createdAt:
      $ref: './common.yml#/createdAt'
  required:
    - sourceID
    - name
    - createdAt

SourceUpdate:
  type: object
  additionalProperties: false
  properties:
    name:
      type: string
    input:
      $ref: '#/SourceUpdateInput'
    authenticationID:
      $ref: './common.yml#/authenticationID'

SourceUpdateResponse:
  type: object
  additionalProperties: false
  properties:
    sourceID:
      $ref: './common.yml#/sourceID'
    name:
      type: string
    updatedAt:
      $ref: './common.yml#/updatedAt'
  required:
    - sourceID
    - name
    - updatedAt

SourceSearch:
  type: object
  additionalProperties: false
  properties:
    sourceIDs:
      type: array
      items:
        type: string
  required:
    - sourceIDs

SourceType:
  type: string
  enum: ['bigcommerce', 'commercetools', 'json', 'csv', 'bigquery', 'docker']

SourceCommercetools:
  type: object
  additionalProperties: false
  properties:
    storeKeys:
      type: array
      items:
        description: Unique and immutable key of the referenced Store.
        type: string
    locales:
      type: array
      description: >
        Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example ["fr-FR", "en"].
      items:
        type: string
    url:
      type: string
    projectKey:
      type: string
    fallbackIsInStockValue:
      type: boolean
      default: true
      description: >
        Determines the value that will be stored in the Algolia record if there's no inventory information on the product.
  required:
    - url
    - projectKey

SourceBigCommerce:
  type: object
  additionalProperties: false
  properties:
    storeHash:
      type: string
      description: The store hash identifying the store the shopper is signing in to.
    channel:
      $ref: '#/BigCommerceChannel'
    customFields:
      type: array
      items:
        type: string
    productMetafields:
      type: array
      items:
        $ref: '#/BigCommerceMetafield'
    variantMetafields:
      type: array
      items:
        $ref: '#/BigCommerceMetafield'
  required:
    - store_hash

BigCommerceMetafield:
  type: object
  additionalProperties: false
  properties:
    namespace:
      type: string
      description: The namespace of the metafield.
    key:
      type: string
      description: The key identifier of the metafield.
  required:
    - namespace
    - key

BigCommerceChannel:
  type: object
  additionalProperties: false
  properties:
    id:
      type: integer
      description: The ID of the bigcommerce channel.
    currencies:
      type: array
      description: An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.
      example: ['usd', 'eur']
      items:
        type: string
        example: 'usd'
  required:
    - id

MethodType:
  type: string
  enum: ['GET', 'POST']

UniqueIDColumn:
  type: string
  description: The name of the column that contains the unique ID, used as `objectID` in Algolia.

SourceJSON:
  type: object
  additionalProperties: false
  properties:
    url:
      type: string
      description: The URL of the file.
    uniqueIDColumn:
      $ref: '#/UniqueIDColumn'
    method:
      $ref: '#/MethodType'
  required:
    - url

MappingTypeCSV:
  type: string
  enum: ['string', 'integer', 'float', 'boolean', 'json']

SourceCSV:
  type: object
  additionalProperties: false
  properties:
    url:
      type: string
      description: The URL of the file.
    uniqueIDColumn:
      $ref: '#/UniqueIDColumn'
    mapping:
      type: object
      description: >
        Mapping of type for every column. For example {"myColumn": "boolean", "myOtherColumn": "json"}.
      additionalProperties:
        $ref: '#/MappingTypeCSV'
    method:
      $ref: '#/MethodType'
    delimiter:
      type: string
      minLength: 1
      maxLength: 1
      default: ','
      description: The character used to split the value on each line, default to a comma (\r, \n, 0xFFFD, and space are forbidden).
  required:
    - url

SourceBigQuery:
  type: object
  additionalProperties: false
  properties:
    projectID:
      type: string
      description: Project ID of the BigQuery Source.
    datasetID:
      type: string
      description: Dataset ID of the BigQuery Source.
    dataType:
      $ref: '#/BigQueryDataType'
    table:
      type: string
      description: Table name (for default BQ).
    tablePrefix:
      type: string
      description: Table prefix (for Google Analytics).
    customSQLRequest:
      type: string
      description: Custom SQL request to extract data from the BigQuery table.
    uniqueIDColumn:
      $ref: '#/UniqueIDColumn'
  required:
    - projectID
    - datasetID

BigQueryDataType:
  type: string
  enum: ['ga4', 'ga360']

SourceDocker:
  type: object
  additionalProperties: false
  properties:
    imageType:
      $ref: '#/DockerImageType'
    registry:
      $ref: '#/DockerRegistry'
    image:
      type: string
      description: The name of the image to pull.
      example: algolia/zendesk
    version:
      type: string
      description: The version of the image, defaults to `latest`.
      example: v2.1.0
    configuration:
      type: object
      description: The configuration of the spec.
  required:
    - registry
    - image
    - imageType
    - configuration

SourceUpdateDocker:
  type: object
  additionalProperties: false
  properties:
    registry:
      $ref: '#/DockerRegistry'
    image:
      type: string
      description: The name of the image to pull.
      example: algolia/zendesk
    version:
      type: string
      description: The version of the image, defaults to `latest`.
      example: v2.1.0
    configuration:
      type: object
      description: The configuration of the spec.
  required:
    - configuration

DockerRegistry:
  type: string
  enum: ['dockerhub', 'ghcr']
  description: The registry where the image is stored.

DockerImageType:
  type: string
  enum: ['singer', 'custom', 'airbyte']
  description: The type of the image.

SourceInput:
  oneOf:
    - $ref: '#/SourceCommercetools'
    - $ref: '#/SourceBigCommerce'
    - $ref: '#/SourceJSON'
    - $ref: '#/SourceCSV'
    - $ref: '#/SourceBigQuery'
    - $ref: '#/SourceDocker'

SourceUpdateCommercetools:
  type: object
  additionalProperties: false
  properties:
    storeKeys:
      type: array
      description: Unique and immutable key of the referenced Store.
      items:
        type: string
    locales:
      type: array
      description: >
        Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example ["fr-FR", "en"].
      items:
        type: string

SourceUpdateInput:
  oneOf:
    - $ref: '#/SourceUpdateCommercetools'
    - $ref: '#/SourceJSON'
    - $ref: '#/SourceCSV'
    - $ref: '#/SourceBigQuery'
    - $ref: '#/SourceUpdateDocker'
